---
layout: default
title : Subalgebras.Subuniverses module (The Agda Universal Algebra Library)
date : 2021-01-14
author: William DeMeo
---

### <a id="subuniverses">Subuniverses</a>

This section presents the [Subalgebras.Subuniverses][] module of the [Agda Universal Algebra Library][].

We start by defining a type that represents the important concept of **subuniverse**. Suppose 𝑨 is an algebra.  A subset B ⊆ ∣ 𝑨 ∣ is said to be **closed under the operations of** 𝑨 if for each 𝑓 ∈ ∣ 𝑆 ∣ and all tuples 𝒃 : ∥ 𝑆 ∥ 𝑓 → 𝐵 the element (𝑓 ̂ 𝑨) 𝒃 belongs to B. If a subset B ⊆ 𝐴 is closed under the operations of 𝑨, then we call B a **subuniverse** of 𝑨.

\begin{code}

{-# OPTIONS --without-K --exact-split --safe #-}

open import Algebras.Signatures using (Signature; 𝓞; 𝓥)
open import MGS-Subsingleton-Theorems using (global-dfunext)

module Subalgebras.Subuniverses {𝑆 : Signature 𝓞 𝓥}{gfe : global-dfunext} where

open import Terms.Operations{𝑆 = 𝑆}{gfe} public
open import Relation.Unary using (⋂) public

\end{code}

We first show how to represent in [Agda][] the collection of subuniverses of an algebra A.  Since a subuniverse is viewed as a subset of the domain of A, we define it as a predicate on ∣ A ∣.  Thus, the collection of subuniverses is a predicate on predicates on ∣ A ∣.

\begin{code}

module _ {𝓤 𝓦 : Universe} where

 Subuniverses : (𝑨 : Algebra 𝓤 𝑆) → Pred (Pred ∣ 𝑨 ∣ 𝓦)(𝓞 ⊔ 𝓥 ⊔ 𝓤 ⊔ 𝓦)
 Subuniverses 𝑨 B = (𝑓 : ∣ 𝑆 ∣)(𝑎 : ∥ 𝑆 ∥ 𝑓 → ∣ 𝑨 ∣) → Im 𝑎 ⊆ B → (𝑓 ̂ 𝑨) 𝑎 ∈ B

\end{code}

Here's one way to construct an algebra out of a subuniverse.

\begin{code}

 SubunivAlg : (𝑨 : Algebra 𝓤 𝑆)(B : Pred ∣ 𝑨 ∣ 𝓦) → B ∈ Subuniverses 𝑨 → Algebra (𝓤 ⊔ 𝓦) 𝑆
 SubunivAlg 𝑨 B B∈SubA = Σ B , λ 𝑓 𝑏 → (𝑓 ̂ 𝑨)(fst ∘ 𝑏) , B∈SubA 𝑓 (fst ∘ 𝑏)(snd ∘ 𝑏)

\end{code}



#### <a id="subuniverses-as-records">Subuniverses as records</a>

We could define the type of subuniverses as a record as follows.

\begin{code}

 record Subuniverse {𝑨 : Algebra 𝓤 𝑆} : ov (𝓤 ⊔ 𝓦) ̇ where
  constructor mksub
  field
    sset  : Pred ∣ 𝑨 ∣ 𝓦
    isSub : sset ∈ Subuniverses 𝑨

\end{code}

For example, we could use such a type to prove that the equalizer of two homomorphisms is a subuniverse.

\begin{code}

 𝑬𝑯-is-subuniverse : {𝑨 : Algebra 𝓤 𝑆}(𝑩 : Algebra 𝓦 𝑆)
                     (g h : hom 𝑨 𝑩) → Subuniverse {𝑨 = 𝑨}

 𝑬𝑯-is-subuniverse 𝑩 g h = mksub (𝑬𝑯 𝑩 g h) λ 𝑓 𝒂 x → 𝑬𝑯-closed 𝑩 g h 𝑓 𝒂 x

\end{code}

#### <a id="subuniverse-generation">Subuniverse Generation</a>

If 𝑨 is an algebra and B ⊆ ∣ 𝑨 ∣ a subset of the universe of 𝑨, then the **subuniverse of** 𝑨 **generated by** B is typically denoted by Sg<sup>𝑨</sup>(B) and defined to be the smallest subuniverse of 𝑨 containing B.  Equivalently,

Sg<sup>𝑨</sup>(B)  =  ⋂ { U : U is a subuniverse of 𝑨 and  B ⊆ U }.

We now define an inductive type `Sg` that represents the subuniverse generated by a given collection of elements from the domain of an algebra.

\begin{code}

 data Sg (𝑨 : Algebra 𝓤 𝑆)(X : Pred ∣ 𝑨 ∣ 𝓦) : Pred ∣ 𝑨 ∣ (𝓞 ⊔ 𝓥 ⊔ 𝓦 ⊔ 𝓤) where
  var : ∀ {v} → v ∈ X → v ∈ Sg 𝑨 X
  app : (𝑓 : ∣ 𝑆 ∣)(𝑎 : ∥ 𝑆 ∥ 𝑓 → ∣ 𝑨 ∣) → Im 𝑎 ⊆ Sg 𝑨 X → (𝑓 ̂ 𝑨) 𝑎 ∈ Sg 𝑨 X

\end{code}

Let's now prove that, for any subset `X` of the domain `∣ 𝑨 ∣` of an algebra `𝑨`, the type `Sg X` does indeed represent a subuniverse of 𝑨.

\begin{code}

module _ {𝓤 𝓦 : Universe} where

 sgIsSub : {𝑨 : Algebra 𝓤 𝑆}{X : Pred ∣ 𝑨 ∣ 𝓦} → Sg 𝑨 X ∈ Subuniverses 𝑨
 sgIsSub = app

\end{code}

Next we show, by induction on the shape of its elements, `Sg X` is the smallest subuniverse of `𝑨` containing `X`.

\begin{code}

 sgIsSmallest : {𝓡 : Universe}(𝑨 : Algebra 𝓤 𝑆){X : Pred ∣ 𝑨 ∣ 𝓦}(Y : Pred ∣ 𝑨 ∣ 𝓡)
  →             Y ∈ Subuniverses 𝑨  →  X ⊆ Y  →  Sg 𝑨 X ⊆ Y

 sgIsSmallest _ _ _ XinY (var Xv) = XinY Xv
 sgIsSmallest 𝑨 Y YsubA XinY (app 𝑓 𝑎 SgXa) = fa∈Y
  where
  IH : Im 𝑎 ⊆ Y
  IH i = sgIsSmallest 𝑨 Y YsubA XinY (SgXa i)

  fa∈Y : (𝑓 ̂ 𝑨) 𝑎 ∈ Y
  fa∈Y = YsubA 𝑓 𝑎 IH

\end{code}

When the element of `Sg X` is constructed as `app f {a} ima⊆SgX`, we may assume (the induction hypothesis) that the arguments `a` belong to `Y`. Then the result of applying `f` to `a` must also belong to `Y`, since `Y` is a subuniverse.



#### <a id="subuniverse-lemmas">Subuniverse Lemmas</a>

Here we formalize a few basic properties of subuniverses.

First, the intersection of subuniverses is again a subuniverse.

\begin{code}

module _ {𝓘 𝓤 𝓦 : Universe} where

 sub-inter-is-sub : (𝑨 : Algebra 𝓤 𝑆)(I : 𝓘 ̇)(𝒜 : I → Pred ∣ 𝑨 ∣ 𝓦)
  →                 ((i : I) → 𝒜 i ∈ Subuniverses 𝑨)
                    --------------------------------
  →                 ⋂ I 𝒜 ∈ Subuniverses 𝑨

 sub-inter-is-sub 𝑨 I 𝒜 Ai-is-Sub 𝑓 a ima⊆⋂A = α
  where
  α : (𝑓 ̂ 𝑨) a ∈ ⋂ I 𝒜
  α i = Ai-is-Sub i 𝑓 a λ j → ima⊆⋂A j i

\end{code}

Next, subuniverses are closed under the action of term operations.

\begin{code}

module _ {𝓤 𝓦 : Universe} where

 sub-term-closed : {𝓧 : Universe}{X : 𝓧 ̇}(𝑨 : Algebra 𝓤 𝑆)(B : Pred ∣ 𝑨 ∣ 𝓦)
  →                (B ∈ Subuniverses 𝑨) → (t : Term X)(b : X → ∣ 𝑨 ∣)
  →                (∀ x → b x ∈ B) → ((t ̇ 𝑨) b) ∈ B

 sub-term-closed 𝑨 B AB (ℊ x) b b∈B = b∈B x
 sub-term-closed 𝑨 B AB (node f 𝒕) b b∈B = AB f (λ z → (𝒕 z ̇ 𝑨) b)
                                               (λ x → sub-term-closed 𝑨 B AB (𝒕 x) b b∈B)
\end{code}

Alternatively, we could express the preceeding fact using an inductive type.

\begin{code}

 data TermImage (𝑨 : Algebra 𝓤 𝑆)(Y : Pred ∣ 𝑨 ∣ 𝓦) : Pred ∣ 𝑨 ∣ (𝓞 ⊔ 𝓥 ⊔ 𝓤 ⊔ 𝓦) where
  var : ∀ {y : ∣ 𝑨 ∣} → y ∈ Y → y ∈ TermImage 𝑨 Y
  app : ∀ 𝑓 𝑡 → (∀ i → 𝑡 i ∈ TermImage 𝑨 Y) → (𝑓 ̂ 𝑨) 𝑡 ∈ TermImage 𝑨 Y

\end{code}

By what we proved above, it should come as no surprise that `TermImage 𝑨 Y` is a subuniverse of 𝑨 that contains Y.

\begin{code}

 TermImageIsSub : {𝑨 : Algebra 𝓤 𝑆}{Y : Pred ∣ 𝑨 ∣ 𝓦} → TermImage 𝑨 Y ∈ Subuniverses 𝑨
 TermImageIsSub = app

 Y⊆TermImageY : {𝑨 : Algebra 𝓤 𝑆}{Y : Pred ∣ 𝑨 ∣ 𝓦} → Y ⊆ TermImage 𝑨 Y
 Y⊆TermImageY {a} a∈Y = var a∈Y

\end{code}

Since `Sg 𝑨 Y` is the smallest subuniverse containing Y, we obtain the following inclusion.

\begin{code}

 SgY⊆TermImageY : (𝑨 : Algebra 𝓤 𝑆)(Y : Pred ∣ 𝑨 ∣ 𝓦) → Sg 𝑨 Y ⊆ TermImage 𝑨 Y
 SgY⊆TermImageY 𝑨 Y = sgIsSmallest 𝑨 (TermImage 𝑨 Y) TermImageIsSub Y⊆TermImageY

\end{code}




#### <a id="properties-of-homomorphisms">Homomorphic images are subuniverses</a>

Now that we have developed the machinery of subuniverse generation, we can prove two basic facts that play an important role in many theorems about algebraic structures.

First, the image of a homomorphism is a subuniverse of its codomain.

\begin{code}

 hom-image-is-sub : {𝑨 : Algebra 𝓤 𝑆}{𝑩 : Algebra 𝓦 𝑆}
                    (ϕ : hom 𝑨 𝑩)  →  (HomImage 𝑩 ϕ) ∈ Subuniverses 𝑩

 hom-image-is-sub {𝑨}{𝑩} ϕ f b b∈Imf = eq ((f ̂ 𝑩) b) ((f ̂ 𝑨) ar) γ
  where
  ar : ∥ 𝑆 ∥ f → ∣ 𝑨 ∣
  ar = λ x → Inv ∣ ϕ ∣(b x)(b∈Imf x)

  ζ : ∣ ϕ ∣ ∘ ar ≡ b
  ζ = gfe (λ x → InvIsInv ∣ ϕ ∣(b x)(b∈Imf x))

  γ : (f ̂ 𝑩) b ≡ ∣ ϕ ∣((f ̂ 𝑨)(λ x → Inv ∣ ϕ ∣(b x)(b∈Imf x)))
  γ = (f ̂ 𝑩) b            ≡⟨ ap (f ̂ 𝑩)(ζ ⁻¹) ⟩
      (f ̂ 𝑩)(∣ ϕ ∣ ∘ ar)  ≡⟨(∥ ϕ ∥ f ar)⁻¹ ⟩
      ∣ ϕ ∣((f ̂ 𝑨) ar)    ∎

\end{code}


Next we prove the important fact that homomorphisms are uniquely determined by their values on a generating set.

\begin{code}

 HomUnique : funext 𝓥 𝓤 → {𝑨 𝑩 : Algebra 𝓤 𝑆}
             (X : Pred ∣ 𝑨 ∣ 𝓤)  (g h : hom 𝑨 𝑩)
  →          (∀ (x : ∣ 𝑨 ∣)  →  x ∈ X  →  ∣ g ∣ x ≡ ∣ h ∣ x)
             --------------------------------------------
  →          (∀ (a : ∣ 𝑨 ∣) → a ∈ Sg 𝑨 X → ∣ g ∣ a ≡ ∣ h ∣ a)

 HomUnique _ _ _ _ gx≡hx a (var x) = (gx≡hx) a x

 HomUnique fe {𝑨}{𝑩} X g h gx≡hx a (app 𝑓 𝒂 im𝒂⊆SgX) =
  ∣ g ∣ ((𝑓 ̂ 𝑨) 𝒂)     ≡⟨ ∥ g ∥ 𝑓 𝒂 ⟩
  (𝑓 ̂ 𝑩)(∣ g ∣ ∘ 𝒂 )   ≡⟨ ap (𝑓 ̂ 𝑩)(fe induction-hypothesis) ⟩
  (𝑓 ̂ 𝑩)(∣ h ∣ ∘ 𝒂)    ≡⟨ ( ∥ h ∥ 𝑓 𝒂 )⁻¹ ⟩
  ∣ h ∣ ((𝑓 ̂ 𝑨) 𝒂 )    ∎
  where induction-hypothesis = λ x → HomUnique fe {𝑨}{𝑩} X g h gx≡hx (𝒂 x) ( im𝒂⊆SgX x )

\end{code}


---------------------------------

[↑ Subalgebras](Subalgebras.html)
<span style="float:right;">[Subalgebras.Subalgebras →](Subalgebras.Subalgebras.html)</span>


{% include UALib.Links.md %}
