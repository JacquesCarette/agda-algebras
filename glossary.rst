.. include:: _static/math_macros.rst

.. role:: code

Glossary
========

.. _acronyms:

Acronyms
--------

.. glossary::

    ATP
      | *n.* automated theorem prover
      | *v.* automated theorem proving

    CiC
      :term:`Calculus of Inductive Constructions`

    cod
      codomain

    dcpo
      :term:`directed-cocomplete poset`

    dom
      domain
    
    ETT
      :term:`extensional` :term:`intuitionistic type theory <TT>`.

    em
      :term:`law of the excluded middle`

    ER
      equality reflection

    ITP
      | *n.* interactive theorem prover (or proof assistant), e.g., :term:`Agda`, :term:`Coq`, :term:`Lean`, and :term:`NuPrl`
      | *v.* interactive theorem proving

    ITT
      :term:`intensional` :term:`intuitionistic type theory <TT>`.

    ω-cpo
      :term:`ω-chain cocomplete poset`

    ran
      range

    TT
      intuitionistic :term:`type theory`

    UIP
      uniqueness of identity proofs

----------------------------------------------------

.. _nomenclature:

Nomenclature
------------

.. glossary::

    abstract category
      An **abstract category** is one whose objects are not sets or whose morphisms are not functions defined on sets. Our next example is somewhere in between. The objects are sets, but the morphisms are not necessarily *total* functions; that is, they may be defined on only a part of the source object.

    Agda
      An :term:`intensional`, :term:`predicative` :term:`ITP` supporting dependent types and based on Martin Lof type theory; url: https://wiki.portal.chalmers.se/agda/pmwiki.php

    algebraic lattice
      a :term:`lattice` generated by its :term:`compact elements <compact element>`. 

    antichain
      A subset :math:`A` of the preordered set :math:`X` is called an **antichain** if for all :math:`x, y ∈ A` we have :math:`x ≤ y` implies :math:`y ≤ x`.

    antisymmetric
      A binary relation :math:`R` on a set :math:`X` is called **antisymmetric** provided :math:`∀  x, y ∈ X \ (x \mathrel{R} y ∧ y\mathrel{R} x \ → \ x=y)`.

    arity
      Given a :term:`signature` :math:`σ = (F, ρ)`, each operation symbol :math:`f ∈ F` is assigned a value :math:`ρ f`, called the **arity** of :math:`f`. (Intuitively, the arity can be thought of as the "number of arguments" that :math:`f` takes as "input".)

    Boolean algebra
      ..todo:: fill in definition    

    Boolean algebra homomorphism
      a :term:`lattice homomorphism` that also preserves complementation (but every lattice homomorphism between Boolean lattices automatically preserves complementation, so we may characterize the morphisms of this category more simply as the lattice homomorphisms).

    bytecode
      ..todo:: fill in definition    

    Calculus of Inductive Constructions
      see https://en.wikipedia.org/wiki/Calculus_of_constructions

    canonical normal form
      .. todo:: insert definition

    category of categories
      has categories as objects and functors as morphisms.

    category of small categories
      see :term:`Cat`

    Choice
      .. todo:: insert definition

    chain
      Let :math:`⟨ X, ≤ ⟩` be a preordered set and :math:`C ⊆ X`. We call :math:`C` a **chain** of :math:`⟨ X, ≤ ⟩` if for all :math:`x, y ∈ C` either :math:`x ≤ y` or :math:`y ≤ x` holds.

    closed
      A subset :math:`B ⊆ A` is called **closed** under the operations in :math:`F` if, for all :math:`f ∈ F` and all :math:`a : ρ f → B`, it is the case that :math:`f a ∈ B`.

    cocomplete
      A poset in which all joins exist is called **cocomplete**.

    code extraction
      .. todo:: insert def

    codomain
      If :math:`f : A → B` is a function or relation from :math:`A` to :math:`B`, then :math:`B` is called the **codomain** of :math:`f`, denoted by 
      :math:`\mathrm{cod} f`.

    commutative diagram
      A **commutative diagram** is a diagram with the following property: for all objects :math:`C` and :math:`D`, all paths from :math:`C` to :math:`D` yield the same morphism.

    compact element
      an element :math:`x` of a lattice :math:`L` is called **compact** provided for all :math:`Y ⊆ L`, if :math:`x ≤ ⋁ Y`, then there exists a finite subset :math:`F ⊆ Y` such that :math:`x ≤ ⋁ F`.

    complete
      A poset in which all meets exist is called **complete**.

    complete lattice
      a :term:`poset` whose universe is closed under *arbitrary* meets and joins.

    complete lattice homomorphism
      a function :math:`f: X → Y` preserving complete meets and joins.

    component
      If :math:`α : F ⇒ G` is a natural transformation, then the **component** of α at :math:`A` is the morphism :math:`α_A : FA → GA`.

    computationally pure
      An expression is called **computationally pure** if

      .. todo:: complete definition

    concrete category
      A **concrete category** is one whose objects are sets and whose morphisms are functions defined on these sets (possibly satisfying some other special properties).

    consecutive functions
      If :math:`f : A → B` and :math:`g : B → C`, then :math:`\mathrm{cod} f = \mathrm{dom} g` and we say that :math:`f` and :math:`g` are **consecutive functions**.

    contravariant powerset functor
      The **contravariant powerset functor** is a functor :math:`P : \mathbf{Set} → \mathbf{Set}` such that for each :math:`g : B → A` the morphism :math:`g^← : PA → PB` is given by :math:`g^← (S) = \{b ∈ B : g(b) ∈ S\}` for each :math:`S ⊆ A`.

    coproduct
      Given two objects :math:`A` and :math:`B` a **coproduct** (or **sum**) of :math:`A` and :math:`B` is denoted by :math:`A+B` and defined to be an object with morphisms :math:`ι_1 : A → A + B` and :math:`ι_2 : B → A + B` such that for every object :math:`X` and all morphisms :math:`u : A → Y` and :math:`v : B → Y` there exists a unique morphism :math:`[u,v] : A+B → Y` such that :math:`[u,v] ∘ ι_1 = u` and :math:`[u,v] ∘ ι_2 = v`.

    Coq
      An :term:`intensional`, :term:`impredicative` :term:`ITP` supporting dependent types and based on :term:`CiC`; url: http://coq.inria.fr
      
    covariant powerset functor
      The **(covariant) powerset functor** is a functor :math:`P : \mathbf{Set} → \mathbf{Set}` such that for each :math:`f : A → B` the morphism :math:`Pf : PA → PB` is given by :math:`Pf(S) = \{f(x) : x ∈ S\}` for each :math:`S \subseteq A`.

    Curry-Howard correspondence
      the correspondence between propositions and types, and proofs and programs; a proposition is identified with the type of its proofs, and a proof is a program of that type.

    currying
      see https://en.wikipedia.org/wiki/Currying

    data-relevant
      .. todo:: insert definition

    dependent function type
      see :term:`pi type`

    dependent pair type
      see :term:`sigma type`

    dependent type
      A **dependent type** is actually a family of types indexed by some parameter. That is, a dependent type provides a *type schema*, which is a collection of types indexed by a set of values. For example, the type ``Fin n`` of finite sets of size ``n`` is a type that *depends* on the value ``n``.  More examples are in :numref:`Section %s <dependent-types>`.  For details, see `the section on Dependent Types <https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#dependent-types>`_ in the `Theorem Proving in Lean <https://leanprover.github.io/theorem_proving_in_lean/>`_ manual.

    directed set
      A subset :math:`D` of a :term:`preorder` is called **directed** if every finite subset of :math:`D` has an upper bound in :math:`D`. That is, if :math:`F ⊆ D` and :math:`F` is finite, then there exists :math:`d ∈ D` such that :math:`f ≤ d` for all :math:`f ∈ F`.

    directed-cocomplete preorder
      a :term:`preorder` for which the joins of all :term:`directed <directed set>` subsets exist. 
      
    directed-cocomplete poset
      an :term:`antisymmetric` :term:`directed-cocomplete preorder`.

    directed graph
      A **directed graph** is a :term:`relational structure` consisting of a vertex set :math:`V` (whose elements are called vertices) and an edge set :math:`E\subseteq V^2` (whose elements are called edges).

    domain
      If :math:`f : A → B` is a function or relation from :math:`A` to :math:`B`, then :math:`A` is called the **domain** of :math:`f`, denoted by :math:`\mathrm{dom} f`.

    endofunctor
      A functor that maps a category to itself is called an **endofunctor**.

    endomorphism
      A morphism :math:`f : A → A` (i.e., :math:`\mathrm{src} f = \mathrm{tar} f`) is called an **endomorphism**.

    epimorphism
      A morphism :math:`f: A → B` is called an **epimorphism** if for every object :math:`Y` and pair :math:`y_1, y_2: B → Y` of morphisms, :math:`y_1 ∘ f = y_2 ∘ f` implies :math:`y_1 = y_2`. When :math:`f: A → B` is an **epimorphism** we often say ":math:`f` is epi" and write :math:`f: ↠ B`.

    equivalence relation
      An **equivalence relation** is a :term:`symmetric` :term:`preorder`. The collection of all equivalence relations on :math:`X` is denoted by :math:`\mathrm{Eq}(X)`.

    equivalent categories
      Two categories :math:`\mathcal C` and :math:`\mathcal D` are called **equivalent categories** if there are functors :math:`F : \mathcal C →  \mathcal D` and :math:`G : \mathcal D → \mathcal C` together with natural isomorphisms :math:`ε : FG ≅ \mathrm{id}_{\mathcal D}`, and :math:`η : \mathrm{id}_{\mathcal C} ≅ GF`. We say that :math:`F` is an equivalence with an inverse equivalence :math:`G` and denote the equivalence by :math:`F : \mathcal C ≃ \mathcal D : G`.

    essentially surjective on objects
      A functor :math:`F : C → D` is called **essentially surjective on objects** if for every object :math:`D ∈ \mathcal D`, there is some :math:`A ∈ \mathcal C` such that :math:`F A` is isomorphic to :math:`D`.

    existential image functor
      the functor :math:`∃ f : P(A) → P(B)` defined by :math:`∃ f(X) = \{f(x) : x ∈  X\},` for :math:`X ∈ P(A)`.

    evaluation functor
      The **evaluation functor** is the functor :math:`Ev : \mathcal C × \mathbf{Set}^{\mathcal C} → \mathbf{Set}`, which takes each pair :math:`(A, F) ∈ \mathcal C_{\mathrm{obj}} × \mathbf{Set}^{{\mathcal C}_{\mathrm{obj}}}` of objects to the set :math:`Ev(A, F) = FA`, and takes each pair :math:`(g, μ) ∈ \mathcal C_{\mathrm{obj}} × \mathbf{Set}^{\mathcal C_{\mathrm{mor}}}` of morphisms to a function on sets, namely, :math:`Ev(g, μ) = μ_{A'} ∘ F g = F' g ∘ μ_A`, where :math:`g ∈ \mathcal C(A, A')` and :math:`μ : F ⇒ F'`.

    evaluation natural transformation
      The **evaluation natural transformation** is denoted by :math:`eval^A : F_A →  \mathrm{id}_{\mathbf{Set}}` and defined by...

    .. todo:: complete this sentence

    extensional
      An *extensional* definition of a term lists everything that qualifies as something to which that term refers. (See also :term:`function extensionality`.)

    faithful functor
      A functor :math:`F : \mathcal C → \mathcal D` is called **faithful** if for all objects :math:`A`, :math:`B` in :math:`\mathcal C_{\mathrm{obj}}`, the map :math:`\mathcal C(A, B) → \mathcal D(F A, F B)` is injective.
      
      (Note: A faithful functor need not be injective on morphisms.)

    finite ordinals
      The category :math:`\mathrm{Ord}_{\mathrm{fin}}` of **finite ordinals** (also called the **simplex category** :math:`\Delta`) has :math:`\underline n = \{0, 1, \dots, n-1\}` for objects (for each :math:`n ∈ ℕ`) and :math:`f : \underline n → \underline m` :term:`monotone functions <monotone function>` for morphisms.

    free algebra
      Let :math:`\mathcal V` be a variety of algebras of a certain :term:`signature`. Let :math:`X` be a set.  The **free algebra generated by** :math:`X` is denoted by :math:`\mathbb F(X)` and is defined as follows: for every algebra :math:`\mathbf A = ⟨A, \dots⟩ ∈ \mathcal V` and every function :math:`f : X → A`, there exists a unique homomorphism :math:`h:\mathbb F(X) → \mathbf A` such that :math:`\forall x ∈ X, h(x) = f(x)`.  We say that :math:`\mathbb F (X)` is *universal for* :math:`\mathcal V`.

    free monoid
      .. todo:: fill in definition

    full embedding
      a :term:`fully faithful functor` that is injective on objects.

    full functor
      A functor :math:`F : \mathcal C → \mathcal D` is called **full** if for all objects :math:`A`, :math:`B` in :math:`\mathcal C`, the map :math:`\mathcal C(A, B) → \mathcal D(F A, F B)` is surjective.
      
      (N.B. A full functor need not be surjective on morphisms.)

    full subcategory
      If there exists a :term:`full embedding` :math:`F : \mathcal C → \mathcal D`, then :math:`\mathcal C` is called a **full subcategory** of :math:`\mathcal D`.

    fully faithful functor
      a functor that is both :term:`full <full functor>` and :term:`faithfull <faithful functor>`.

    function extensionality
      the principle that takes two functions :math:`f : X → Y` and :math:`g : X → Y` to be equal just in case :math:`f(x) = g(x)` holds for all :math:`x : X`.

    functor
      A **functor** :math:`F : \mathcal C → \mathcal D` consists of a function :math:`F_0` that maps objects of :math:`\mathcal C` to objects of :math:`\mathcal D` and a function :math:`F_1` that maps morphisms of :math:`\mathcal C` to morphisms of :math:`\mathcal D` such that :math:`F` preserves (co)domains of morphisms, identities, and compositions.

    functor category
      The **functor category** from :math:`\mathcal C` to :math:`\mathcal D` has functors :math:`F : \mathcal C → \mathcal D` as objects and natural transformations :math:`α : F ⇒ G` as morphisms.

    generalized element
      A morphism :math:`h: X → A` is sometimes called a **generalized element** of :math:`A`. A morphism :math:`f` is mono when it is injective on the generalized elements of its domain.

    global element
      see :term:`point`

    graph morphism
      Let :math:`𝐆_1 =(V_1, E_1)` and :math:`𝐆_2 = (V_2, E_2)` be graphs. We say that a pair of functions :math:`f=(f_v,f_e)` is a **graph morphism** from :math:`𝐆_1` to :math:`𝐆_2` provided :math:`f_v : V_1 → V_2`, :math:`f_e : E_1 → E_2`, and for any edge :math:`e = (v_1,v_2) ∈ E_1` we have that we have :math:`f_e(e) = (f_v(v_1), f_v(v_2))`.

    group
      A **group** :math:`𝐆 = (G, e, \ ^{-1}, ⋆)` consists of a set :math:`G` together with a nullary (constant) operation :math:`e`, a unary (inverse) operation :math:`\ ^{-1}: G → G`, and a binary operation :math:`⋆ : G^2 → G`, such that :math:`(G, e, ⋆)` is a monoid and :math:`x ⋆ x^{-1} = e` for all :math:`x ∈ G`.

    Heyting algebra
      A **Heyting algebra** :math:`⟨L, ∧, ∨, ⊥, ⊤, →⟩` is a bounded :term:`lattice` with least and greatest elements ⊥ and ⊤, and a binary "implication" → that satisfies :math:`∀ a, b, c ∈ L, \ (c ∧ a ≤ b \ ⟺ \ c ≤ a → b)`.  Logically, this says a → b is the weakest proposition for which the modus ponens rule, :math:`\{a → b, a\} ⊢ b`, is sound. The class of Heyting algebras forms a variety that is finitely axiomatizable.
   
    Heyting algebra homomorphism
      a :term:`lattice homomorphism` that also preserves Heyting implications; that is, if :math:`x, x' ∈ X`, then :math:`f(x → x') = f(x) → f(x')`.

    hom set
      Some authors require that :math:`\mathcal C(A,B)` always be a set and call :math:`\mathcal C(A,B)` the **hom set** from :math:`A` to :math:`B`.

    impredicative
      A self-referencing definition is called **impredicative**. A definition is said to be impredicative if it invokes (mentions or quantifies over) the set being defined, or (more commonly) another set which contains the thing being defined.

    inductive set
      A subset :math:`I` of a :term:`preorder` :math:`X` is called **inductive** if :math:`⋁_X D ∈ I` for every directed subset :math:`D ⊆ X` contained in :math:`I`. That is, if :math:`D ⊆ I`, and if every finite subset of :math:`D` has an upper bound in :math:`D`, then :math:`D` as a least upper bound in :math:`I`.

    inductive type
      .. todo:: insert definition

    initial object
      An object :math:`\mathbf{0}` in a category is called an **initial**  (or a **free**) **object** if for every object :math:`A` in the same category there exists a unique morphism :math:`!_A:\mathbf{0}\to A`.
     
    intensional
      An **intensional** definition of a term specifies necessary and sufficient conditions that the term satisfies. In the case of nouns, this is equivalent to specifying all the properties that an object must have in order to be something to which the term refers.

    isomorphism
      A morphism :math:`f: A → B` is called an **isomorphism** if there exists a morphism :math:`g: A → B` such that :math:`g ∘ f= \mathrm{id}_A` and :math:`f ∘ g = \mathrm{id}_B`. We write :math:`f^{-1}` to denote :math:`g` when it exists.

    Kleene closure
      (see :term:`free monoid`)

    lambda calculus
      see https://en.wikipedia.org/wiki/Lambda_calculus

    lattice
      a :term:`poset` whose universe is closed under all *finite* meets and joins is called a lattice.
     
    lattice homomorphism
      a function :math:`f: X → Y` preserving finite meets and joins.

    law of the excluded middle
      This is an axiom of classical logic asserting that for all propositions P either ¬ P or P holds.

    logically equivalent
      Propositions :math:`P` and :math:`Q` are **logically equivalent** provided :math:`P` implies :math:`Q` and :math:`Q` implies :math:`P`.

    Lean
      An :term:`extensional`, :term:`impredicative` :term:`ITP` supporting dependent types and based on :term:`CiC`; url: https://leanprover.github.io/

    locally small category
      A category :math:`\mathcal C` is **locally small** if for every pair :math:`A`, :math:`B` of objects in :math:`\mathcal C` the collection of morphisms from :math:`A` to :math:`B` is a set.

    metaprogram
      a program whose purpose is to modify the behavior of other programs; :term:`proof tactics <proof tactic>` form an important class of metaprograms.

    monoid
      A **monoid** :math:`𝐌 = (M, e, ⋆)` consists of a set :math:`M` with a a **unit** element :math:`e ∈ M` and a binary operation :math:`⋆ : M^2 → M` such that for all :math:`x,y,z ∈ M`, :math:`x ⋆ e = x = e ⋆ x` and :math:`(x ⋆ y) ⋆ z = x ⋆ (y ⋆ z)`.

    monoid homomorphism
      Given monoids :math:`𝐌_1 = (M_1, e_1, ⋆)` and :math:`𝐌_2 = (M_2, e_2, ∗)` we say that a function :math:`f : M_1 → M_2` is a **monoid homomorphism** from :math:`𝐌_1` to :math:`𝐌_2` provided :math:`f` preserves the nullary (identity) and binary operations; that is, :math:`f(e_1) = e_2` and :math:`f (x ⋆ y) = f(x) ∗ f(y)` for all :math:`x, y ∈ M_1`.

    monomorphism
      A morphism :math:`f: A → B` is called a **monomorphism** if for every object :math:`X` and every pair :math:`h, h' : X → A` of morphisms, :math:`f ∘ h = f ∘ h'` implies :math:`h = h'`. When :math:`f` is a monomorphism we often say :math:`f` is "mono" and write :math:`f: A ↣ B`.

    monotone function
      Given posets :math:`⟨A, ≤ᴬ⟩` and :math:`(B, ≤ᴮ)` we say that a function :math:`f: A → B` is **monotone** from :math:`⟨A, ≤ᴬ⟩` to :math:`⟨B, ≤ᴮ ⟩` when for any :math:`x, y ∈ A` we have that :math:`x ≤ᴬ y` implies that :math:`f(x) ≤ᴮ f(y)`.

    natural isomorphism
      An isomorphism in a functor category is referred to as a **natural isomorphism**.
      
    natural transformation
      Given functors :math:`F, G : \mathcal C → \mathcal D`, a **natural transformation** :math:`α : F ⇒ G` is a family :math:`\{α_A : A ∈ \mathcal C_{\mathrm{obj}}\}` of morphisms in :math:`\mathcal D` indexed by the objects of :math:`\mathcal C` such that, for each :math:`A ∈ \mathcal C_{\mathrm{obj}}`, the map :math:`\alpha_A` is a morphism from :math:`FA` to :math:`GA` satisfying the *naturality condition*, :math:`Gf ∘ α_A = α_B ∘ Ff`, for each :math:`f : A → B` in :math:`\mathcal C_{\mathrm{mor}}`. We shall write :math:`α : F ⇒ G : \mathcal C → \mathcal D` to indicate that α is a natural transformation from :math:`F` to :math:`G`, where :math:`F, G : \mathcal C → \mathcal D`.

    naturally isomorphic
      If there is a natural isomorphism between the functors :math:`F` and :math:`G`, then we call :math:`F` and :math:`G` **naturally isomorphic**.

    NuPRL
      An :term:`extensional`, :term:`predicative` :term:`ITP` supporting dependent types and based on Martin Lof type theory; url: http://www.nuprl.org/

    ω-chain
      Let :math:`⟨ X, ≤ ⟩` be a preordered set. An ω-**chain** is an enumerable :term:`chain`.  That is, a chain the elements of which can be indexed by the natural numbers.

    ω-chain cocomplete
      A :term:`preorder` in which joins of all ω-chains exist is called ω-**chain cocomplete**.

    ω-chain cocomplete poset
      an :term:`antisymmetric` :term:`ω-chain cocomplete` :term:`preorder`.

    opposite category
      Given a category :math:`\mathcal C` the **opposite** (or **dual**) **category** :math:`\mathcal C^{\mathrm{op}}` has the same objects as :math:`\mathcal C` and whenever :math:`f: A → B` is a morphism in :math:`\mathcal C` we define :math:`f : B → A` to be a morphism in :math:`\mathcal C^{\mathrm{op}}`.

    parallel morphisms
      Morphisms :math:`f,g : A → B` are called **parallel morphisms** just in case :math:`\mathrm{src} f = \mathrm{src} g` and :math:`\mathrm{tar} f = \mathrm{tar} g`.
 
    partial function
      A **partial function** from :math:`A` to :math:`B` is a total function on some (potentially proper) subset :math:`\operatorname{dom}_f` of :math:`A`.

    partial order
      see :term:`partial order`

    partial ordering
      A **partial ordering** (or "partial order") is an :term:`antisymmetric` :term:`preorder`.
      
    partially ordered set
      A **partially ordered set** (or "poset") :math:`⟨X, R⟩` is a set :math:`X` along with a :term:`partial ordering` :math:`R` defined on :math:`X`.

    pi type
      The **Pi type** :math:`Π(x:A),B x`, also known as the **dependent function type**, generalizes the function type :math:`A → B` and is called a :term:`dependent type` because the codomain :math:`B x` depends on the value :math:`x: A`.

    point
      Given a category with an initial object :math:`\mathbf{1}` and another object :math:`A`, the morphisms with domain :math:`\mathbf{1}` and codomain :math:`A` are called the **points** or **global elements** of :math:`A`.

    polymorphic function
      a function that operates in the "same way" independently of the object parameter.

    poset
      A **poset** :math:`⟨X, ⊑⟩` consists of a set :math:`X` and an :term:`antisymmetric` :term:`preorder` :math:`⊑` on :math:`X`.

    predicative
      The opposite of :term:`impredicative`, *predicative* refers to building stratified (or ramified) theories where quantification over lower levels results in variables of some new type, distinguished from the lower types that the variable ranges over.

    preorder
      A **preorder** on a set :math:`X` is a :term:`reflexive` and :term:`transitive` subset of :math:`X × X`.

    product
      Given two objects :math:`A` and :math:`B` a **product** of :math:`A` and :math:`B` is denoted :math:`A × B` and is defined to be an object with morphisms :math:`p_1 : A \times B → A` and :math:`p_2 : A \times B → B` such that for every object :math:`X` and all morphisms :math:`x_1 : X → A` and :math:`x_2 : X → B` there exists a unique morphism :math:`h : X → A \times B` such that :math:`p_1 \circ h = x_1` and :math:`p_2 \circ h = x_2`.  We usually use :math:`π_1 : A \times B → A` and :math:`π_2 : A \times B → B` to denote the projections and :math:`⟨x_1, x_2⟩` for the unique map :math:`h : X → A \times B`.

    proof asssitant
      see :term:`ITP`

    proof-irrelevant
      .. todo:: insert definition

    proof tactic    
      an automated procedure for constructing and manipulating proof terms.

    proposition extensionality
      .. todo:: insert definition

    pure
      see :term:`computationally pure`

    quotient
      .. todo:: insert definition

    reflexive
      A binary relation :math:`R` on a set :math:`X` is called **reflexive** provided :math:`∀ x ∈ X, \ x \mathrel{R} x`.

    relation
      Given sets :math:`A` and :math:`B`, a **relation** from :math:`A` to :math:`B` is a subset of :math:`A × B`.

    relational product
      Given relations :math:`R : A → B` and :math:`S : B → C` we denote and define the **relational product** (or **composition**) of :math:`S` and :math:`R` to be :math:`S ∘ R = \{(a,c) : (∃ b ∈ B) a \mathrel{R} b ∧ b \mathrel{S} c \}`.

    relational structure
      A relational structure :math:`𝔸 = ⟨A, ℛ⟩` is a set :math:`A` together with a collection :math:`ℛ` of relations on :math:`A`.

    self-dual
      A category :math:`\mathcal C` is called **self-dual** if :math:`\mathcal C^{\mathrm{op}} = \mathcal C`.

    sigma type
      The **Sigma type** :math:`Σ(x:A),B x`, also known as the **dependent pair type**, generalizes the Cartesian product :math:`A × B` by allowing the type :math:`B x` of the second argument of the ordered pair to depend on the value :math:`x` of the first.

    signature
      a pair :math:`σ = (F, ρ)` consisting of a collection :math:`F` of operation symbols and an :term:`arity` function :math:`ρ : F → β` that maps each operation symbol to its :term:`arity`; here, :math:`β` denotes the arity type.

    simplex category
      (see :term:`finite ordinals`)

    small category
      A category is called **small** if both its objects and morphisms form sets.

    source vertex
      Given a directed graph :math:`\mathbf G = (V,E)` and an edge :math:`e=(v_1,v_2) ∈ E`, we refer to :math:`v_1` as the **source vertex** of :math:`e`.

    subalgebra
      Suppose :math:`𝔸 = ⟨A, F^𝔸⟩` is an algebra. If :math:`B ≠ ∅` is a :term:`subuniverse` of 𝔸, and if we let :math:`F^𝔹 = \{ f ↾ B : f ∈ F^𝔸 \}`, then :math:`𝔹 = ⟨ B, F^𝔹 ⟩` is an algebra, called a **subalgebra** of 𝔸.

    subdcpo
      If :math:`X` is a :term:`dcpo` then the subset :math:`A ⊆ X` is a **subdcpo** of :math:`X` if every directed subset :math:`D ⊆ A` satisfies :math:`⋁_X D ∈ A`.

    subuniverse
      Suppose :math:`𝔸 = ⟨A, F^𝔸⟩` is an algebra. If a subset :math:`B ⊆ A` is closed under :math:`F^𝔸`, then we call :math:`B` a **subuniverse** of :math:`𝔸`.

    symmetric
      A binary relation :math:`R` on a set :math:`X` is called **symmetric** provided :math:`∀ x, y ∈ X \ (x \mathrel{R} y \ → \ y \mathrel{R} x)`;

    target vertex
      Given a directed graph :math:`\mathbf G = (V,E)` and an edge :math:`e=(v_1,v_2)\in E`, we refer to :math:`v_2` as the **target vertex** of :math:`e`.

    terminal object
      An object :math:`\mathbf{1}` is called a **terminal** (or **bound**) **object** if for every object :math:`A` in the same category there exists a unique morphism :math:`⟨\ ⟩_A: A → \mathbf{1}`.

    total function
      Given sets :math:`A` and :math:`B`, a **total function** :math:`f` from :math:`A` to :math:`B` is what we typically mean by a “function” from :math:`A` to :math:`B`.

    total order
      A **total order** relation :math:`R` on a set :math:`X` is a partial order on :math:`X` satisfying :math:`∀ x, y ∈ X \ (x ≤ y \ ⋁ \ y ≤ x)`.

    transitive
      A binary relation :math:`R` on a set :math:`X` is called **transitive** provided :math:`∀ x, y, z ∈ X \ (x \mathrel{R} y ∧ y \mathrel{R} z\ → \ x \mathrel{R} z)`.

    type theory
      Intuitionistic **type theory**, which extends the :term:`Curry-Howard correspondence` to predicate logic by introducing :term:`dependent types <dependent type>`. TT internalizes the interpretation of intuitionistic logic proposed by Brouwer, Heyting, and Kolmogorov---the so-called BHK interpretation. The types in TT play a similar role to sets in set theory but *functions definable in TT are always computable*.

    underlying set functor
      The **underlying set functor** of :math:`𝐌` is denoted by :math:`U(𝐌)`, or by :math:`|𝐌|`; it returns the *universe* of the structure :math:`𝐌`, and for each morphism :math:`f`, :math:`Uf` (or :math:`|f|`) is :math:`f` viewed simply as a function on sets.

    universal image functor
      the functor :math:`∀ f : P(A) → P(B)` defined by :math:`∀ f (X) = \{y ∈ B : f^{-1}(\{y\}) \subseteq  X\}`, for :math:`X ∈ P(A)`.

    universal mapping property
      Let :math:`η_A : A → |𝔸^*|` be the function that maps :math:`a ∈ A` to the "one-letter word" :math:`a ∈ A^*`. The functors :math:`K (= \ ^∗)` and :math:`U (= |\ |)` are related by the **universal mapping property** of monoids, which says that for every monoid :math:`𝐌` and every function :math:`f : A → U 𝐌` there exists a unique morphism :math:`f̂ : KA → 𝐌` such that :math:`f = f̂ ∘ η`.

    universal property
      The unique morphism property of :term:`initial object` is what we refer to as a **universal property,** and we say that the free object in a category :math:`\mathcal C` is *universal for* all other objects in :math:`\mathcal C`.

    universe
      .. todo:: insert definition

    universes
      see :term:`universe`

--------------------------------

Categories
----------

.. glossary::

    1
      The only object is :math:`0`; the only morphism is the identity :math:`\operatorname{id}_0: 0 ↦ 0`.

    2
      There are two objects, :math:`0` and :math:`1`; there is one nonidentity morphism :math:`f: 0 ↦ 1`.

    3
      There are three objects, :math:`0`, :math:`1`, and :math:`2`; there are three nonidentity morphisms: :math:`f: 0 ↦ 1`, :math:`g: 1 ↦ 2`, and :math:`h: 0 ↦ 2`.

    Cat 
      the (large) category of small categories; it has small categories as objects and functors :math:`F : \mathcal C → \mathcal D` as morphisms.

    Set
      the category whose objects are the sets and whose morphisms are the functions on sets.

    Grph
      the category whose objects are the (directed) graphs; the morphisms are the :math:`graph morphisms <graph morphism>`.

    Mon
      the category whose objects are the :term:`monoids <monoid>` and whose morphisms are the :term:`monoid homomorphisms <monoid homomorphism>`.

    Par
      the category whose objects are sets and whose morphisms are the :term:`partial functions <partial function>`.

    Rel
      the category whose objects are sets and whose morphisms are the :term:`relations <relation>` on sets.

    Fin
      a category whose objects are the finite sets; the morphisms are the functions on finite sets.

    Pos
      a category whose objects are the :term:`posets <poset>`; the morphisms are the :term:`monotone functions <monotone function>`.

    Lat
      a category whose objects are the :term:`lattices <lattice>`; the morphisms are the :term:`lattice homomorphisms <lattice homomorphism>`.

    CLat
      a category whose objects are the :term:`complete lattices <complete lattice>`; the morphisms are the :term:`complete lattice homomorphisms <complete lattice homomorphism>`.

    BLat
      a category whose objects are the :term:`Boolean lattices <Boolean algebra>`; the morphisms are the :term:`Boolean lattice homomorphisms <Boolean algebra homomorphism>`.

    HLat
      a category whose objects are the :term:`Heyting lattices <Heyting algebra>`; the morphisms are the :term:`Heyting lattice homomorphisms <Heyting algebra homomorphism>`

    ACLat
      a category whose objects are :term:`algebraic <algebraic lattice>`, :term:`complete lattices <complete lattice>`; the morphisms are the :term:`complete lattice homomorphisms <complete lattice homomorphism>`.

    Arrow
      Given a category :math:`\mathcal C`, the **arrow category** :math:`\mathcal C^→` has as objects the triples :math:`(A, B, f)` satisfying :math:`A, B ∈  \mathcal C_{\mathrm{obj}}` and :math:`f ∈ \mathcal C(A,B)`, and as morphisms the pairs :math:`(h_1, h_2) : (A, B, f) → (C, D, g)` such that :math:`h_1 ∈ \mathcal C(A,C)`, :math:`h_2 ∈ \mathcal C(B, D)` and :math:`g \circ h_1 = h_2 \circ f`.

    Slice
      Given a category :math:`\mathcal C` and an object :math:`C ∈ \mathcal C_{\mathrm{obj}} `, the **slice category** :math:`\mathcal C/C` has objects the pairs :math:`(A, f)` such that :math:`f ∈ \mathcal C(A, C)`, and morphisms :math:`h : (A, f) → (B, g)` such that :math:`h ∈ \mathcal C(A, B)` and :math:`g ∘ h = f`.

    Comma
      Given categories :math:`\mathcal C` and :math:`\mathcal D` and functors :math:`F : \mathcal C → \mathcal D` and :math:`G : \mathcal C' → \mathcal D` (with a common :term:`codomain`), the **comma category** is denoted by :math:`(F ↓ G)` and has objects the triples :math:`(A, f, A')`, where :math:`A ∈ \mathcal C_{\mathrm{obj}}`, :math:`A' ∈ \mathcal C'_{\mathrm{obj}}`, and :math:`f ∈ \mathcal D(FA, GA')`, and morphisms the pairs :math:`(φ, ψ) : (A, f, A') → (B, g, B')`, where :math:`φ ∈ \mathcal C(A, B)`, :math:`ψ ∈ \mathcal C'(A',B')` and :math:`G ψ ∘ f = g ∘ F φ`.

-------------------------------

.. _symbols:

Symbols
--------

The list below shows what to type in order to produce each of the special unicode symbols we use.

  +---------+--------------------------------------------------+
  | 𝔸, 𝔹, ℂ | ``\BbbA``, ``\BbbB``, ``\BbbC``, etc.            |
  +---------+--------------------------------------------------+
  | ℕ, ℤ    | ``\N``, ``\In`` (or ``\nat``, ``\Z``)            |
  +---------+--------------------------------------------------+
  | α, β, γ | ``\a`` (or ``\alpha``), ``\b``, ``\g``, etc.     |
  +---------+--------------------------------------------------+
  | λ       | ``\lamda`` (or ``\Gl`` or ``\la`` or ``\fun``)   |
  +---------+--------------------------------------------------+
  | Λ       | ``\L`` (or ``\GL`` or ``\Lambda``)               |
  +---------+--------------------------------------------------+
  | ι       | ``\iota``                                        |
  +---------+--------------------------------------------------+
  | æ, Æ    | ``\ae``, ``\AE``                                 |
  +---------+--------------------------------------------------+
  | œ, Œ    | ``\oe``, ``\OE``                                 |
  +---------+--------------------------------------------------+
  | ě, ö    | ``\ve``, ``\"o``                                 |
  +---------+--------------------------------------------------+
  | h₁, h₂  | ``h\1``, ``h\2``, etc.   (or ``h\_1``)           | 
  +---------+--------------------------------------------------+
  | ∩       | ``\i``  (or ``\cap`` or ``\intersection``)       |
  +---------+--------------------------------------------------+
  | ⋂       | ``\I`` (or ``\bigcap`` or ``\Intersection``)     |
  +---------+--------------------------------------------------+
  | ∪       | ``\un`` (or ``cup`` or ``\union``)               |
  +---------+--------------------------------------------------+
  | ⋃       | ``\Un`` (or ``\bigcup`` or ``\Union``)           |
  +---------+--------------------------------------------------+
  | ∧       | ``\an`` (or ``\and`` or ``\wedge``)              |
  +---------+--------------------------------------------------+
  | ⋀       | ``\And`` (or ``\bigwedge``)                      |
  +---------+--------------------------------------------------+
  | ∨       | ``\vee`` (or ``\or``)                            |
  +---------+--------------------------------------------------+
  | ⋁       | ``\Or`` (or ``\bigvee``)                         |
  +---------+--------------------------------------------------+
  | ¬       | ``\n`` (or ``\neg``)                             |
  +---------+--------------------------------------------------+
  | ∘       | ``\o`` (or ``\circ``)                            |
  +---------+--------------------------------------------------+
  | ×       | ``\x`` (or ``\times``)                           |
  +---------+--------------------------------------------------+
  | ∈, ∋    | ``\in``, ``\ni``                                 |
  +---------+--------------------------------------------------+
  | ∉, ∌    | ``\inn``, ``\nin`` (or ``\notin``, ``\nni``)     |
  +---------+--------------------------------------------------+
  | ∃       | ``\ex`` (or ``\exists``)                         |
  +---------+--------------------------------------------------+
  | ∀       | ``\al`` (or ``\all`` or ``\forall``)             |
  +---------+--------------------------------------------------+
  | ⋆, ∗    | ``\star``, ``\ast``                              |
  +---------+--------------------------------------------------+
  | ≈, ∼    | ``\~~`` (or ``\approx``), ``\sim``               |
  +---------+--------------------------------------------------+
  | ≡, ≅    | ``\equiv``, ``\cong``                            |
  +---------+--------------------------------------------------+
  | ≤, ≥    | ``\leq``, ``\geq``                               |
  +---------+--------------------------------------------------+
  | ⟨, ⟩    | ``\<``, ``\>`` (or ``\langle``, ``\rangle``)     |
  +---------+--------------------------------------------------+
  | ‹, ›    | ``\f<``, ``\f>`` (or ``\f``, ``\fr``)            |
  +---------+--------------------------------------------------+
  | ≪, ≫    | ``\ll``, ``\gg``                                 |
  +---------+--------------------------------------------------+
  | ◀ ▸     | ``\T``, ``\t``                                   |
  +---------+--------------------------------------------------+
  | ←, →    | ``\l``, ``\to`` (or ``->`` or ``\r``)            |
  +---------+--------------------------------------------------+
  | ⟶       | ``\hom`` (or ``-->``)                            |
  +---------+--------------------------------------------------+
  | ↑, ↓    | ``\u``, ``\d``                                   |
  +---------+--------------------------------------------------+
  | ⟹       | ``==>`` (or ``\nattrans``)                       |
  +---------+--------------------------------------------------+
  | ⟺       | ``\iff``                                         |
  +---------+--------------------------------------------------+
  | ↦       | ``\mapsto`` (or ``\r-|``)                        |
  +---------+--------------------------------------------------+
  | ↠       | ``\rr`` or ``\twoheadrightarrow``                |
  +---------+--------------------------------------------------+
  | ↣       | ``\pr`` or ``\r->``                              |
  +---------+--------------------------------------------------+
  | ∅       | ``\emp`` (or ``\empty`` or ``\emptyset``)        |
  +---------+--------------------------------------------------+


