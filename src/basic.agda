--File: basic.agda
--Author: William DeMeo
--Date: 24 Dec 2019
--Updated: 15 Feb 2020

{-# OPTIONS --without-K --exact-split #-}

-- `--without-K` disables Streicher's K axiom (see "NOTES on Axiom K" below).
-- `--exact-split` makes Agda to only accept definitions with the equality
-- sign "=" that behave like so-called judgmental or definitional equalities.

module basic where

open import preliminaries

open import Level renaming (suc to lsuc ; zero to lzero)
open import Data.Product using (_√ó_; Œ£; _,_; ‚àÉ; Œ£-syntax; ‚àÉ-syntax)
open import Agda.Builtin.Nat public
  renaming ( Nat to ‚Ñï; _-_ to _‚à∏_; zero to nzero; suc to succ )
open import Relation.Unary hiding (_‚äÜ_;_‚áí_)
open import Relation.Binary hiding (Total;_‚áí_;Setoid) 
import Relation.Binary.EqReasoning as EqR
open import Relation.Binary.PropositionalEquality as Eq
  hiding ( Reveal_¬∑_is_;[_];isEquivalence;‚àÄ-extensionality)
open Eq using (_‚â°_; sym)
open Eq.‚â°-Reasoning
open import Function
open import Function.Equality renaming (_‚àò_ to _‚àò‚Çõ_) hiding (setoid;cong)

--------------------------------
-- A data type for SIGNATURES
--------------------------------

record signature : Set‚ÇÅ where 
  field
    _Œ© : Set         -- The "√ºberuniverse" (all universes are subsets of Œ©)
    _ùìï : Set        -- operation symbols (type ùìï with `\MCF`)
    _œÅ : _ùìï -> ‚Ñï   -- Each operation symbol has an arity.
                     -- (for now, we use natural number arities)

--If `S : signature` is a signature, then `S Œ©` denotes the √ºberuniverse of `S`.
--and `S ùìï` denotes the operation symbols of `S`.
--If `ùì∏ : œÉ ùìï`  is an operation symbol, then `S œÅ ùì∏` is the arity of `ùì∏`.

data op-monoid : Set where
  e : op-monoid
  ¬∑ : op-monoid
  
sig-monoid : signature 
sig-monoid =
  record
    { _Œ© = ‚Ñï
    ; _ùìï = op-monoid
    ; _œÅ = Œª {e -> 0; ¬∑ -> 2}
    }

-- vvvvvvvvvvvvvvvvvvvvvvv BEGIN GGP Section 1 vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
-- Occasionally, we experiment with datatypes that are more similar to the
-- datatypes defined by Gunther, Gadea, Pigano, who implemented the rudiments
-- of (multisorted) universal algebra in 2017. We will mark datatypes that are
-- modeled on the latter with the acronym GGP.
--
-- Here are our some examples of such "GGP types.
-- (see p. 149 of [1])
record Signature-GGP : Set‚ÇÅ where
  field
    sorts : Set
    ops  : List sorts √ó sorts -> Set

data monoid-op-GGP : List ‚ä§ √ó ‚ä§ -> Set where
  e : monoid-op-GGP ([] , tt)
  ¬∑ : monoid-op-GGP ( tt :: (tt :: []) , tt )

monoid-sig-GGP : Signature-GGP
monoid-sig-GGP = record { sorts = ‚ä§ ; ops = monoid-op-GGP }

data actMon‚Çõ-GGP : Set where
  mon : actMon‚Çõ-GGP
  set : actMon‚Çõ-GGP

open actMon‚Çõ-GGP

data actMon‚Çí-GGP : (List actMon‚Çõ-GGP) √ó actMon‚Çõ-GGP -> Set where
  e : actMon‚Çí-GGP ([] , mon)
  * : actMon‚Çí-GGP ( mon :: [] , mon )
  ¬∑ : actMon‚Çí-GGP ( (mon :: (set :: [])) , set )

actMon-sig-GGP : Signature-GGP
actMon-sig-GGP = record { sorts = actMon‚Çõ-GGP ; ops = actMon‚Çí-GGP }

-- ^^^^^^^^^^^^^^^^^^^^^  END GGP Section 1 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

-----------------------------
--A data type for OPERATIONS
-----------------------------
data operation (Œ≥ Œ± : Set) : Set where
  o : ((Œ≥ -> Œ±) -> Œ±) -> operation Œ≥ Œ±
-- Here, Œ≥ is an "arity type" and Œ± is a "universe type".
-- Example: the i-th Œ≥-ary proj op on Œ± is implemented as,
œÄ : ‚àÄ {Œ≥ Œ± : Set} -> (i : Œ≥) -> operation Œ≥ Œ±
œÄ i =  o Œª x -> x i

-----------------------------
--Data types for ALGEBRAS
-----------------------------
open signature
--Here are 3 flavors of algebras.

--1. algebra (with carrier of type Set)
record algebra (S : signature) : Set‚ÇÅ where
  field 
    ‚ü¶_‚üß·µ§ : Set
    _‚ü¶_‚üß : (ùì∏ : S ùìï) -> (‚Ñï -> ‚ü¶_‚üß·µ§) -> ‚ü¶_‚üß·µ§

-- 2. algebra (with carrier a predicate on Œ©)
record algebraP (S : signature) : Set‚ÇÅ where
  field
    ‚ü¶_‚üß‚Çö : Pred (S Œ©) lzero
    _‚ü¶_‚üß‚Çí : (ùì∏ : S ùìï) -> (‚Ñï -> (S Œ©)) -> (S Œ©) -- I don't like this type signature.
    cl : ‚àÄ (ùì∏ : S ùìï) (args : ‚Ñï -> (S Œ©))      --  (it's very imprecise)   :'(
         -> (‚àÄ(i : ‚Ñï) -> (args i) ‚àà ‚ü¶_‚üß‚Çö)
        ------------------------------------------------
         -> _‚ü¶_‚üß‚Çí ùì∏ args ‚àà ‚ü¶_‚üß‚Çö

--Using a slightly simpler Setoid type than that found in Relation.Binary of Agda stdlib.
open Setoid  --see: preliminaries.agda

-- 3. algebra (with carrier a Setoid)
record Algebra (S : signature) : Set‚ÇÅ where
  field
    ‚ü¶_‚üß·µ£ : Setoid
    _‚ü¶_‚üß : (ùì∏ : S ùìï) -> (‚Ñï -> Carrier ‚ü¶_‚üß·µ£) ->  Carrier ‚ü¶_‚üß·µ£


-- vvvvvvvvvvvvvvvvvvvvvvv   BEGIN GGP Section 2.   vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
--
-- ^^^^^^^^^^^^^^^^^^^^^^^^  END GGP Section 2. ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

----------------------------------
--A data type for HOMOMORPHISMS
----------------------------------

open algebra

record hom {S : signature}
  (A : algebra S) (B : algebra S) : Set where

  field

    -- The map:
    ‚ü¶_‚üß‚Çï : ‚ü¶ A ‚üß·µ§ -> ‚ü¶ B ‚üß·µ§ 

    -- The property the map must have to be a hom:
    homo : ‚àÄ {ùì∏ : S ùìï} (args : ‚Ñï -> ‚ü¶ A ‚üß·µ§)
           ->  ‚ü¶_‚üß‚Çï ((A ‚ü¶ ùì∏ ‚üß) args) ‚â° (B ‚ü¶ ùì∏ ‚üß) (‚ü¶_‚üß‚Çï ‚àò args)

--------------------------------------------------------------
-- analogue for predicate-based algebras

open algebraP

record homP {S : signature}
  (A : algebraP S) (B : algebraP S) : Set where

  field

    -- The map:
    hmap : S Œ© -> S Œ©  -- <-- type is not very precise :'(

    -- The property the map must have to be a hom:
    homoP : ‚àÄ {ùì∏ : S ùìï} (args : ‚Ñï -> (S Œ©))
           ->  hmap ((A ‚ü¶ ùì∏ ‚üß‚Çí) args) ‚â° (B ‚ü¶ ùì∏ ‚üß‚Çí) (hmap ‚àò args)

--------------------------------------------------------------
-- analogue for setoid-based algebras

open Algebra

record Hom {S : signature}
  (A : Algebra S) (B : Algebra S) : Set where

  field

    -- The map:
    ‚ü¶_‚üß‚Çï : Carrier ‚ü¶ A ‚üß·µ£ -> Carrier ‚ü¶ B ‚üß·µ£ 

    -- The property the map must have to be a hom:
    Homo : ‚àÄ {ùì∏ : S ùìï} (args : ‚Ñï -> Carrier ‚ü¶ A ‚üß·µ£)
      ->   (‚ü¶ B ‚üß·µ£ ‚âà  ‚ü¶ (A ‚ü¶ ùì∏ ‚üß) args ‚üß‚Çï)  ( (B ‚ü¶ ùì∏ ‚üß) (‚ü¶_‚üß‚Çï ‚àò args) )


-- vvvvvvvvvvvvvvvvvvvvvvv   BEGIN GGP Section 3.   vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
--
-- ^^^^^^^^^^^^^^^^^^^^^^^^  END GGP Section 3. ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


---------------------
--ISOMORPHISM
---------------------

open hom

_‚âÖ·µ§_ :  {S : signature}
       (A : algebra S) -> (B : algebra S) -> Set _

A ‚âÖ·µ§ B = (‚àÉ f : hom A B)
  ->    (‚àÉ g : hom B A)
  ->    ( (‚ü¶ g ‚üß‚Çï ‚àò ‚ü¶ f ‚üß‚Çï) ‚â° identity _ ) -- ‚ü¶ A ‚üß·µ§
      ‚ãÄ ( (‚ü¶ f ‚üß‚Çï ‚àò ‚ü¶ g ‚üß‚Çï) ‚â° identity _ ) -- ‚ü¶ B ‚üß·µ§ 

--------------------------------------------------------------
-- analogue for predicate-based algebras

open homP

_‚âÖ‚Çö_ :  {S : signature}
       (A : algebraP S) -> (B : algebraP S) -> Set _

A ‚âÖ‚Çö B = (‚àÉ f : homP A B)
  ->    (‚àÉ g : homP B A)
  ->    ( (hmap g) ‚àò (hmap f) ‚â° identity _ )
      ‚ãÄ ( (hmap f) ‚àò (hmap g) ‚â° identity _ )

--------------------------------------------------------------
-- analogue for setoid-based algebras

open Hom

_‚âÖ‚Çõ_ : {S : signature}
      (A : Algebra S) -> (B : Algebra S) -> Set _

A ‚âÖ‚Çõ B = (‚àÉ f : Hom A B)
  ->    (‚àÉ g : Hom B A)
  ->    ( (‚ü¶ g ‚üß‚Çï ‚àò ‚ü¶ f ‚üß‚Çï) ‚â° identity _ ) -- (Carrier ‚ü¶ A ‚üß·µ£) )
      ‚ãÄ ( (‚ü¶ f ‚üß‚Çï ‚àò ‚ü¶ g ‚üß‚Çï) ‚â° identity _ ) -- (Carrier ‚ü¶ B ‚üß·µ£)  )


lift-rel : {‚Ñì : Level} {Idx : Set} {X : Set}
  ->         Rel X ‚Ñì
          -----------------
  ->       Rel (Idx -> X) ‚Ñì
lift-rel R = Œª args‚ÇÅ args‚ÇÇ -> ‚àÄ i -> R (args‚ÇÅ i) (args‚ÇÇ i)

compatible-fun : ‚àÄ{Œ± Œ≥ : Set}
  ->   ((Œ≥ -> Œ±) -> Œ±)  ->  (Rel Œ± lzero)  ->  Set
compatible-fun f ùìª = (lift-rel ùìª) =[ f ]‚áí ùìª

-- relation compatible with an operation
compatible : ‚àÄ {S : signature}
  ->  (A : algebra S)  ->   S ùìï  
  ->   Rel ‚ü¶ A ‚üß·µ§ lzero  ->  Set _
compatible A ùì∏ ùìª = (lift-rel ùìª) =[ (A ‚ü¶ ùì∏ ‚üß) ]‚áí ùìª

-- relation compatible with all operations of an algebra
compatible-alg : ‚àÄ {S : signature}
  ->  (A : algebra S) -> Rel ‚ü¶ A ‚üß·µ§ lzero -> Set _
compatible-alg {S} A ùìª = ‚àÄ ùì∏ -> compatible A ùì∏ ùìª


record con {S : signature} (A : algebra S) : Set‚ÇÅ where
  field
    ‚ü¶_‚üß·µ£ : Rel ‚ü¶ A ‚üß·µ§ lzero
    equiv : IsEquivalence ‚ü¶_‚üß·µ£
    compat : compatible-alg A ‚ü¶_‚üß·µ£

-----------------------------------------------------------
-- Analogues for predicate-based algebras.
compatibleP : ‚àÄ {S : signature}
  ->  (A : algebraP S)  ->   S ùìï  
  ->   Rel (S Œ©) lzero  ->  Set _
compatibleP A ùì∏ ùìª = (lift-rel ùìª) =[ (A ‚ü¶ ùì∏ ‚üß‚Çí) ]‚áí ùìª

compatible-algP : ‚àÄ {S : signature}
  ->  (A : algebraP S) -> Rel (S Œ©) lzero -> Set _
compatible-algP {S} A ùìª = ‚àÄ ùì∏ -> compatibleP A ùì∏ ùìª

record conP {S : signature} (A : algebraP S) : Set‚ÇÅ where
  field
    ùì° : Rel (S Œ©) lzero     -- type ùì° as `\MCR`
    equivP : IsEquivalence ùì°
    compatP : compatible-algP A ùì°

----------------------------------------------------------
-- Analogues for setoid-based algebras

Compatible : ‚àÄ {S : signature}
  ->            S ùìï  ->  (A : Algebra S)
  ->            Rel (Carrier ‚ü¶ A ‚üß·µ£) lzero -> Set _
Compatible ùì∏ A ùìª = (lift-rel ùìª) =[ (A ‚ü¶ ùì∏ ‚üß) ]‚áí ùìª

Compatible-Alg : ‚àÄ {S : signature}
  -> (A : Algebra S) -> Rel (Carrier ‚ü¶ A ‚üß·µ£) lzero -> Set _
Compatible-Alg {S} A ùìª = ‚àÄ{ùì∏ : S ùìï} -> Compatible ùì∏ A ùìª


record Con {S : signature} (A : Algebra S) : Set‚ÇÅ where
  field
    ‚ü¶_‚üß·µ£ : Rel (Carrier ‚ü¶ A ‚üß·µ£) lzero
    equiv : IsEquivalence ‚ü¶_‚üß·µ£
    compat : Compatible-Alg A ‚ü¶_‚üß·µ£

open Con


Quotient : {S : signature} (A : Algebra S) -> (Œ∏ : Con A) -> Algebra S

Quotient A Œ∏ =
  record {

    ‚ü¶_‚üß·µ£ = record {
            Carrier = Carrier ‚ü¶ A ‚üß·µ£ ;
            _‚âà_ = ‚ü¶ Œ∏ ‚üß·µ£;
            isEquivalence = equiv Œ∏ } ;

    _‚ü¶_‚üß = A ‚ü¶_‚üß }


-- vvvvvvvvvvvvvvvvvvvvvvv   BEGIN GGP Section 4.   vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
--
-- ^^^^^^^^^^^^^^^^^^^^^^^^  END GGP Section 4. ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


------------------------------------------------------------------
-------------    MISC EXPERIMENTAL STUFF (not used)  -------------

-- compatible-fun : ‚àÄ{S : signature}{X : Set} --{n : ‚Ñï}
--   -> (A : algebra S) -> ((X -> ‚ü¶ A ‚üß·µ§) -> ‚ü¶ A ‚üß·µ§)  
--   ->  (Rel ‚ü¶ A ‚üß·µ§ zero)  ->  Set
-- compatible-fun A f ùìª = compatible-func f ùìª

-----------------------------
--Nullary symbols (contants)
-----------------------------
-- open signature
-- const : ‚àÄ {S : signature} -> (ùì∏ : ‚ü® S ‚ü©‚Çí) -> Set _
-- const {S} ùì∏ = ‚ü® S ‚ü©‚Çê ùì∏ ‚â° nzero
-- constants : (S : signature) -> Pred ‚ü® S ‚ü©‚Çí _
-- constants S ùì∏ = (const {S} ùì∏)

-- OLD VERSION
-- IsCompatible : {S : signature}
--                (A : Algebra S) -> Rel (Carrier ‚ü¶ A ‚üß·µ£) zero -> Set _

-- IsCompatible {S} A Œ∏ = ‚àÄ{ùì∏ : ‚ü® S ‚ü©‚Çí}
--   ->               (arg1 arg2 : Fin (‚ü® S ‚ü©‚Çê ùì∏) -> Carrier ‚ü¶ A ‚üß·µ£) 
--   ->               ( ‚àÄ i -> Œ∏ (arg1 i) (arg2 i) )
--                  -------------------------------------------
--   ->               Œ∏ ((A ‚ü¶ ùì∏ ‚üß) arg1) ((A ‚ü¶ ùì∏ ‚üß) arg2)


--------------------------------------------------------------------------------

-- Here is the Agda key-binding technique that was briefly mentioned.

---------------------------------------
-- Writing definitions interactively
--------------------------------------

-- Add a question mark and then type C-c C-l to create a new "hole."

-- Type C-c C-f to move into the next unfilled hole.

-- Type C-c C-c (from inside the hole) to be prompted for what type should
-- fill the given hole.

-- Type m to split on the variable in the hole.

-- Type C-c C-f to move into the next hole.

-- Type C-c C-, to get the type required in the current hole.

-- Enter an appropriate object in the hole and type C-c C-space to remove the hole.

{- SUMMARY
   ? then C-c C-l creates hole
   C-c C-f moves to next hole
   C-c C-c prompts for what goes in hole
   m splits on variable in hole
   C-c C-, in hole gets type required
   C-c C-space removes hole
-}

-- Induction. For a proof by structural induction over a recursively defined
-- data type, make a hole, enter the hole, and type C-c C-c; when prompted,
-- enter the symbol over which you wish to induct.


-- References:
--
-- [1] Gunther, Gadea, and Pagano, "Formalization of Universal Algebra in Agda",
--     Elec. Notes in Th. Comp. Sci., 2018.
--     URL = {http://www.sciencedirect.com/science/article/pii/S1571066118300768},
