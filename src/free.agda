--File: free.agda
--Author: William DeMeo
--Date: 25 Dec 2019
--Updated: 10 Jan 2020
--Note: This was used for the second part of my talk at JMM Special Session.

{-# OPTIONS --without-K --exact-split #-}

open import Level
open import basic 
open signature

module free {S : signature}{X : Set} where

open import preliminaries  using (_‚äé_ ; ‚àÄ-extensionality; ‚àë)
open import Function using (_‚àò_)
open import Relation.Unary
open import Relation.Binary hiding (Total)
import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; refl; cong; sym; isEquivalence)
open Eq.‚â°-Reasoning
import Relation.Binary.EqReasoning as EqR

--------------------------------------------------------------

----------------------------
-- TERMS in the signature S
----------------------------

data Term : Set where
  generator : X -> Term
  node : ‚àÄ (ùì∏ : ‚ü® S ‚ü©‚Çí) -> (Fin (‚ü® S ‚ü©‚Çê ùì∏) -> Term) -> Term


----------------------------------
-- TERM ALGEBRA (for signature S)
----------------------------------

open algebra
open Term


free : algebra S

free = record { ‚ü¶_‚üß·µ§ = Term ; _‚ü¶_‚üß = node }

--------------------------------------------------------------
-- analogue for setoid-based algebras

open Algebra

Free : Algebra S
Free = record {
         ‚ü¶_‚üß·µ£ = record {
                 Carrier = Term ;
                 _‚âà_ = _‚â°_ ;
                 isEquivalence = isEquivalence
                 } ;
         _‚ü¶_‚üß = node  }

-------------------------------------
-- The UNIVERSAL PROPERTY of free
-- 1. every h : X -> ‚ü¶ A ‚üß·µ§  lifts to a hom from free to A.
-- 2. the induced hom is unique.

-- PROOF.
-- 1.a. Every map  (X -> A)  "lifts".
free-lift : {A : algebra  S}(h : X -> ‚ü¶ A ‚üß·µ§) -> ‚ü¶ free ‚üß·µ§ -> ‚ü¶ A ‚üß·µ§
free-lift h (generator x) = h x
free-lift {A} h (node ùì∏ args) = (A ‚ü¶ ùì∏ ‚üß) Œª{i -> free-lift {A} h (args i)}
-- 1.b. The lift is a hom.
open hom
lift-hom : {A : algebra S} (h : X -> ‚ü¶ A ‚üß·µ§) -> hom free A
lift-hom {A} h = record { ‚ü¶_‚üß‚Çï = free-lift {A} h; homo = Œª args ‚Üí refl }

-- 2. The lift to  (free -> A)  is unique.
--    (We need EXTENSIONALITY for this (imported from util.agda))
free-unique : {A : algebra S}
  ->    ( f g : hom free A )
  ->    ( ‚àÄ x  ->  ‚ü¶ f ‚üß‚Çï (generator x) ‚â° ‚ü¶ g ‚üß‚Çï (generator x) )
  ->    (t : Term)
       ---------------------------
  ->    ‚ü¶ f ‚üß‚Çï t ‚â° ‚ü¶ g ‚üß‚Çï t

free-unique {A} f g p (generator x) = p x
free-unique {A} f g p (node ùì∏ args) =
   begin
     ‚ü¶ f ‚üß‚Çï (node ùì∏ args)
   ‚â°‚ü® homo f args  ‚ü©
     (A ‚ü¶ ùì∏ ‚üß) (Œª i -> ‚ü¶ f ‚üß‚Çï (args i))
   ‚â°‚ü® cong ((A ‚ü¶_‚üß)_)
      ( ‚àÄ-extensionality Œª i -> free-unique f g p (args i) ) ‚ü©
     (A ‚ü¶ ùì∏ ‚üß) (Œª i -> ‚ü¶ g ‚üß‚Çï (args i))
   ‚â°‚ü® sym (homo g args) ‚ü©
     ‚ü¶ g ‚üß‚Çï (node ùì∏ args)
   ‚àé

----------------------------------------
-- setoid-based analogues

open Setoid 
Free-Lift : {A : Algebra  S}(h : X -> Carrier ‚ü¶ A ‚üß·µ£) -> Carrier ‚ü¶ Free ‚üß·µ£ -> Carrier ‚ü¶ A ‚üß·µ£
Free-Lift h (generator x) = h x
Free-Lift {A} h (node ùì∏ args) = (A ‚ü¶ ùì∏ ‚üß) Œª i -> Free-Lift {A} h (args i)

----------------------------------------

-- 1.b. The lift is a hom.

open Hom

Lift-Hom : {A : Algebra S} (h : X -> Carrier ‚ü¶ A ‚üß·µ£) -> Hom Free A
Lift-Hom {A} h = record { ‚ü¶_‚üß‚Çï = Free-Lift {A} h; Homo = Œª args ‚Üí Setoid.refl ‚ü¶ A ‚üß·µ£ }

--------------------------
--INTERPRETATION OF TERMS
--------------------------

--(cf Def 4.31 of Bergman)

--Let t ‚àà Term be a term, A an algebra, in the signature S.
--We define an n-ary operation, denoted (t ÃÇ A), on A by recursion on
--the structure of t, as follows:

-- (1) if t is the variable x ‚àà X and tup : X -> ‚ü¶ A ‚üß·µ§ is a tuple of elements of A,
--     then we define (t ÃÇ A) tup = tup x.

-- (2) if t = ùì∏ args, where ùì∏ ‚àà ‚ü® S ‚ü©‚Çí is an operation symbol (of arity ‚ü® S ‚ü©‚Çê ùì∏),
--        args : ‚ü® S ‚ü©‚Çê ùì∏ -> Term is an (‚ü® S ‚ü©‚Çê ùì∏)-tuple of terms, and
--        tup : X -> ‚ü¶ A ‚üß·µ§ is a tuple of elements of A, then we define

--     (t ÃÇ A) tup = ((ùì∏ args) ÃÇ A) tup
--                  = (A ‚ü¶ ùì∏ ‚üß) Œª{ i -> ((args i) ÃÇ A) tup }

-- Here's the Agda implementation of the foregoing definition.

_Ãá_ : Term -> (A : algebra S) -> (X -> ‚ü¶ A ‚üß·µ§) -> ‚ü¶ A ‚üß·µ§
((generator x) Ãá A) tup = tup x
((node ùì∏ args) Ãá A) tup = (A ‚ü¶ ùì∏ ‚üß) Œª{i -> (args i Ãá A) tup }

-- Recall, Theorem 4.32 of Bergman.
-- Let A and B be algebras of type S. Then the following hold:
--
--   (1) For every n-ary term t and homomorphism g: A ‚Äî> B, 
--       g(t·¥¨(a‚ÇÅ,...,a‚Çô)) = t·¥Æ(g(a‚ÇÅ),...,g(a‚Çô)).
--   (2) For every term t ‚àà T(X) and every Œ∏ ‚àà Con(A), 
--       a Œ∏ b => t(a) Œ∏ t(b).
--   (3) For every subset Y of A,
--       Sg(Y) = { t(a‚ÇÅ,...,a‚Çô) : t ‚àà T(X‚Çô), n < œâ, and a·µ¢ ‚àà Y, for i ‚â§ n}.
--
-- PROOF of (1)
--
-- (1) homomorphisms commute with terms
--
comm-hom-term : {A B : algebra S}
  ->    (g : hom A B) -> (t : Term)
  ->    (tup : X -> ‚ü¶ A ‚üß·µ§)
       ------------------------------
  ->     ‚ü¶ g ‚üß‚Çï ((t Ãá A) tup) ‚â° (t Ãá B) (‚ü¶ g ‚üß‚Çï ‚àò tup)
--
comm-hom-term g (generator x) tup = Eq.refl
comm-hom-term {A} {B} g (node ùì∏ args) tup =  
-- Goal: ‚ü¶ g ‚üß‚Çï ((A ‚ü¶ ùì∏ ‚üß) (Œª { i ‚Üí (args i Ãá A) tup })) ‚â°
--       (B ‚ü¶ ùì∏ ‚üß) (Œª { i ‚Üí (args i Ãá B) ((Œª {.x} ‚Üí ‚ü¶ g ‚üß‚Çï) ‚àò tup) })
  begin
    ‚ü¶ g ‚üß‚Çï ((A ‚ü¶ ùì∏ ‚üß) (Œª { i ‚Üí (args i Ãá A) tup }))
  ‚â°‚ü® homo g ( Œª i ‚Üí (args i Ãá A) tup )‚ü©
    (B ‚ü¶ ùì∏ ‚üß) ( Œª i ‚Üí ‚ü¶ g ‚üß‚Çï ((args i Ãá A) tup) )
  ‚â°‚ü® cong ((B ‚ü¶_‚üß)_)
     ( ‚àÄ-extensionality  Œª i -> comm-hom-term g (args i) tup  ) ‚ü©
    (B ‚ü¶ ùì∏ ‚üß) ( Œª i ‚Üí (args i Ãá B) (‚ü¶ g ‚üß‚Çï ‚àò tup) )
  ‚àé

--
-- PROOF of (2).
--
-- (2) For every term t ‚àà T(X) and every Œ∏ ‚àà Con(A), 
--     a Œ∏ b => t(a) Œ∏ t(b).
--
open con

compatible-term : (A : algebra S)
 ->               (t : Term)
 ->               (Œ∏ : con A)
                 -------------------
 ->               compatible-fun (t Ãá A) ‚ü¶ Œ∏ ‚üß·µ£

compatible-term A (generator x) Œ∏ p = p x
compatible-term A (node ùì∏ args) Œ∏ p =
  --Goal:
  -- ( ‚ü¶ Œ∏ ‚üß·µ£ Function.on
  --   ( Œª tup -> (A ‚ü¶ ùì∏ ‚üß) (Œª i -> (args i Ãá A) tup) )
  -- ) .i .j
  compat Œ∏ ùì∏ Œª{ i -> (compatible-term A (args i) Œ∏) p }

--------------------------------------------------------------
-- analogues for setoid-based algebras

open Setoid

_ÃÇ_ : Term -> (A : Algebra S) -> (X -> Carrier ‚ü¶ A ‚üß·µ£) -> Carrier ‚ü¶ A ‚üß·µ£
((generator x) ÃÇ A) tup = tup x
((node ùì∏ args) ÃÇ A) tup = (A ‚ü¶ ùì∏ ‚üß) Œª{i -> (args i ÃÇ A) tup }

open Con

Compatible-Term :
    (A : Algebra S) -> (t : Term) -> (Œ∏ : Con A)
    ----------------------------------------------
  ->   compatible-fun (t ÃÇ A) ‚ü¶ Œ∏ ‚üß·µ£

Compatible-Term A (generator x) Œ∏ p = p x
Compatible-Term A (node ùì∏ args) Œ∏ p =
  compat Œ∏  Œª{ k -> (Compatible-Term A (args k) Œ∏) p }

--Function.on is the operation,
--  _on_ : ‚àÄ {a b c} {A : Set a} {B : Set b} {C : Set c}
--           ‚Üí (B ‚Üí B ‚Üí C) ‚Üí (A ‚Üí B) ‚Üí (A ‚Üí A ‚Üí C)
--  _*_ on f = Œª x y ‚Üí f x * f y
--
--So 
--  (‚ü¶ Œ∏ ‚üß·µ£ Function.on (Œª tup ‚Üí (A ‚ü¶ ùì∏ ‚üß) (Œª { i ‚Üí (args i ÃÇ A) tup }))) .i .j``
--means
--  ((Œª tup ‚Üí (A ‚ü¶ ùì∏ ‚üß) (Œª { i ‚Üí (args i ÃÇ A) tup })) .i)
--  ‚ü¶ Œ∏ ‚üß·µ£
--  ((Œª tup ‚Üí (A ‚ü¶ ùì∏ ‚üß) (Œª { i ‚Üí (args i ÃÇ A) tup })) .j)
--Equivalently,
--   ‚ü¶ Œ∏ ‚üß·µ£
--    (A ‚ü¶ ùì∏ ‚üß) (Œª { i ‚Üí (args i ÃÇ A) .i })
--    (A ‚ü¶ ùì∏ ‚üß) (Œª { i ‚Üí (args i ÃÇ A) .j })                   (1)
--We have,  ``p : lift-rel ‚ü¶ Œ∏ ‚üß·µ£ .i .j`` and the induction hypothesis,
--    ‚àÄ i -> ‚ü¶ Œ∏ ‚üß·µ£ ((args i ÃÇ A) .i) ((args i ÃÇ A) .j)         (IH)
--which is equivalent to
--    lift-rel ‚ü¶ Œ∏ ‚üß·µ£ (Œª { i ‚Üí (args i ÃÇ A) .i }) (Œª { i ‚Üí (args i ÃÇ A) .j })
--Then we use
--    lift-rel ‚ü¶ Œ∏ ‚üß·µ£ =[ (A ‚ü¶ ùì∏ ‚üß) ]‚áí ‚ü¶ Œ∏ ‚üß·µ£                    (2)
--to get (1).
--We get (2) from: compatible-alg A ‚ü¶ Œ∏ ‚üß·µ£ {ùì∏}, which we get from ``compat Œ∏ {ùì∏}``
--We get (IH) from: 
--
--  induct : (A : algebra S)
--    ->     (Œ∏ : con A)
--    ->     (args : Fin (‚ü® S ‚ü©‚Çê ùì∏) ‚Üí Term)
--    ->     (i : Fin (‚ü® S ‚ü©‚Çê ùì∏))
--          -------------------
--    ->     compatible-fun (args i ÃÇ A) ‚ü¶ Œ∏ ‚üß·µ£
--  induct A Œ∏ args i = compatible-term A (args i) Œ∏ 


-------------------------------------------------------------

--Finally, we prove the third claim.
--   (3) For every subset Y of A,
--       Sg(Y) = { t(a‚ÇÅ,...,a‚Çô) : t ‚àà T(X‚Çô), n < œâ, and a·µ¢ ‚àà Y, for i ‚â§ n}.
--

