--File: subuniverse.agda
--Author: William DeMeo
--Date: 10 Jan 2020
--Updated: 6 Feb 2020

{-# OPTIONS --without-K --exact-split #-}
{-# OPTIONS --allow-unsolved-metas #-}

open import Level

open import basic
open algebra
open signature

module subuniverse {ℓ : Level} {S : signature} where

open import preliminaries

open import Data.Empty
open import Data.Unit.Base using (⊤)
open import Data.Product
open import Data.Sum using (_⊎_; [_,_])
open import Function
open import Relation.Unary
import Relation.Binary.PropositionalEquality as Eq
open Eq using (_≡_; refl)
open import Data.Product using (Σ; _,_; ∃; Σ-syntax; ∃-syntax)

OpClosed : (A : algebra S) (B : Pred ⟦ A ⟧ᵤ ℓ) -> Set ℓ
OpClosed A B = ∀{𝓸 : S 𝓕}
               (args : ℕ -> ⟦ A ⟧ᵤ) 
  ->           ∀(i : ℕ) -> (args i) ∈ B
              -------------------------------------------
  ->           (A ⟦ 𝓸 ⟧) args ∈ B
open algebraP

IsSubuniverse : (𝑨 : algebra S) -> Pred ⟦ 𝑨 ⟧ᵤ zero -> Set
IsSubuniverse 𝑨 B = ∀{𝓸 : S 𝓕}
                    (args : ℕ -> ⟦ 𝑨 ⟧ᵤ)
  ->                (∀(i : ℕ) -> (args i) ∈ B)
                   -------------------------------------------
  ->                ( (𝑨 ⟦ 𝓸 ⟧) args ∈ B)

--Sub 𝑨 𝑩 (asserts that 𝑨 is a subalgebra of 𝑩)
Sub : (𝑨 𝑩 : algebraP S) -> Prp
Sub 𝑨 𝑩 = ⟦ 𝑨 ⟧ₚ ⊆ ⟦ 𝑩 ⟧ₚ × (∀{𝓸 : S 𝓕} -> (args : ℕ -> (S Ω))
           -> (∀(i : ℕ) -> (args i) ∈ ⟦ 𝑨 ⟧ₚ)
          -------------------------------------------
           -> (𝑩 ⟦ 𝓸 ⟧ₒ) args ∈ ⟦ 𝑨 ⟧ₚ)

-- subuniverse generated by X ---------------------------------
--          ⋂ : ∀ {ℓ i} (I : Set i) → (I → Pred A ℓ) → Pred A _
--          ⋂ I P = λ x → (i : I) → P i x
Sg : (𝑨 : algebra S)
  ->   (X : Pred ⟦ 𝑨 ⟧ᵤ zero)
      -------------------  
  ->   Pred ⟦ 𝑨 ⟧ᵤ (suc zero)
Sg 𝑨 X = ⋂ (Pred ⟦ 𝑨 ⟧ᵤ zero) (λ U _ → IsSubuniverse 𝑨 U × X ⊆ U) 

-- --subalgebra intersection
-- _⊓_ : ∀ {𝑨 : algebraP S}
--   ->  (𝑩 𝑪 : algebraP S)
--   ->  Sub 𝑩 𝑨 -> Sub 𝑪 𝑨
--     -----------------------
--   ->   algebraP S
-- _⊓_ {𝑨} 𝑩 𝑪 pb pc =
--   record {
--     ⟦_⟧ₚ = ⟦ 𝑩 ⟧ₚ ∩ ⟦ 𝑪 ⟧ₚ ;
--     _⟦_⟧ₒ =  𝑩 ⟦_⟧ₒ ;
--     cl = λ 𝓸 args args∈B∩C -> ((cl 𝑩) 𝓸 args λ{i -> proj₁ (args∈B∩C i)}) , {!!}
--     }

--interxection of subalgebras is a subalgebra
-- ⊓-IsSubuniverse : {𝑨 𝑩 𝑪 : algebraP S} -> Sub 𝑩 𝑨 -> Sub 𝑪 𝑨 -> Sub (𝑩 ⊓ 𝑪) 𝑨 
-- 𝑩 ⊓ 𝑪 = record { ⟦_⟧ₚ = {!!} ; _⟦_⟧ₒ = {!!} ; cl = {!!} }


record subuniverse {A : algebra S} : Set (suc ℓ) where
  constructor mksub
  field
    sset : Pred ⟦ A ⟧ᵤ ℓ
    closed : OpClosed A sset    

--subalgebra type
record subalgebra (A : algebra S) : Set (suc ℓ) where

  field

    subuniv : Pred ⟦ A ⟧ᵤ ℓ
    _⟦_⟧ : (𝓸 : S 𝓕)
      ->   (args : ℕ -> ⟦ A ⟧ᵤ)
      ->   ( ∀(i : ℕ) -> (args i) ∈ subuniv )
         --------------------------------------------------
      ->   Set ℓ
      
    closed : OpClosed A subuniv


open subuniverse

SubAlgebra : (A : algebra S)
  ->         (B : subuniverse {A})
           --------------------------
  ->         (subalgebra A)

SubAlgebra A B =
  record
    {
    subuniv = sset B ;
    _⟦_⟧ = λ 𝓸 args p -> (sset B) ((A ⟦ 𝓸 ⟧) args) ;
    closed = closed B
    }
