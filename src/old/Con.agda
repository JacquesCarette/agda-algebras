--File: Congruence.agda
--Author: William DeMeo and Siva Somayyajula
--Date: 22 Feb 2020
--Updated: 23 Feb 2020
--Notes: Based on the parts of the file `basic.agda` (24 Dec 2019).

{-# OPTIONS --without-K --exact-split #-}

open import Preliminaries
open import Basic 

module Con where

-------------------------------------------------------------------
--Equivalence relations and blocks

--a single Œ∏-class of A
[_]_ : {k : Level}{A : Set k} -> (a : A) -> Rel A k -> Pred A _
[ a ] Œ∏ = Œª x ‚Üí Œ∏ a x

--the collection of Œ∏-classes of A
_//_ : {k : Level} -> (A : Set k) -> Rel A k -> Set _
A // Œ∏ = ‚àÉ Œª (C : Pred A _) -> (‚àÉ Œª a -> C ‚â° [ a ] Œ∏)

--The "trivial" or "diagonal" or "identity" relation.
ùüé : {‚Ñì : Level} (A : Set ‚Ñì) -> Rel A ‚Ñì
ùüé A a‚ÇÅ a‚ÇÇ = a‚ÇÅ ‚â° a‚ÇÇ

ùüé-isEquiv : {‚Ñì : Level} {A : Set ‚Ñì} -> IsEquivalence{‚Ñì}{‚Ñì}{A} (ùüé A)
ùüé-isEquiv =
  record
  { refl = Œª {x} ‚Üí refl
  ; sym = sym
  ; trans = Œª {i} {j} {k} z z‚ÇÅ ‚Üí begin i ‚â°‚ü® z ‚ü© j ‚â°‚ü® z‚ÇÅ ‚ü© k ‚àé
  }
  -- AUTOMATION WORKS! (this proof was found automatically by C-c C-a)

-- lift a binary relation from pairs to pairs of tuples.
lift-rel : ‚àÄ{‚Ñì‚ÇÅ : Level} {Idx : Set ‚Ñì‚ÇÅ} {‚Ñì‚ÇÇ : Level} {Z : Set ‚Ñì‚ÇÇ}
  ->       Rel Z ‚Ñì‚ÇÇ
          -----------------
  ->       Rel (Idx -> Z) (‚Ñì‚ÇÅ ‚äî ‚Ñì‚ÇÇ)
lift-rel R ùíÇ‚ÇÅ ùíÇ‚ÇÇ = ‚àÄ i -> R (ùíÇ‚ÇÅ i) (ùíÇ‚ÇÇ i)

-- compatibility of a give function-relation pair
compatible-fun : ‚àÄ {‚Ñì‚ÇÅ ‚Ñì‚ÇÇ : Level} {Œ≥ : Set ‚Ñì‚ÇÅ} {Z : Set ‚Ñì‚ÇÇ}
  ->             ((Œ≥ -> Z) -> Z)
  ->             (Rel Z ‚Ñì‚ÇÇ)
                -----------------------------------------
  ->             Set (‚Ñì‚ÇÅ ‚äî ‚Ñì‚ÇÇ)
compatible-fun f ùìª = (lift-rel ùìª) =[ f ]‚áí ùìª

module _ {i j : Level} {S : Signature i j}  where

  -- relation compatible with an operation
  compatible-op : {k : Level}{ùë® : Algebra k S} -> ‚à£ S ‚à£ -> Rel ‚à£ ùë® ‚à£ k -> Set (j ‚äî k)
  compatible-op{k}{ùë®} ùì∏ ùìª = (lift-rel ùìª) =[ (‚ü¶ ùë® ‚üß ùì∏) ]‚áí ùìª

  --The given relation is compatible with all ops of an algebra.
  compatible : {k : Level}(ùë® : Algebra k S) -> Rel ‚à£ ùë® ‚à£ k -> Set (i ‚äî j ‚äî k)
  compatible{k} ùë® ùìª = ‚àÄ ùì∏ -> compatible-op{k}{ùë®} ùì∏ ùìª

  ùüé-compatible-op : {k : Level}{ùë® : Algebra k S} -> (ùì∏ : ‚à£ S ‚à£) -> compatible-op{k}{ùë®} ùì∏ (ùüé ‚à£ ùë® ‚à£)
  ùüé-compatible-op{k}{ùë®} = Œª ùì∏ x -> cong (‚ü¶ ùë® ‚üß ùì∏) (extensionality x)

  ùüé-compatible : {k : Level}{ùë® : Algebra k S} -> compatible ùë® (ùüé ‚à£ ùë® ‚à£)
  ùüé-compatible{k}{ùë®} = Œª ùì∏ args -> ùüé-compatible-op{k}{ùë®} ùì∏ args

  -- Congruence relations
  Con : {k : Level}(ùë® : Algebra k S)
         -----------------------
    ->    Set (i ‚äî j ‚äî lsuc k)
  --  ->    Set (lsuc i ‚äî lsuc j ‚äî lsuc k)
  Con{k} ùë® = ‚àÉ Œª (Œ∏ : Rel ‚à£ ùë® ‚à£ k)
            -> IsEquivalence Œ∏ √ó compatible ùë® Œ∏

  con : {k : Level} (ùë® : Algebra k S)
         -----------------------
    ->   Pred (Rel ‚à£ ùë® ‚à£ k) _
  con ùë® = Œª Œ∏ ‚Üí IsEquivalence Œ∏ √ó compatible ùë® Œ∏
          --  -> 
  record Congruence{k : Level} (ùë® : Algebra k S) : Set (i ‚äî j ‚äî lsuc k) where
    constructor mkcon
    field
      ‚à•_‚à• : Rel ‚à£ ùë® ‚à£ k
      Compatible : compatible ùë® ‚à•_‚à•
      IsEquiv : IsEquivalence ‚à•_‚à•
  open Congruence 

  --The "trivial" or "diagonal" or "identity" relation.
  ‚ü¶ùüé‚üß : {k : Level}(ùë® : Algebra k S) -> Congruence ùë®
  ‚ü¶ùüé‚üß{k} ùë® = mkcon (ùüé ‚à£ ùë® ‚à£)
                (ùüé-compatible{k}{ùë®})
                (ùüé-isEquiv )

  _/_ : {k : Level}(ùë® : Algebra k S)
    ->  Congruence ùë®
       -----------------------
    ->  Algebra (lsuc k) S
  ùë® / Œ∏ = ( ( ‚à£ ùë® ‚à£ // ‚à• Œ∏ ‚à• ) , -- carrier
             ( Œª ùì∏ args        -- operations
                 -> ( [ ‚ü¶ ùë® ‚üß ùì∏ (Œª i‚ÇÅ -> ‚à£ ‚ü¶ args i‚ÇÅ ‚üß ‚à£) ] ‚à• Œ∏ ‚à• ) ,
                    ( ‚ü¶ ùë® ‚üß ùì∏ (Œª i‚ÇÅ -> ‚à£ ‚ü¶ args i‚ÇÅ ‚üß ‚à£) , refl )
             )
           )

