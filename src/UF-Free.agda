--File: UF-Free.agda
--Author: William DeMeo and Siva Somayyajula
--Date: 20 Feb 2020
--Updated: 23 Feb 2020
--Notes: Based on the file `free.agda` (25 Dec 2019).
--       Used for 2nd half of talk at JMM Special Session (Jan 2020).

{-# OPTIONS --without-K --exact-split #-}

open import UF-Prelude using (ùì§; ùì§‚ÇÄ;ùì•; ùì°; ùìû; _‚Å∫; _Ãá;_‚äî_; _,_; Œ£; -Œ£; ‚à£_‚à£; ‚à•_‚à•; _‚â°_; refl; _‚àº_; _‚â°‚ü®_‚ü©_; _‚àé; ap; _‚Åª¬π; _‚àò_)
open import UF-Basic using (Signature; Algebra; Œ†')
open import UF-Hom using (Hom)
open import UF-Con using (Con; compatible-fun)
open import UF-Extensionality using (propext; dfunext; funext; _‚àà_)
open import Relation.Unary using (Pred)
--open import UF-Rel

module UF-Free {S : Signature ùìû ùì•} {X : ùì§ Ãá} where

----------------------------
-- TERMS in the signature S
----------------------------
-- open signature

-- data Term : Set (i ‚äî j ‚äî k) where
--   generator : X -> Term
--   node : (ùì∏ : ‚à£ S ‚à£) -> (ùíï : ‚ü¶ S ‚üß ùì∏ -> Term) -> Term
data Term  : ùìû ‚äî ùì• ‚äî ùì§ Ãá  where
  generator : X -> Term
  node : (ùì∏ : ‚à£ S ‚à£) -> (ùíï : ‚à• S ‚à• ùì∏ -> Term) -> Term

open Term

map-Term : (Term -> Term) -> Term -> Term
map-Term f (generator x) = f (generator x)
map-Term f (node ùì∏ ùíï) = node ùì∏ (Œª i -> map-Term f (ùíï i))

----------------------------------
-- TERM ALGEBRA (for signature S)
----------------------------------

-- open Algebra
-- open Term

ùîâ : Algebra _ S
ùîâ = Term , node

-------------------------------------
-- The UNIVERSAL PROPERTY of free

module _  {ùë® : Algebra ùì§ S} where

  -- We first prove this for algebras whose carriers are mere sets.

  -- 1. every h : X -> ‚ü¶ A ‚üß·µ§  lifts to a hom from free to A.
  -- 2. the induced hom is unique.

  -- PROOF.
  -- 1.a. Every map  (X ‚Üí A)  "lifts".
  free-lift : (h : X ‚Üí ‚à£ ùë® ‚à£)  ‚Üí   ‚à£ ùîâ ‚à£ ‚Üí ‚à£ ùë® ‚à£
  free-lift h (generator x) = h x
  free-lift h (node ùì∏ args) = (‚à• ùë® ‚à• ùì∏) Œª{i -> free-lift  h (args i)}

  -- 1.b. The lift is a hom.
  lift-hom : (h : X ‚Üí ‚à£ ùë® ‚à£) ‚Üí  Hom ùîâ ùë®
  lift-hom  h = free-lift h , Œª ùì∏ ùíÇ ‚Üí ap (‚à• ùë® ‚à• _) (refl _) --cong (‚ü¶ ùë® ‚üß _) refl
  --record { ‚ü¶_‚üß‚Çï = free-lift {A} h; homo = Œª args ‚Üí refl }

  -- 2. The lift to  (free -> A)  is unique.
  --    (We need EXTENSIONALITY for this (imported from util.agda))
  free-unique : funext ùì• ùì§ ‚Üí ( f g : Hom ùîâ ùë® )
   ‚Üí             ( ‚àÄ x  ->  ‚à£ f ‚à£ (generator x) ‚â° ‚à£ g ‚à£ (generator x) )
   ‚Üí             (t : Term)
                  ---------------------------
   ‚Üí              ‚à£ f ‚à£ t ‚â° ‚à£ g ‚à£ t

  free-unique fe f g p (generator x) = p x
  free-unique fe f g p (node ùì∏ args) =
      ( ‚à£ f ‚à£ )(node ùì∏ args)             ‚â°‚ü® ‚à• f ‚à• ùì∏ args ‚ü©
      (‚à• ùë® ‚à• ùì∏) (Œª i -> ‚à£ f ‚à£ (args i))   ‚â°‚ü® ap (‚à• ùë® ‚à• _) (fe (Œª i ‚Üí free-unique fe f g p (args i)) ) ‚ü©
      (‚à• ùë® ‚à• ùì∏) (Œª i -> ‚à£ g ‚à£ (args i))   ‚â°‚ü® (‚à• g ‚à• ùì∏ args)‚Åª¬π ‚ü©
      ‚à£ g ‚à£ (node ùì∏ args)                 ‚àé

--SUGAR:  ùì∏ ÃÇ ùë®  ‚â°  ‚ü¶ ùë® ‚üß ùì∏   -------------------------------------
--Before proceding, we define some syntactic sugar that allows us
--to replace ‚ü¶ ùë® ‚üß ùì∏ with (the more standard-looking) ùì∏ ÃÇ ùë®.
_ÃÇ_ :  (ùì∏ : ‚à£ S ‚à£ ) ‚Üí (ùë® : Algebra ùì§ S)
 ‚Üí       ( ‚à• S ‚à• ùì∏  ‚Üí  ‚à£ ùë® ‚à£ ) ‚Üí ‚à£ ùë® ‚à£
ùì∏ ÃÇ ùë® = Œª x ‚Üí (‚à• ùë® ‚à• ùì∏) x
--We can now write ùì∏ ÃÇ ùë® for the interpretation of the basic
--operation ùì∏ in the algebra ùë®.  N.B. below, we will write
--   ùíï Ãá ùë®    for the interpretation of a TERM ùíï in ùë®.

----------------------------------------------------------------------
--INTERPRETATION OF TERMS
--------------------------
--(cf Def 4.31 of Bergman)
--Let ùíï : Term be a term, ùë® an algebra, in the signature S. We define an
--n-ary operation, denoted (ùíï Ãá ùë®), on ùë® by recursion on the struct of ùíï.
-- 1. if ùíï is the var x ‚àà X, ùíÇ : X -> ‚à£ ùë® ‚à£ a tuple from A, then (t Ãá ùë®) ùíÇ = ùíÇ x.
-- 2. if ùíï = ùì∏ args, ùì∏ ‚àà ‚à£ S ‚à£ an op symbol, args : ‚ü¶ S ‚üß ùì∏ -> Term a
--    (‚ü¶ S ‚üß ùì∏)-tuple of terms, ùíÇ : X -> ‚à£ A ‚à£ a tuple from A, then
--    (ùíï Ãá ùë®) ùíÇ = ((ùì∏ args) Ãá ùë®) ùíÇ = (ùì∏ ÃÇ ùë®) Œª{ i -> ((args i) Ãá ùë®) ùíÇ }
-- Here is how we implement this definition in Agda.

--Interpretation of a term.
_Ãá_ : Term ‚Üí (ùë® : Algebra ùì§ S) ‚Üí  ( X ‚Üí ‚à£ ùë® ‚à£ ) ‚Üí ‚à£ ùë® ‚à£
((generator x)Ãá ùë®) ùíÇ = ùíÇ x
((node ùì∏ args)Ãá ùë®) ùíÇ = (ùì∏ ÃÇ ùë®) Œª{x -> (args x Ãá ùë®) ùíÇ }

interp-prod : funext ùì• ùì§ ‚Üí {I : ùì§ Ãá} (p : Term)  (ùìê : I ‚Üí Algebra ùì§ S) ( x : X ‚Üí ‚àÄ i ‚Üí ‚à£ (ùìê i) ‚à£ )
 ‚Üí              (p Ãá (Œ†' ùìê)) x  ‚â°   (Œª i ‚Üí (p Ãá ùìê i) (Œª j -> x j i))
interp-prod fe (generator x‚ÇÅ) ùìê x = refl _
interp-prod fe (node ùì∏ ùíï) ùìê x =
  let IH = Œª x‚ÇÅ ‚Üí interp-prod fe (ùíï x‚ÇÅ) ùìê x in
      ‚à• Œ†' ùìê ‚à• ùì∏ (Œª x‚ÇÅ ‚Üí (ùíï x‚ÇÅ Ãá Œ†' ùìê) x)                                ‚â°‚ü® ap (‚à• Œ†' ùìê ‚à• ùì∏ ) (fe IH) ‚ü©
      ‚à• Œ†' ùìê ‚à• ùì∏ (Œª x‚ÇÅ ‚Üí (Œª i‚ÇÅ ‚Üí (ùíï x‚ÇÅ Ãá ùìê i‚ÇÅ) (Œª j‚ÇÅ ‚Üí x j‚ÇÅ i‚ÇÅ))) ‚â°‚ü® refl _ ‚ü©   -- refl ‚ü©
      (Œª i‚ÇÅ ‚Üí ‚à• ùìê i‚ÇÅ ‚à• ùì∏ (Œª x‚ÇÅ ‚Üí (ùíï x‚ÇÅ Ãá ùìê i‚ÇÅ) (Œª j‚ÇÅ ‚Üí x j‚ÇÅ i‚ÇÅ)))  ‚àé


-- interp-prod2 : funext ùì• ùì§  ‚Üí {I : ùì§ Ãá} ‚Üí   (p : Term)  ‚Üí ( ùìê : I ‚Üí Algebra ùì§ S )
--  ‚Üí              p Ãá Œ†' ùìê   ‚â°    Œª (args : X ‚Üí ‚à£ Œ†' ùìê ‚à£ ) ‚Üí (Œª i ‚Üí (p Ãá ùìê i) (Œª x ‚Üí args x i))
-- interp-prod2 fe (generator x‚ÇÅ) ùìê = refl _
-- interp-prod2 fe (node ùì∏ ùíï) ùìê = fe  ( Œª x ‚Üí
--           --       let IH = Œª x‚ÇÅ ‚Üí interp-prod fe (ùíï x‚ÇÅ) ùìê x in 
--         ‚à• Œ†' ùìê ‚à• ùì∏ (Œª x‚ÇÅ ‚Üí (ùíï x‚ÇÅ Ãá Œ†' ùìê) x)                                  ‚â°‚ü® {!!} ‚ü©                -- cong (‚ü¶ Œ† ùìê ‚üß ùì∏ ) (extensionality IH) ‚ü©
--         ‚à• Œ†' ùìê ‚à• ùì∏ (Œª x‚ÇÅ ‚Üí (Œª i‚ÇÅ ‚Üí (ùíï x‚ÇÅ Ãá ùìê i‚ÇÅ) (Œª j‚ÇÅ ‚Üí x j‚ÇÅ i‚ÇÅ)))   ‚â°‚ü® {!!} ‚ü©        --refl ‚ü©
--         (Œª i‚ÇÅ ‚Üí ‚à• ùìê i‚ÇÅ ‚à• ùì∏ (Œª x‚ÇÅ ‚Üí (ùíï x‚ÇÅ Ãá ùìê i‚ÇÅ) (Œª j‚ÇÅ ‚Üí x j‚ÇÅ i‚ÇÅ)))  ‚àé )


-- Recall (cf. UAFST Thm 4.32)
-- Theorem 1.
-- Let A and B be algebras of type S. Then the following hold:
-- 1. For every n-ary term t and homomorphism g: A ‚Äî> B, 
--    g(t·¥¨(a‚ÇÅ,...,a‚Çô)) = t·¥Æ(g(a‚ÇÅ),...,g(a‚Çô)).
-- 2. For every term t ‚àà T(X) and every Œ∏ ‚àà Con(A), 
--    a Œ∏ b => t(a) Œ∏ t(b).
-- 3. For every subset Y of A,
--    Sg(Y) = {t(a‚ÇÅ,...,a‚Çô) : t ‚àà T(X‚Çô), n < œâ, a·µ¢ ‚àà Y, i ‚â§ n}.
-- PROOF.
-- 1. (homomorphisms commute with terms).
comm-hom-term : funext ùì• ùì§ ‚Üí (ùë® : Algebra ùì§ S) (ùë© : Algebra ùì§ S)
 ‚Üí                   (g : Hom ùë® ùë©)   ‚Üí  (ùíï : Term)  ‚Üí   (ùíÇ : X ‚Üí ‚à£ ùë® ‚à£)
                      --------------------------------------------------
 ‚Üí                      ‚à£ g ‚à£ ((ùíï Ãá ùë®) ùíÇ) ‚â° (ùíï Ãá ùë©) (‚à£ g ‚à£ ‚àò ùíÇ)

comm-hom-term fe ùë® ùë© g (generator x) ùíÇ = refl _
comm-hom-term  fe ùë® ùë© g (node ùì∏ args) ùíÇ =
    ‚à£ g ‚à£ ((ùì∏ ÃÇ ùë®)  (Œª i‚ÇÅ ‚Üí (args i‚ÇÅ Ãá ùë®) ùíÇ))     ‚â°‚ü® ‚à• g ‚à• ùì∏ ( Œª r ‚Üí (args r Ãá ùë®) ùíÇ ) ‚ü©
    (ùì∏ ÃÇ ùë©) ( Œª i‚ÇÅ ‚Üí  ‚à£ g ‚à£ ((args i‚ÇÅ Ãá ùë®) ùíÇ) )    ‚â°‚ü® ap (_ ÃÇ ùë©) ( fe (Œª i‚ÇÅ ‚Üí comm-hom-term fe ùë® ùë© g (args i‚ÇÅ) ùíÇ) ) ‚ü©
    (ùì∏ ÃÇ ùë©) ( Œª r -> (args r Ãá ùë©) (‚à£ g ‚à£ ‚àò ùíÇ) )        ‚àé

--For 2 of Thm 1, we need congruences (see Congruence.agda).
-- 2. If t : Term, Œ∏ : Con A, then a Œ∏ b => t(a) Œ∏ t(b).
compatible-term :   (ùë® : Algebra ùì§ S) ‚Üí  (ùíï : Term)  ‚Üí (Œ∏ : Con ùë®)
                         -----------------------------------------------
 ‚Üí                      compatible-fun (ùíï Ãá ùë®) ‚à£ Œ∏ ‚à£
  -- wjd: I don't know why this ^^^^^^^^^^^^^^^^^ combination
  --      of implicit vars works... very weird.
compatible-term ùë® (generator x) Œ∏ p = p x
compatible-term ùë® (node ùì∏ args) Œ∏ p = ‚à• ‚à• Œ∏ ‚à• ‚à• ùì∏ Œª{ x -> (compatible-term ùë® (args x) Œ∏) p }

-- For proof of item (3), see `TermImageSub` in Subuniverse.agda.

------------------------------------------------------------------
_‚ä¢_‚âà_ : Algebra ùì§ S ‚Üí Term ‚Üí Term ‚Üí Set _
ùë® ‚ä¢ p ‚âà q = p Ãá ùë® ‚â° q Ãá ùë®

-- _‚ä¢_‚âã_ : Pred (Algebra ùì§ S) ùì° ‚Üí Term ‚Üí Term ‚Üí Set _
-- _‚ä¢_‚âã_ ùìö p q = {ùë® : Algebra ùì§ S} ‚Üí ùë® ‚àà ùìö ‚Üí ùë® ‚ä¢ p ‚âà q

---------------------------------------------------------



-- ARITY OF A TERM
-- argsum : ‚Ñï -> (‚Ñï -> ‚Ñï) -> ‚Ñï
-- argsum nzero f = 0
-- argsum (succ n) f = f n + argsum n f
-- ‚ü®_‚ü©‚Çú : Term -> ‚Ñï
-- ‚ü® generator x ‚ü©‚Çú = 1
-- ‚ü® node ùì∏ args ‚ü©‚Çú = (S œÅ) ùì∏ + argsum ((S œÅ) ùì∏) (Œª i -> ‚ü® args i ‚ü©‚Çú)

