--FILE: UF-Con.agda
--AUTHOR: William DeMeo and Siva Somayyajula
--DATE: 22 Feb 2020
--UPDATED: 23 May 2020

{-# OPTIONS --without-K --exact-split --safe #-}

open import UF-Prelude using (ùì§; ùì§‚ÇÄ;ùì•; ùì¶; ùì°; ùìû; _‚Å∫; _Ãá;_‚äî_; _,_; Œ£; -Œ£; ‚à£_‚à£; ‚à•_‚à•; ùüò; ùüô; ùüö; _√ó_; _‚â°_; refl; _‚àº_; _‚â°‚ü®_‚ü©_; _‚àé; ap; _‚Åª¬π)
open import UF-Basic using (Signature; Algebra)
open import UF-Extensionality using (propext; dfunext; funext)
open import UF-Singleton using (is-subsingleton; is-set)
open import UF-Rel using (Rel; IsEquivalence; Reflexive; Symmetric; Transitive; _=[_]‚áí_)
open import Relation.Unary using (Pred)

module UF-Con where

-------------------------------------------------------------------
--Equivalence relations and blocks

--For a binary relation ‚âà on A, denote a single ‚âà-class (containing a) by `[ a ] ‚âà`
[_]_ :  {A : ùì§ Ãá} ‚Üí  (a : A) ‚Üí Rel A ùì° ‚Üí ùì§ ‚äî ùì° Ãá
[ a ] _‚âà_ = Œ£ x Íûâ _ ,  a ‚âà x

--...denote the collection of all ‚âà-classes of A by `A // ‚âà`.
_//_ :  (A : ùì§ Ãá ) ‚Üí Rel A ùì° ‚Üí (ùì§ ‚äî ùì°) ‚Å∫ Ãá
A // ‚âà = Œ£ C Íûâ _ ,   Œ£ a Íûâ A ,  C ‚â° ( [ a ] ‚âà )

is-subsingleton-valued : {A : ùì§ Ãá } ‚Üí Rel A ùì° ‚Üí ùì§ ‚äî ùì° Ãá
is-subsingleton-valued  _‚âà_ = ‚àÄ x y ‚Üí is-subsingleton (x ‚âà y)

reflexive : {X : ùì§ Ãá } ‚Üí Rel X ùì° ‚Üí ùì§ ‚äî ùì° Ãá
reflexive _‚âà_ = ‚àÄ x ‚Üí x ‚âà x

symmetric : {X : ùì§ Ãá } ‚Üí Rel X ùì° ‚Üí ùì§ ‚äî ùì° Ãá
symmetric _‚âà_ = ‚àÄ x y ‚Üí x ‚âà y ‚Üí y ‚âà x

transitive : {X : ùì§ Ãá } ‚Üí Rel X ùì° ‚Üí ùì§ ‚äî ùì° Ãá
transitive _‚âà_ = ‚àÄ x y z ‚Üí x ‚âà y ‚Üí y ‚âà z ‚Üí x ‚âà z

is-equivalence-relation : {X : ùì§ Ãá } ‚Üí Rel X ùì° ‚Üí ùì§ ‚äî ùì° Ãá
is-equivalence-relation _‚âà_ = is-subsingleton-valued _‚âà_  √ó reflexive _‚âà_  √ó symmetric _‚âà_  √ó transitive _‚âà_

--The "trivial" or "diagonal" or "identity" relation.
ùüé : {A : ùì§ Ãá} ‚Üí ùì§ Ãá
ùüé{ùì§} {A} = Œ£ a Íûâ A , Œ£ b Íûâ A , a ‚â° b

ùüé-rel : {A : ùì§ Ãá} ‚Üí Rel A ùì§
ùüé-rel a b = a ‚â° b

--...as a binary predicate:
ùüé-pred : {A : ùì§ Ãá} ‚Üí Pred (A √ó A) ùì§
ùüé-pred (a , a') = a ‚â° a'

--...as a binary predicate:
ùüé'' : {A : ùì§ Ãá} ‚Üí ùì§ Ãá
ùüé'' {ùì§} {A} = Œ£ p Íûâ (A √ó A) , ‚à£ p ‚à£ ‚â° ‚à• p ‚à•

-- ùüé : {ùì§ : Universe} (A : ùì§ Ãá) ‚Üí ùì§ Ãá
-- ùüé A = Œ£ a Íûâ (A √ó A) , pr‚ÇÅ a ‚â° pr‚ÇÇ a

--The "universal" or "total" or "all" relation.
ùüè : {A : ùì§ Ãá} ‚Üí Rel A ùì§‚ÇÄ
ùüè a b = ùüô

ùüé-on-set-is-equiv : propext ùì§ ‚Üí dfunext ùì§ ùì§ ‚Üí {A : ùì§ Ãá}
  ‚Üí         is-set A
  ‚Üí         is-equivalence-relation {ùì§} {ùì§} {A} ùüé-rel
ùüé-on-set-is-equiv pe fe {A} Aset =
  Aset , refl , (Œª x y x‚â°y ‚Üí x‚â°y ‚Åª¬π) , Œª x y z x‚â°y y‚â°z ‚Üí x ‚â°‚ü® x‚â°y ‚ü© y ‚â°‚ü® y‚â°z ‚ü© z ‚àé 

ùüé-IsEquivalence : {A : ùì§ Ãá} ‚Üí IsEquivalence {ùì§}{ùì§}{A} ùüé-rel
ùüé-IsEquivalence = record { rfl = œÅ ; sym = œÉ ; trans = œÑ }
 where
  œÅ : Reflexive ùüé-rel
  œÅ {x} =  x ‚â°‚ü® refl x ‚ü© x ‚àé

  œÉ : Symmetric ùüé-rel
  œÉ {x} {y} x‚â°y = x‚â°y ‚Åª¬π

  œÑ : Transitive ùüé-rel
  œÑ {x} {y} {z} x‚â°y y‚â°z = x ‚â°‚ü® x‚â°y ‚ü© y ‚â°‚ü® y‚â°z ‚ü© z ‚àé

--lift a binary relation from pairs to pairs of tuples.
lift-rel :  {Œ≥ : ùì• Ãá} {Z : ùì§ Ãá} ‚Üí Rel Z ùì¶ ‚Üí (Œ≥ ‚Üí Z) ‚Üí (Œ≥ ‚Üí Z) ‚Üí ùì• ‚äî ùì¶ Ãá
lift-rel R ùíá ùíà = ‚àÄ x ‚Üí R (ùíá x) (ùíà x)

--compatibility of a given function-relation pair
compatible-fun : {Œ≥ : ùì• Ãá} {Z : ùì§ Ãá} ( ùíá : (Œ≥ ‚Üí Z) ‚Üí Z )  (ùëπ : Rel Z ùì¶) ‚Üí  ùì• ‚äî ùì§ ‚äî ùì¶ Ãá
compatible-fun ùíá ùëπ = (lift-rel ùëπ) =[ ùíá ]‚áí ùëπ

module _ {S : Signature ùìû ùì•}  where

  -- relation compatible with an operation
  compatible-op : {ùë® : Algebra ùì§ S} ‚Üí ‚à£ S ‚à£ ‚Üí Rel ‚à£ ùë® ‚à£ ùì§ ‚Üí ùì• ‚äî ùì§ Ãá
  compatible-op {ùì§} {ùë®} ùì∏ ùìª = (lift-rel ùìª) =[ (‚à• ùë® ‚à• ùì∏) ]‚áí ùìª

  --The given relation is compatible with all ops of an algebra.
  compatible : (ùë® : Algebra ùì§ S) -> Rel ‚à£ ùë® ‚à£ ùì§ ‚Üí ùìû ‚äî ùì• ‚äî ùì§ Ãá
  compatible {ùì§} ùë® ùìª = ‚àÄ ùì∏ ‚Üí compatible-op{ùì§}{ùë®} ùì∏ ùìª

  ùüé-compatible-op : funext ùì• ùì§ ‚Üí {ùë® : Algebra ùì§ S} ‚Üí (ùì∏ : ‚à£ S ‚à£) ‚Üí compatible-op {ùì§}{ùë®} ùì∏ ùüé-rel
  ùüé-compatible-op fe {ùë®} ùì∏ ptwsùüé  = ap  (‚à• ùë® ‚à• ùì∏) (fe (Œª x ‚Üí ptwsùüé x))

  ùüé-compatible : funext ùì• ùì§ ‚Üí {ùë® : Algebra ùì§ S} ‚Üí compatible ùë® ùüé-rel
  ùüé-compatible fe {ùë®} = Œª ùì∏ args ‚Üí ùüé-compatible-op fe {ùë®} ùì∏ args

  -- Congruence relations
  Con : (ùë® : Algebra ùì§ S) ‚Üí ùìû ‚äî ùì• ‚äî ùì§ ‚Å∫ Ãá
  Con {ùì§} ùë® = Œ£ Œ∏ Íûâ ( Rel ‚à£ ùë® ‚à£ ùì§ ) , IsEquivalence Œ∏ √ó compatible ùë® Œ∏

  con : (ùë® : Algebra ùì§ S)  ‚Üí  Pred (Rel ‚à£ ùë® ‚à£ ùì§) _
  con ùë® = Œª Œ∏ ‚Üí IsEquivalence Œ∏ √ó compatible ùë® Œ∏

  record Congruence (ùë® : Algebra ùì§ S) : ùìû ‚äî ùì• ‚äî ùì§ ‚Å∫ Ãá  where
    constructor mkcon
    field
      ‚ü®_‚ü© : Rel ‚à£ ùë® ‚à£ ùì§
      Compatible : compatible ùë® ‚ü®_‚ü©
      IsEquiv : IsEquivalence ‚ü®_‚ü©
  open Congruence

  --The "trivial" or "diagonal" or "identity" relation.
  Œî : funext ùì• ùì§ ‚Üí (ùë® : Algebra ùì§ S) ‚Üí Congruence ùë®
  Œî fe ùë® = mkcon ùüé-rel
                ( ùüé-compatible fe {ùë®} )
                ( ùüé-IsEquivalence )

  _‚ï±_ : (ùë® : Algebra ùì§ S) ‚Üí Congruence ùë®
         ---------------------------------
   ‚Üí     Algebra (ùì§ ‚Å∫) S
  ùë® ‚ï± Œ∏ = ( ( ‚à£ ùë® ‚à£ // ‚ü® Œ∏ ‚ü© ) , -- carrier
             ( Œª ùì∏ args        -- operations
                 ‚Üí ( [ ‚à• ùë® ‚à• ùì∏ (Œª i‚ÇÅ -> ‚à£ ‚à• args i‚ÇÅ ‚à• ‚à£) ] ‚ü® Œ∏ ‚ü© ) ,
                    ( ‚à• ùë® ‚à• ùì∏ (Œª i‚ÇÅ -> ‚à£ ‚à• args i‚ÇÅ ‚à• ‚à£) , refl _ )
             )
           )

