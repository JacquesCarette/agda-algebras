--File: quotient.agda
--AUTHOR: William DeMeo
--DATE: 28 Jan 2020
--UPDATED: 28 Jan 2020

open import Level
open import basic
open import subuniverse
open signature
open import preliminaries

module quotient {‚Ñì : Level} {S : signature} where


--open import Function
open import Relation.Unary
open import Relation.Binary
open import Relation.Binary.Core
import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; refl)
open import Data.Product using (Œ£; _,_; ‚àÉ; Œ£-syntax; ‚àÉ-syntax)


---------------------------
-- CONGRUENCE RELATIONS
--------------------------

-- Reflexive : ‚àÄ {a ‚Ñì} {A : Set a} ‚Üí Rel A ‚Ñì ‚Üí Set _
-- Reflexive _‚àº_ = ‚àÄ {x} ‚Üí x ‚àº x

open algebra

isCompatible : ‚àÄ (A : algebra S) -> Rel ‚ü¶ A ‚üß·µ§ zero -> Set _

isCompatible A Œ∏ = ‚àÄ{ùì∏ : ‚ü® S ‚ü©‚Çí}
  ->               (arg1 arg2 : Fin (‚ü® S ‚ü©‚Çê ùì∏) -> ‚ü¶ A ‚üß·µ§) 
  ->               ( ‚àÄ i -> Œ∏ (arg1 i) (arg2 i) )
                 -------------------------------------------
  ->                 Œ∏ ((A ‚ü¶ ùì∏ ‚üß) arg1) ((A ‚ü¶ ùì∏ ‚üß) arg2)



open Setoid
open Algebra


-- Recall, Theorem 4.32 of Bergman.
-- Let A and B be algebras of type S. Then the following hold:
--
--   (1) For every n-ary term t and homomorphism g: A ‚Äî> B, 
--       g(t·¥¨(a‚ÇÅ,...,a‚Çô)) = t·¥Æ(g(a‚ÇÅ),...,g(a‚Çô)).
--   (2) For every term t ‚àà T(X) and every Œ∏ ‚àà Con(A), 
--       a Œ∏ b => t(a) Œ∏ t(b).
--   (3) For every subset Y of A,
--       Sg(Y) = { t(a‚ÇÅ,...,a‚Çô) : t ‚àà T(X‚Çô), n < œâ, and a·µ¢ ‚àà Y, for i ‚â§ n}.
--
-- (1) is proved in the file free.agda
--
-- PROOF of (2).

-- (2) For every term t ‚àà T(X) and every Œ∏ ‚àà Con(A), 
--     a Œ∏ b => t(a) Œ∏ t(b).
--


-- TODO



--------------------------------------------------------------
--EARLIER/OTHER ATTEMPTS
-------------------------------------------------------------

-----------------
-- congruences
-----------------
-- record congruence (A : algebra S) : Set‚ÇÅ where
--   field
--     ‚ü¶_‚üß·µ£ : Rel {zero} ‚ü¶ A ‚üß·µ§ zero
--     eqv : IsEquivalence ‚ü¶_‚üß·µ£
--     compatible : (ùì∏ : ‚ü® S ‚ü©‚Çí) -> (args‚ÇÅ args‚ÇÇ : Fin (‚ü® S ‚ü©‚Çê ùì∏) -> ‚ü¶ A ‚üß·µ§)
--       ->         ‚àÄ (i : Fin (‚ü® S ‚ü©‚Çê ùì∏)) -> ‚ü¶_‚üß·µ£ (args‚ÇÅ i) (args‚ÇÇ i)
--                 ---------------------------------------------------
--       ->           ‚ü¶_‚üß·µ£ ((A ‚ü¶ ùì∏ ‚üß) args‚ÇÅ) ((A ‚ü¶ ùì∏ ‚üß) args‚ÇÇ)
      
-- open congruence

-- postulate  -- (for now... prove this later)
--   cong-term : (A : algebra  S)
--     ->        (Œ∏ : congruence A)
--     ->        (t : Term)
--     ->        (tup‚ÇÅ tup‚ÇÇ : X -> ‚ü¶ A ‚üß·µ§)
--     ->        ( ‚àÄ(x : X) -> ‚ü¶ Œ∏ ‚üß·µ£ (tup‚ÇÅ x) (tup‚ÇÇ x) )
--             ---------------------------------------------
--     ->         ‚ü¶ Œ∏ ‚üß·µ£ ((t ÃÇ A) tup‚ÇÅ) ((t ÃÇ A) tup‚ÇÇ)

-- cong-term A Œ∏ (generator x) tup‚ÇÅ tup‚ÇÇ p = p x
-- cong-term A Œ∏ (node ùì∏ args) tup‚ÇÅ tup‚ÇÇ p =  
--   compatible Œ∏ ùì∏ (Œª{ i -> (args i ÃÇ A) tup‚ÇÅ }) (Œª{ i -> (args i ÃÇ A) tup‚ÇÇ }) 
--     ‚àÄ i : ‚ü® S ‚ü©‚Çê ùì∏) -> ? --(cong-term A Œ∏ (args i) tup‚ÇÅ tup‚ÇÇ p) )

-- HOW TO PROVE THIS --
-- Goal is:
-- ‚ü¶ Œ∏ ‚üß·µ£ ((A ‚ü¶ ùì∏ ‚üß) (Œª { i ‚Üí (args i ÃÇ A) tup‚ÇÅ }))
--       ((A ‚ü¶ ùì∏ ‚üß) (Œª { i ‚Üí (args i ÃÇ A) tup‚ÇÇ }))

-- So let args‚ÇÅ = (Œª { i ‚Üí (args i ÃÇ A) tup‚ÇÅ })
-- and    args‚ÇÇ = (Œª { i ‚Üí (args i ÃÇ A) tup‚ÇÅ })
-- WTS
--    ‚ü¶ Œ∏ ‚üß·µ£ ((A ‚ü¶ ùì∏ ‚üß) args‚ÇÅ) ((A ‚ü¶ ùì∏ ‚üß) args‚ÇÇ)

-- ...which follows from:

-- (compatible Œ∏) ùì∏ (Œª { i ‚Üí (args i ÃÇ A) tup‚ÇÅ })) (Œª { i ‚Üí (args i ÃÇ A) tup‚ÇÇ })) p'

-- where p' :  ‚àÄ (i : ‚ü® S ‚ü©‚Çê ùì∏) -> ‚ü¶ Œ∏ ‚üß·µ£ (args‚ÇÅ i) (args‚ÇÇ i))

-- but (args‚ÇÅ i)  = (args i ÃÇ A) tup‚ÇÅ and (args‚ÇÇ i)  = (args i ÃÇ A) tup‚ÇÇ.

-- so   p' :   ‚àÄ (i : ‚ü® S ‚ü©‚Çê ùì∏) -> ‚ü¶ Œ∏ ‚üß·µ£ ((args i ÃÇ A) tup‚ÇÅ) ((args i ÃÇ A) tup‚ÇÇ)

-- By induction, for each i,

-- ‚ü¶ Œ∏ ‚üß·µ£ ((args i ÃÇ A) tup‚ÇÅ) ((args i ÃÇ A) tup‚ÇÇ) holds by

--  (cong-term Œ∏ (args i) tup‚ÇÅ tup‚ÇÇ ?) )

-- (Recall, the original p is a proof of (x : X) ‚Üí ‚ü¶ Œ∏ ‚üß·µ£ (tup‚ÇÅ x) (tup‚ÇÇ x))


