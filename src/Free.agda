--File: Free.agda
--Author: William DeMeo and Siva Somayyajula
--Date: 20 Feb 2020
--Updated: 23 Feb 2020
--Notes: Based on the file `free.agda` (25 Dec 2019).
--       Used for 2nd half of talk at JMM Special Session (Jan 2020).

{-# OPTIONS --without-K --exact-split #-}

open import Preliminaries
open import Basic 
open import Hom
open import Con

module Free {i j k : Level} {S : Signature i j} {X : Set k}  where

----------------------------
-- TERMS in the signature S
----------------------------
-- open signature

-- data Term : Set (i ‚äî j ‚äî k) where
--   generator : X -> Term
--   node : (ùì∏ : ‚à£ S ‚à£) -> (ùíï : ‚ü¶ S ‚üß ùì∏ -> Term) -> Term
data Term : Set (i ‚äî j ‚äî k) where
  generator : X -> Term
  node : (ùì∏ : ‚à£ S ‚à£) -> (ùíï : ‚ü¶ S ‚üß ùì∏ -> Term) -> Term

open Term

map-Term : (Term -> Term) -> Term -> Term
map-Term f (generator x) = f (generator x)
map-Term f (node ùì∏ ùíï) = node ùì∏ (Œª i -> map-Term f (ùíï i))

----------------------------------
-- TERM ALGEBRA (for signature S)
----------------------------------

-- open Algebra
-- open Term

ùîâ : Algebra _ S
ùîâ = Term , node
--record { ‚ü¶_‚üß·µ§ = Term ; _‚ü¶_‚üß = node }
-------------------------------------
-- The UNIVERSAL PROPERTY of free

-- We first prove this for algebras whose carriers are mere sets.

-- 1. every h : X -> ‚ü¶ A ‚üß·µ§  lifts to a hom from free to A.
-- 2. the induced hom is unique.

-- PROOF.
-- 1.a. Every map  (X -> A)  "lifts".
--‚àÄ{‚Ñì : Level} 
--free-lift : {ùë® : Algebra  (i ‚äî j ‚äî k) S}
free-lift : ‚àÄ {l} {ùë® : Algebra l S}
  ->        (h : X -> ‚à£ ùë® ‚à£)
          -----------------------------------
  ->        ‚à£ ùîâ ‚à£ -> ‚à£ ùë® ‚à£
free-lift h (generator x) = h x
free-lift {ùë® = ùë®} h (node ùì∏ args) =
  (‚ü¶ ùë® ‚üß ùì∏) Œª{i -> free-lift {ùë® = ùë®} h (args i)}

-- 1.b. The lift is a hom.
--lift-hom : {ùë® : Algebra (i ‚äî j ‚äî k) S}
lift-hom : ‚àÄ {l} {ùë® : Algebra l S}
  ->       (h : X -> ‚à£ ùë® ‚à£)
          ------------------------------------
  ->       Hom ùîâ ùë®
lift-hom {ùë® = ùë®} h = free-lift {ùë® = ùë®} h , Œª ùì∏ ùíÇ ‚Üí cong (‚ü¶ ùë® ‚üß _) refl
--record { ‚ü¶_‚üß‚Çï = free-lift {A} h; homo = Œª args ‚Üí refl }

-- 2. The lift to  (free -> A)  is unique.
--    (We need EXTENSIONALITY for this (imported from util.agda))
free-unique : ‚àÄ {l} {ùë® : Algebra l S}
  ->    ( f g : Hom ùîâ ùë® )
  ->    ( ‚àÄ x  ->  ‚à£ f ‚à£ (generator x) ‚â° ‚à£ g ‚à£ (generator x) )
  ->    (t : Term)
       ---------------------------
  ->    ‚à£ f ‚à£ t ‚â° ‚à£ g ‚à£ t

free-unique f g p (generator x) = p x
free-unique {l} {ùë®} f g p (node ùì∏ args) =
   begin
     ( ‚à£ f ‚à£ )(node ùì∏ args)
   ‚â°‚ü® ‚ü¶ f ‚üß ùì∏ args ‚ü©
     (‚ü¶ ùë® ‚üß ùì∏) (Œª i -> ‚à£ f ‚à£ (args i))
   ‚â°‚ü® cong (‚ü¶ ùë® ‚üß _)
        (‚àÄ-extensionality-‚Ñì‚ÇÅ-‚Ñì‚ÇÇ {j} {l}
          ( Œª i -> free-unique {ùë® = ùë®} f g p (args i))
        )
    ‚ü©
     (‚ü¶ ùë® ‚üß ùì∏) (Œª i -> ‚à£ g ‚à£ (args i))
   ‚â°‚ü® sym (‚ü¶ g ‚üß ùì∏ args) ‚ü©
     ‚à£ g ‚à£ (node ùì∏ args)
   ‚àé

--SUGAR:  ùì∏ ÃÇ ùë®  ‚â°  ‚ü¶ ùë® ‚üß ùì∏   -------------------------------------
--Before proceding, we define some syntactic sugar that allows us
--to replace ‚ü¶ ùë® ‚üß ùì∏ with (the more standard-looking) ùì∏ ÃÇ ùë®.
_ÃÇ_ : ‚àÄ{‚Ñì‚ÇÅ : Level}
  ->  (ùì∏ : ‚à£ S ‚à£) ->  (ùë® : Algebra ‚Ñì‚ÇÅ S)
  ->  (‚ü¶ S ‚üß ùì∏ -> ‚à£ ùë® ‚à£) -> ‚à£ ùë® ‚à£
ùì∏ ÃÇ ùë® = Œª x ‚Üí (‚ü¶ ùë® ‚üß ùì∏) x
--We can now write ùì∏ ÃÇ ùë® for the interpretation of the basic
--operation ùì∏ in the algebra ùë®.  N.B. below, we will write
--   ùíï Ãá ùë®    for the interpretation of a TERM ùíï in ùë®.

----------------------------------------------------------------------
--INTERPRETATION OF TERMS
--------------------------
--(cf Def 4.31 of Bergman)
--Let ùíï : Term be a term, ùë® an algebra, in the signature S. We define an
--n-ary operation, denoted (ùíï Ãá ùë®), on ùë® by recursion on the struct of ùíï.
-- 1. if ùíï is the var x ‚àà X, ùíÇ : X -> ‚à£ ùë® ‚à£ a tuple from A, then (t Ãá ùë®) ùíÇ = ùíÇ x.
-- 2. if ùíï = ùì∏ args, ùì∏ ‚àà ‚à£ S ‚à£ an op symbol, args : ‚ü¶ S ‚üß ùì∏ -> Term a
--    (‚ü¶ S ‚üß ùì∏)-tuple of terms, ùíÇ : X -> ‚à£ A ‚à£ a tuple from A, then
--    (ùíï Ãá ùë®) ùíÇ = ((ùì∏ args) Ãá ùë®) ùíÇ = (ùì∏ ÃÇ ùë®) Œª{ i -> ((args i) Ãá ùë®) ùíÇ }
-- Here is how we implement this definition in Agda.

--Interpretation of a term.
_Ãá_ : {‚Ñì‚ÇÅ : Level} -> Term -> (ùë® : Algebra ‚Ñì‚ÇÅ S) -> (X -> ‚à£ ùë® ‚à£) -> ‚à£ ùë® ‚à£
((generator x)Ãá ùë®) ùíÇ = ùíÇ x
((node ùì∏ args)Ãá ùë®) ùíÇ = (ùì∏ ÃÇ ùë®) Œª{x -> (args x Ãá ùë®) ùíÇ }

-- Recall (cf. UAFST Thm 4.32)
-- Theorem 1.
-- Let A and B be algebras of type S. Then the following hold:
-- 1. For every n-ary term t and homomorphism g: A ‚Äî> B, 
--    g(t·¥¨(a‚ÇÅ,...,a‚Çô)) = t·¥Æ(g(a‚ÇÅ),...,g(a‚Çô)).
-- 2. For every term t ‚àà T(X) and every Œ∏ ‚àà Con(A), 
--    a Œ∏ b => t(a) Œ∏ t(b).
-- 3. For every subset Y of A,
--    Sg(Y) = {t(a‚ÇÅ,...,a‚Çô) : t ‚àà T(X‚Çô), n < œâ, a·µ¢ ‚àà Y, i ‚â§ n}.
-- PROOF.
-- 1. (homomorphisms commute with terms).
comm-hom-term : ‚àÄ {l m} ‚Üí (ùë® : Algebra l S) (ùë© : Algebra m S)
  ->            (g : Hom ùë® ùë©) -> (ùíï : Term)
  ->            (ùíÇ : X -> ‚à£ ùë® ‚à£)
              ----------------------------------------
  ->            ‚à£ g ‚à£ ((ùíï Ãá ùë®) ùíÇ) ‚â° (ùíï Ãá ùë©) (‚à£ g ‚à£ ‚àò ùíÇ)

comm-hom-term ùë® ùë© g (generator x) ùíÇ = refl
comm-hom-term {m = m} ùë® ùë© g (node ùì∏ args) ùíÇ =
  begin
    ‚à£ g ‚à£ ((ùì∏ ÃÇ ùë®)  (Œª i‚ÇÅ ‚Üí (args i‚ÇÅ Ãá ùë®) ùíÇ))
  ‚â°‚ü® ‚ü¶ g ‚üß ùì∏ ( Œª r ‚Üí (args r Ãá ùë®) ùíÇ ) ‚ü©
    (ùì∏ ÃÇ ùë©) ( Œª i‚ÇÅ ‚Üí  ‚à£ g ‚à£ ((args i‚ÇÅ Ãá ùë®) ùíÇ) )
    ‚â°‚ü® cong (_ ÃÇ ùë©) (( ‚àÄ-extensionality-‚Ñì‚ÇÅ-‚Ñì‚ÇÇ {j} {m}
                         (Œª i‚ÇÅ -> comm-hom-term ùë® ùë© g (args i‚ÇÅ) ùíÇ  )
                      ))
     ‚ü©
    (ùì∏ ÃÇ ùë©) ( Œª r -> (args r Ãá ùë©) (‚à£ g ‚à£ ‚àò ùíÇ) )
  ‚àé

--For 2 of Thm 1, we need congruences (see Congruence.agda).
-- 2. If t : Term, Œ∏ : Con A, then a Œ∏ b => t(a) Œ∏ t(b).
compatible-term : (ùë® : Algebra k S)
  ->              (ùíï : Term)
  ->              (Œ∏ : Con ùë®)
                 ------------------------------------
  ->              compatible-fun {i} {j} {k} {S} (ùíï Ãá ùë®) ‚à£ Œ∏ ‚à£
  -- wjd: I don't know why this ^^^^^^^^^^^^^^^^^ combination
  --      of implicit vars works... very weird.
compatible-term ùë® (generator x) Œ∏ p = p x
compatible-term ùë® (node ùì∏ args) Œ∏ p =
  ‚ü¶ ‚ü¶ Œ∏ ‚üß ‚üß ùì∏ Œª{ x -> (compatible-term ùë® (args x) Œ∏) p }

-- For proof of item (3), see `TermImageSub` in Subuniverse.agda.

------------------------------------------------------------------
_‚ä¢_‚âà_ : ‚àÄ {l} ‚Üí Algebra l S ‚Üí Term ‚Üí Term ‚Üí Set _
ùë® ‚ä¢ p ‚âà q = p Ãá ùë® ‚â° q Ãá ùë®

_‚ä¢_‚âã_ : ‚àÄ {l m} ‚Üí Pred (Algebra l S) m ‚Üí Term ‚Üí Term ‚Üí Set _
_‚ä¢_‚âã_ {l} K p q = {ùë® : Algebra l S} ‚Üí ùë® ‚àà K ‚Üí ùë® ‚ä¢ p ‚âà q

---------------------------------------------------------


  -- const : ‚à£ ùë® ‚à£ -> X -> ‚à£ ùë® ‚à£
  -- const a = Œª x -> a
-- module _  {S : Signature i j} {ùë® ùë© : Algebra k S}(X : Set k) where

--   _ForkTerm_ : {ùì∏ : ‚à£ S ‚à£ }-> (‚ü¶ S ‚üß ùì∏ -> Term) -> (‚ü¶ S ‚üß ùì∏ -> X -> ‚à£ ùë® ‚à£ )
--     ->          ‚ü¶ S ‚üß ùì∏ -> ‚à£ ùë® ‚à£
--   ùíï ForkTerm args = (Œª i -> ((ùíï i) Ãá ùë®) (args i))
  











-- ARITY OF A TERM
-- argsum : ‚Ñï -> (‚Ñï -> ‚Ñï) -> ‚Ñï
-- argsum nzero f = 0
-- argsum (succ n) f = f n + argsum n f
-- ‚ü®_‚ü©‚Çú : Term -> ‚Ñï
-- ‚ü® generator x ‚ü©‚Çú = 1
-- ‚ü® node ùì∏ args ‚ü©‚Çú = (S œÅ) ùì∏ + argsum ((S œÅ) ùì∏) (Œª i -> ‚ü® args i ‚ü©‚Çú)

