---
layout: default
title : Homomorphisms.Setoid module (Agda Universal Algebra Library)
date : 2021-07-03
author: [agda-algebras development team][]
---

### Homomorphisms of Algebras over Setoids

This is the [Homomorphisms.Setoid][] module of the [Agda Universal Algebra Library][].

\begin{code}

{-# OPTIONS --without-K --exact-split --safe #-}

open import Algebras.Basic using (­ЮЊъ ; ­ЮЊЦ ; Signature )

module Homomorphisms.Setoid {­ЮЉє : Signature ­ЮЊъ ­ЮЊЦ} where

-- Imports from the Agda (Builtin) and the Agda Standard Library
open import Agda.Builtin.Equality  using    ( _РЅА_    ;  refl     )
open import Agda.Primitive         using    ( _Ріћ_    ;  lsuc     )
                                   renaming ( Set    to Type     )
open import Data.Product           using    ( _,_    ;  ╬Б-syntax
                                            ; ╬Б      ;  _├Ќ_      )
                                   renaming ( projРѓЂ  to  fst
                                            ; projРѓѓ  to  snd     )
open import Function               using    ( _Рѕў_    ;  id       )
open import Level                  using    ( Level  ;  Lift     )
open import Relation.Binary                       using    ( IsEquivalence  )
open import Relation.Unary                        using    ( _Ріє_ )
import Relation.Binary.PropositionalEquality as PE

-- Imports from the Agda Universal Algebra Library
open import Overture.Preliminaries     using ( РѕБ_РѕБ ; РѕЦ_РѕЦ ; _РЂ╗┬╣ ; _РЅѕ_)
open import Overture.Inverses          using ( IsInjective ; IsSurjective )
open import Overture.Inverses          using ( SurjInv )
open import Relations.Discrete         using ( ker ; kernel )
open import Relations.Truncation       using ( is-set ; blk-uip ; is-embedding
                                             ; monic-is-embedding|Set )
open import Relations.Extensionality   using ( swelldef ; block-ext|uip ; pred-ext
                                             ; SurjInvIsRightInv ; epic-factor )
open import Algebras.Setoid   {­ЮЉє = ­ЮЉє}  using ( ­ЮЋї[_] ; SetoidAlgebra ; _╠ѓ_ ; Lift-SetoidAlg )
open import Congruences.Setoid {­ЮЉє = ­ЮЉє} using ( _РѕБРЅѕ_ ; Con ; IsCongruence ; _РЋ▒_)
\end{code}

### Homomorphisms for setoid algebras

\begin{code}

module _ {╬▒ ¤ЂрхЃ : Level} (­ЮЉе : SetoidAlgebra ╬▒ ¤ЂрхЃ)
         {╬▓ ¤ЂрхЄ : Level} (­ЮЉЕ : SetoidAlgebra ╬▓ ¤ЂрхЄ)
         where
 private
  A = ­ЮЋї[ ­ЮЉе ] -- (­ЮЋї = forgetful functor)
  B = ­ЮЋї[ ­ЮЉЕ ]

 compatible-op-map : РѕБ ­ЮЉє РѕБ Рєњ (A Рєњ B) Рєњ Type _
 compatible-op-map ­ЮЉЊ h = Рѕђ a Рєњ h ((­ЮЉЊ ╠ѓ ­ЮЉе) a) РЅА (­ЮЉЊ ╠ѓ ­ЮЉЕ) (h Рѕў a)

 -- The property of being a homomorphism.
 is-homomorphism : (A Рєњ B) Рєњ Type(­ЮЊъ Ріћ ­ЮЊЦ Ріћ ╬▒ Ріћ ╬▓)
 is-homomorphism h = Рѕђ ­ЮЉЊ  Рєњ  compatible-op-map ­ЮЉЊ h

 -- The type of homomorphisms from `­ЮЉе` to `­ЮЉЕ`.
 hom : Type(­ЮЊъ Ріћ ­ЮЊЦ Ріћ ╬▒ Ріћ ╬▓)
 hom = ╬Б (A Рєњ B) is-homomorphism

open PE.РЅА-Reasoning
open PE renaming (cong to РЅА-cong)

module _ {╬▒ ¤ЂрхЃ : Level} (­ЮЉе : SetoidAlgebra ╬▒ ¤ЂрхЃ)  -- (explicit ­ЮЉе)
         {╬▓ ¤ЂрхЄ : Level} {­ЮЉЕ : SetoidAlgebra ╬▓ ¤ЂрхЄ}  -- (implicit ­ЮЉЕ)
         {╬│ ¤ЂрХю : Level} (­ЮЉф : SetoidAlgebra ╬│ ¤ЂрХю)  -- (explicit ­ЮЉф)
         where
 private
  A = ­ЮЋї[ ­ЮЉе ]  -- carrier of domain of ­ЮЉе
  B = ­ЮЋї[ ­ЮЉЕ ]
  C = ­ЮЋї[ ­ЮЉф ]

 -- The composition of homomorphisms is again a homomorphism.
 Рѕў-is-hom : {g : A Рєњ B}{h : B Рєњ C}
  Рєњ         is-homomorphism ­ЮЉе ­ЮЉЕ g Рєњ is-homomorphism ­ЮЉЕ ­ЮЉф h
            -------------------------------------------------
  Рєњ         is-homomorphism ­ЮЉе ­ЮЉф (h Рѕў g)

 Рѕў-is-hom {g} {h} ghom hhom ­ЮЉЊ a = (h Рѕў g)((­ЮЉЊ ╠ѓ ­ЮЉе) a) РЅАРЪе РЅА-cong h ( ghom ­ЮЉЊ a ) РЪЕ
                                  h ((­ЮЉЊ ╠ѓ ­ЮЉЕ)(g Рѕў a)) РЅАРЪе hhom ­ЮЉЊ ( g Рѕў a ) РЪЕ
                                  (­ЮЉЊ ╠ѓ ­ЮЉф)(h Рѕў g Рѕў a) Рѕј

 Рѕў-hom : hom ­ЮЉе ­ЮЉЕ  Рєњ  hom ­ЮЉЕ ­ЮЉф  Рєњ  hom ­ЮЉе ­ЮЉф
 Рѕў-hom (g , ghom) (h , hhom) = h Рѕў g , Рѕў-is-hom {g}{h} ghom hhom 


private variable
 ╬▒ ¤Ђ : Level
 ­ЮЉе : SetoidAlgebra ╬▒ ¤Ђ

-- the identity homs
­ЮњЙ­Юњ╣ : hom ­ЮЉе ­ЮЉе
­ЮњЙ­Юњ╣ = id , ╬╗ ­ЮЉЊ a Рєњ refl

open Level
-- the lift hom
­ЮЊЂ­ЮњЙ­Юњ╗­ЮЊЅ : {╬▓ : Level} Рєњ hom ­ЮЉе (Lift-SetoidAlg ­ЮЉе ╬▓)
­ЮЊЂ­ЮњЙ­Юњ╗­ЮЊЅ = lift , (╬╗ ­ЮЉЊ a Рєњ refl)

-- the lower hom
­ЮЊЂРё┤­ЮЊїРё»­ЮЊЄ : {╬▓ : Level} Рєњ hom (Lift-SetoidAlg ­ЮЉе ╬▓) ­ЮЉе
­ЮЊЂРё┤­ЮЊїРё»­ЮЊЄ = (lower , ╬╗ ­ЮЉЊ a Рєњ refl)

module LiftSetoidHom {╬▒ ¤ЂрхЃ : Level}{­ЮЉе : SetoidAlgebra ╬▒ ¤ЂрхЃ}
                     (РёЊрхЃ : Level)
                     {╬▓ ¤ЂрхЄ : Level}{­ЮЉЕ : SetoidAlgebra ╬▓ ¤ЂрхЄ}
                     (РёЊрхЄ : Level)
                     where
 open Level

 Lift-hom : hom ­ЮЉе ­ЮЉЕ  Рєњ  hom (Lift-SetoidAlg ­ЮЉе РёЊрхЃ) (Lift-SetoidAlg ­ЮЉЕ РёЊрхЄ)

 Lift-hom (f , fhom) = lift Рѕў f Рѕў lower , Goal
  where
  lA lB : SetoidAlgebra _ _
  lA = Lift-SetoidAlg ­ЮЉе РёЊрхЃ
  lB = Lift-SetoidAlg ­ЮЉЕ РёЊрхЄ

  lABh : is-homomorphism lA ­ЮЉЕ (f Рѕў lower)
  lABh = Рѕў-is-hom lA {­ЮЉЕ = ­ЮЉе}  ­ЮЉЕ {lower}{f} (╬╗ _ _ Рєњ refl) fhom

  Goal : is-homomorphism lA lB (lift Рѕў (f Рѕў lower))
  Goal = Рѕў-is-hom lA {­ЮЉЕ = ­ЮЉЕ} lB {f Рѕў lower}{lift} lABh ╬╗ _ _ Рєњ refl


-- Monomorphisms and epimorphisms
module _ {╬▒ ¤ЂрхЃ : Level} (­ЮЉе : SetoidAlgebra ╬▒ ¤ЂрхЃ)
         {╬▓ ¤ЂрхЄ : Level} (­ЮЉЕ : SetoidAlgebra ╬▓ ¤ЂрхЄ)
         where

 private
  A = ­ЮЋї[ ­ЮЉе ]  -- carrier of domain of ­ЮЉе
  B = ­ЮЋї[ ­ЮЉЕ ]

 is-monomorphism : (A Рєњ B) Рєњ Type _
 is-monomorphism g = is-homomorphism ­ЮЉе ­ЮЉЕ g ├Ќ IsInjective g

 is-epimorphism : (A Рєњ B) Рєњ Type _
 is-epimorphism g = is-homomorphism ­ЮЉе ­ЮЉЕ g ├Ќ IsSurjective g

record mon {╬▒ ¤ЂрхЃ : Level} (­ЮЉе : SetoidAlgebra ╬▒ ¤ЂрхЃ)
           {╬▓ ¤ЂрхЄ : Level} (­ЮЉЕ : SetoidAlgebra ╬▓ ¤ЂрхЄ) : Type (­ЮЊъ Ріћ ­ЮЊЦ Ріћ ╬▒ Ріћ ╬▓) where
 field
  map : ­ЮЋї[ ­ЮЉе ] Рєњ ­ЮЋї[ ­ЮЉЕ ]
  is-mon : is-monomorphism ­ЮЉе ­ЮЉЕ map

 mon-to-hom : mon ­ЮЉе ­ЮЉЕ Рєњ hom ­ЮЉе ­ЮЉЕ
 mon-to-hom _ = map , РѕБ is-mon РѕБ


record epi {╬▒ ¤ЂрхЃ : Level} (­ЮЉе : SetoidAlgebra ╬▒ ¤ЂрхЃ)
           {╬▓ ¤ЂрхЄ : Level} (­ЮЉЕ : SetoidAlgebra ╬▓ ¤ЂрхЄ) : Type (­ЮЊъ Ріћ ­ЮЊЦ Ріћ ╬▒ Ріћ ╬▓) where
 field
  map : ­ЮЋї[ ­ЮЉе ] Рєњ ­ЮЋї[ ­ЮЉЕ ]
  is-epi : is-epimorphism ­ЮЉе ­ЮЉЕ map

 epi-to-hom : epi ­ЮЉе ­ЮЉЕ Рєњ hom ­ЮЉе ­ЮЉЕ
 epi-to-hom _ = map , РѕБ is-epi РѕБ


\end{code}



#### Kernels of homomorphisms for SetoidAlgebras

\begin{code}


module _ {╬▒ ¤ЂрхЃ : Level} (­ЮЉе : SetoidAlgebra ╬▒ ¤ЂрхЃ)
         {╬▓ ¤ЂрхЄ : Level} (­ЮЉЕ : SetoidAlgebra ╬▓ ¤ЂрхЄ)
         where
 private
  A = ­ЮЋї[ ­ЮЉе ]
  B = ­ЮЋї[ ­ЮЉЕ ]


 homker-comp : swelldef ­ЮЊЦ ╬▓ Рєњ (h : hom ­ЮЉе ­ЮЉЕ) Рєњ ­ЮЉе РѕБРЅѕ (ker РѕБ h РѕБ)
 homker-comp wd h f {u}{v} kuv = РѕБ h РѕБ((f ╠ѓ ­ЮЉе) u)   РЅАРЪе РѕЦ h РѕЦ f u РЪЕ
                                 (f ╠ѓ ­ЮЉЕ)(РѕБ h РѕБ Рѕў u) РЅАРЪе wd(f ╠ѓ ­ЮЉЕ)(РѕБ h РѕБ Рѕў u)(РѕБ h РѕБ Рѕў v)kuv РЪЕ
                                 (f ╠ѓ ­ЮЉЕ)(РѕБ h РѕБ Рѕў v) РЅАРЪе (РѕЦ h РѕЦ f v)РЂ╗┬╣ РЪЕ
                                 РѕБ h РѕБ((f ╠ѓ ­ЮЉе) v)   Рѕј

-- NOT WORKING YET
--  kercon : swelldef ­ЮЊЦ ╬▓ Рєњ hom ­ЮЉе ­ЮЉЕ Рєњ Con ­ЮЉе -- {╬▒}{╬▓}
--  kercon wd h = ker РѕБ h РѕБ , {!!} -- mkcon (ker-IsEquivalence РѕБ h РѕБ)(homker-comp wd {­ЮЉЕ} h)

--  kerquo : swelldef ­ЮЊЦ ╬▓ Рєњ hom ­ЮЉе ­ЮЉЕ Рєњ SetoidAlgebra _ _ -- (╬▒ Ріћ lsuc ╬▓) _
--  kerquo wd h = ­ЮЉе РЋ▒ (kercon wd h)


-- ker[_РЄњ_]_РєЙ_ : {╬▒ ¤ЂрхЃ : Level} (­ЮЉе : SetoidAlgebra ╬▒ ¤ЂрхЃ)
--               {╬▓ ¤ЂрхЄ : Level} (­ЮЉЕ : SetoidAlgebra ╬▓ ¤ЂрхЄ)
--  Рєњ            hom ­ЮЉе ­ЮЉЕ Рєњ swelldef ­ЮЊЦ ╬▓ Рєњ SetoidAlgebra _ _ --  (╬▒ Ріћ lsuc ╬▓) _
-- ker[ ­ЮЉе РЄњ ­ЮЉЕ ] h РєЙ wd = kerquo ­ЮЉе ­ЮЉЕ wd h

\end{code}






#### Homomorphism Decomposition for SetoidAlgebras


If `¤ё : hom ­ЮЉе ­ЮЉЕ`, `╬й : hom ­ЮЉе ­ЮЉф`, `╬й` is surjective, and `ker ╬й Ріє ker ¤ё`, then there exists `¤є : hom ­ЮЉф ­ЮЉЕ` such that `¤ё = ¤є Рѕў ╬й` so the following diagram commutes:

```
­ЮЉе --- ╬й ->> ­ЮЉф
 \         .
  \       .
   ¤ё     ¤є
    \   .
     \ .
      V
      ­ЮЉЕ
```

\begin{code}

module _ {╬▒ ¤ЂрхЃ : Level} {­ЮЉе : SetoidAlgebra ╬▒ ¤ЂрхЃ}
         {╬▓ ¤ЂрхЄ : Level} (­ЮЉЕ : SetoidAlgebra ╬▓ ¤ЂрхЄ)
         {╬│ ¤ЂрХю : Level} {­ЮЉф : SetoidAlgebra ╬│ ¤ЂрХю} where

 private
  A = ­ЮЋї[ ­ЮЉе ]
  B = ­ЮЋї[ ­ЮЉЕ ]
  C = ­ЮЋї[ ­ЮЉф ]

 open import Axiom.Extensionality.Propositional    using    ()
                                                  renaming (Extensionality to funext)

 HomFactor : swelldef ­ЮЊЦ ╬│
  Рєњ          (¤ё : hom ­ЮЉе ­ЮЉЕ)(╬й : hom ­ЮЉе ­ЮЉф)
  Рєњ          kernel РѕБ ╬й РѕБ Ріє kernel РѕБ ¤ё РѕБ Рєњ IsSurjective РѕБ ╬й РѕБ
             --------------------------------------------------
  Рєњ          ╬Б[ ¤є Рѕѕ (hom ­ЮЉф ­ЮЉЕ)] (РѕБ ¤ё РѕБ РЅѕ РѕБ ¤є РѕБ Рѕў РѕБ ╬й РѕБ)

 HomFactor wd ¤ё ╬й K╬й¤ё ╬йE = (¤є , ¤єIsHomCB)  , ¤ё¤є╬й
  where
  ╬йInv : C Рєњ A
  ╬йInv = SurjInv РѕБ ╬й РѕБ ╬йE

  ╬и : Рѕђ c Рєњ c РЅА РѕБ ╬й РѕБ (╬йInv c)
  ╬и c = sym (SurjInvIsRightInv РѕБ ╬й РѕБ ╬йE c)

  ¤є : C Рєњ B
  ¤є = РѕБ ¤ё РѕБ Рѕў ╬йInv

  ╬Й : Рѕђ a Рєњ kernel РѕБ ╬й РѕБ (a , ╬йInv (РѕБ ╬й РѕБ a))
  ╬Й a = ╬и (РѕБ ╬й РѕБ a)

  ¤ё¤є╬й : РѕБ ¤ё РѕБ РЅѕ ¤є Рѕў РѕБ ╬й РѕБ
  ¤ё¤є╬й x = K╬й¤ё (╬Й x)

  ¤єIsHomCB : Рѕђ ­ЮЉЊ c Рєњ ¤є ((­ЮЉЊ ╠ѓ ­ЮЉф) c) РЅА ((­ЮЉЊ ╠ѓ ­ЮЉЕ)(¤є Рѕў c))
  ¤єIsHomCB ­ЮЉЊ c =
   ¤є ((­ЮЉЊ ╠ѓ ­ЮЉф) c)                    РЅАРЪе РЅА-cong ¤є (wd (­ЮЉЊ ╠ѓ ­ЮЉф) c (РѕБ ╬й РѕБ Рѕў (╬йInv Рѕў c)) ╬╗ i Рєњ ╬и ((c i)))РЪЕ
   ¤є ((­ЮЉЊ ╠ѓ ­ЮЉф)(РѕБ ╬й РѕБ Рѕў(╬йInv Рѕў c)))   РЅАРЪе РЅА-cong ¤є (РѕЦ ╬й РѕЦ ­ЮЉЊ (╬йInv Рѕў c))РЂ╗┬╣ РЪЕ
   ¤є (РѕБ ╬й РѕБ((­ЮЉЊ ╠ѓ ­ЮЉе)(╬йInv Рѕў c)))     РЅАРЪе sym (¤ё¤є╬й ((­ЮЉЊ ╠ѓ ­ЮЉе)(╬йInv Рѕў c))) РЪЕ
   РѕБ ¤ё РѕБ((­ЮЉЊ ╠ѓ ­ЮЉе)(╬йInv Рѕў c))         РЅАРЪе РѕЦ ¤ё РѕЦ ­ЮЉЊ (╬йInv Рѕў c) РЪЕ
   (­ЮЉЊ ╠ѓ ­ЮЉЕ)(╬╗ x Рєњ РѕБ ¤ё РѕБ(╬йInv (c x))) Рѕј

\end{code}

If, in addition to the hypotheses of the last theorem, we assume ¤ё is epic, then so is ¤є. (Note that the proof also requires an additional local function extensionality postulate, `funext ╬▓ ╬▓`.)

\begin{code}

 open epi
 HomFactorEpi : swelldef ­ЮЊЦ ╬│
  Рєњ             (¤ё : hom ­ЮЉе ­ЮЉЕ)(╬й : hom ­ЮЉе ­ЮЉф)
  Рєњ             kernel РѕБ ╬й РѕБ Ріє kernel РѕБ ¤ё РѕБ
  Рєњ             IsSurjective РѕБ ╬й РѕБ Рєњ IsSurjective РѕБ ¤ё РѕБ
                ---------------------------------------------
  Рєњ             ╬Б[ ¤є Рѕѕ epi ­ЮЉф ­ЮЉЕ ] РѕБ ¤ё РѕБ РЅѕ (¤є .map) Рѕў РѕБ ╬й РѕБ

 HomFactorEpi wd ¤ё ╬й kerincl ╬йe ¤ёe = record { map = fst РѕБ ¤єF РѕБ
                                            ; is-epi = (snd РѕБ ¤єF РѕБ) , ¤єE
                                            } , РѕЦ ¤єF РѕЦ
  where
   ¤єF : ╬Б[ ¤є Рѕѕ hom ­ЮЉф ­ЮЉЕ ] РѕБ ¤ё РѕБ РЅѕ РѕБ ¤є РѕБ Рѕў РѕБ ╬й РѕБ
   ¤єF = HomFactor wd ¤ё ╬й kerincl ╬йe

   ¤є : C Рєњ B
   ¤є = РѕБ ¤ё РѕБ Рѕў (SurjInv РѕБ ╬й РѕБ ╬йe)

   ¤єE : IsSurjective ¤є
   ¤єE = epic-factor  РѕБ ¤ё РѕБ РѕБ ╬й РѕБ ¤є РѕЦ ¤єF РѕЦ ¤ёe

\end{code}

--------------------------------

[agda-algebras development team]: https://github.com/ualib/agda-algebras#the-agda-algebras-development-team

