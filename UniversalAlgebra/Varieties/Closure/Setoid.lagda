---
layout: default
title : Varieties.Closure.Setoid module (The Agda Universal Algebra Library)
date : 2021-01-14
author: [agda-algebras development team][]
---

### Closure Operators for Setoid Algebras

Fix a signature 𝑆, let 𝒦 be a class of 𝑆-algebras, and define

* H 𝒦 = algebras isomorphic to a homomorphic image of a members of 𝒦;
* S 𝒦 = algebras isomorphic to a subalgebra of a member of 𝒦;
* P 𝒦 = algebras isomorphic to a product of members of 𝒦.


\begin{code}

{-# OPTIONS --without-K --exact-split --safe #-}

open import Algebras.Basic using ( 𝓞 ; 𝓥 ; Signature )

module Varieties.Closure.Setoid {𝑆 : Signature 𝓞 𝓥} where

open import Axiom.Extensionality.Propositional renaming ( Extensionality to funext )
open import Agda.Primitive      using    ( _⊔_ ;  lsuc )
                                renaming ( Set to Type )
open import Data.Product        using    ( _,_ ; Σ-syntax )
                                renaming ( proj₁ to fst
                                         ; proj₂ to snd )
open import Level               using    ( Level ;  Lift )
open import Relation.Unary      using    ( Pred  ; _∈_ ; _⊆_ )


open import Overture.Preliminaries                  using ( ∣_∣ ; ∥_∥ )
open import Products.Setoid                  {𝑆 = 𝑆} using ( ⨅s )
open import Algebras.Setoid                         using ( SetoidAlgebra )
open import Homomorphisms.Isomorphisms      {𝑆 = 𝑆} using ( _≅_ ; ≅-sym ; Lift-≅
                                                          ; ≅-trans ; Lift-Alg-⨅≅
                                                          ; ≅-refl ; Lift-Alg-iso
                                                          ; Lift-Alg-associative )
-- open import Homomorphisms.Setoid {𝑆 = 𝑆} using ( HomImages ; _IsHomImageOf_
--                                                           ; Lift-Alg-hom-image )
-- open import Subalgebras.Subalgebras         {𝑆 = 𝑆} using (_≤_ ; ≤-iso ; ≤-refl
--                                                           ; ≤-TRANS-≅ ; ≤-trans
--                                                           ; _IsSubalgebraOfClass_
--                                                           ; Subalgebra ; Lift-≤-Lift )


module _ {α ρ : Level} where

 -- data H (𝒦 : Pred (SetoidAlgebra α ρ) _) : Pred (SetoidAlgebra α ρ) _
 --  where
 --  hbase : {𝑨 : SetoidAlgebra α ρ} → 𝑨 ∈ 𝒦 → 𝑨 ∈ H 𝒦
 --  hhimg : {𝑨 𝑩 : SetoidAlgebra α ρ} → 𝑨 ∈ H 𝒦 → ((𝑩 , _) : HomImages 𝑨) → 𝑩 ∈ H 𝒦

 -- data S (𝒦 : Pred(SetoidAlgebra α ρ)_) : Pred(SetoidAlgebra α ρ)_
 --  where
 --  sbase : {𝑨 : SetoidAlgebra α ρ} → 𝑨 ∈ 𝒦 → 𝑨 ∈ S 𝒦
 --  ssub  : {𝑨 : SetoidAlgebra α ρ}{𝑩 : SetoidAlgebra α ρ} → 𝑨 ∈ S 𝒦 → 𝑩 ≤ 𝑨 → 𝑩 ∈ S 𝒦
 --  siso  : {𝑨 : SetoidAlgebra α ρ}{𝑩 : SetoidAlgebra α ρ} → 𝑨 ∈ S 𝒦 → 𝑨 ≅ 𝑩 → 𝑩 ∈ S 𝒦

 data P (𝒦 : Pred(SetoidAlgebra α ρ)_) : Pred(SetoidAlgebra α ρ)_
  where
  pbase  : {𝑨 : SetoidAlgebra α ρ} → 𝑨 ∈ 𝒦 → 𝑨 ∈ P 𝒦
  pprod  : {ι : Level}{I : Type ι }{𝒜 : I → SetoidAlgebra α ρ} → (∀ i → (𝒜 i) ∈ P 𝒦) → ⨅s 𝒜 ∈ P 𝒦
  piso  : {𝑨 𝑩 : SetoidAlgebra α ρ} → 𝑨 ∈ P 𝒦 → 𝑨 ≅ 𝑩 → 𝑩 ∈ P 𝒦

 -- data V (𝒦 : Pred(SetoidAlgebra α ρ)_) : Pred(SetoidAlgebra α ρ)_
 --  where
 --  vbase  : {𝑨 : SetoidAlgebra α ρ} → 𝑨 ∈ 𝒦 → 𝑨 ∈ V 𝒦
 --  vhimg  : {𝑨 𝑩 : SetoidAlgebra α ρ} → 𝑨 ∈ V 𝒦 → ((𝑩 , _) : HomImages 𝑨) → 𝑩 ∈ V 𝒦
 --  vssub : {𝑨 𝑩 : SetoidAlgebra α ρ} → 𝑨 ∈ V 𝒦 → 𝑩 ≤ 𝑨 → 𝑩 ∈ V 𝒦
 --  vprod : {ι : Level} {I : Type ι}{𝒜 : I → SetoidAlgebra α ρ} → (∀ i → (𝒜 i) ∈ V 𝒦) → ⨅ 𝒜 ∈ V 𝒦
 --  viso  : {𝑨 : SetoidAlgebra α ρ}{𝑩 : SetoidAlgebra α ρ} → 𝑨 ∈ V 𝒦 → 𝑨 ≅ 𝑩 → 𝑩 ∈ V 𝒦

\end{code}

Thus, if 𝒦 is a class of 𝑆-algebras, then the **variety generated by** 𝒦 is denoted by `V 𝒦` and defined to be the smallest class that contains 𝒦 and is closed under `H`, `S`, and `P`.

With the closure operator V representing closure under HSP, we represent formally what it means to be a variety of algebras as follows.

\begin{code}

-- is-variety : {α ρ : Level}(𝒱 : Pred (SetoidAlgebra α ρ)_) → Type _
-- is-variety{α}{ρ} 𝒱 = V 𝒱 ⊆ 𝒱

-- variety : (α ρ : Level) → Type _
-- variety α ρ = Σ[ 𝒱 ∈ (Pred (SetoidAlgebra α ρ)_) ] is-variety 𝒱

\end{code}


--------------------------------------

{% include UALib.Links.md %}

--------------------------------------

[agda-algebras development team]: https://github.com/ualib/agda-algebras#the-agda-algebras-development-team









