-- Imports from Agda and the Agda Standard Library (organized by submodule)


\begin{code}
-- module Overture.Preliminaries where

open import Agda.Builtin.Equality                 using    ( _‚â°_      ;  refl   )
open import Function.Base                         using    ( _‚àò_      ;  id     )
open import Relation.Binary.PropositionalEquality using    ( sym      ;  trans  )
open import Data.Product                          using    ( _,_      ;   Œ£
                                                           ; Œ£-syntax ;   _√ó_   )
                                                  renaming ( proj‚ÇÅ    to  fst
                                                           ; proj‚ÇÇ    to  snd   )
open import Agda.Primitive                        using    ( _‚äî_                )
                                                  renaming ( Set      to  Type  )
open import Level                                 using    ( Level    ;   Lift
                                                           ; lift     ;   lower )
                                                  renaming ( suc      to  lsuc  )


-- module Overture.Inverses where

open import Agda.Builtin.Equality       using    ( _‚â°_ ; refl   )
open import Agda.Primitive              using    ( _‚äî_          )
                                        renaming ( Set  to Type )
open import Level                       renaming ( suc  to lsuc )
open import Data.Product                using    ( _,_ ; Œ£
                                                 ; Œ£-syntax     )
open import Function.Base               using    ( _‚àò_ ; id     )
import Function.Definitions as F  -- (for Injective)
open import Function.Bundles            using  ( _‚Ü£_ ; mk‚Ü£ )
open import Function.Construct.Identity using  ( id-‚Ü£      )


-- module Relations.Discrete where

open import Agda.Builtin.Equality using    ( _‚â°_ ; refl     )
open import Agda.Primitive        using    ( _‚äî_            )
                                  renaming ( Set  to Type
                                           ; Setœâ to Typeœâ  )
open import Level                 using    ( Level          )
                                  renaming ( suc  to lsuc
                                           ; zero to ‚Ñì‚ÇÄ     )
open import Relation.Binary.Core  using    ( _‚áí_ ; _=[_]‚áí_  )
                                  renaming ( REL  to BinREL ;
                                             Rel  to BinRel )
open import Relation.Unary        using    ( ‚àÖ; _‚àà_; Pred   )
open import Data.Product          using    ( _,_ ; _√ó_      )


-- module Relations.Continuous where

open import Agda.Primitive using (_‚äî_) renaming ( Set   to  Type
                                                ; Setœâ  to  Typeœâ )
open import Level                      renaming ( suc   to  lsuc
                                                ; zero  to  ‚Ñì‚ÇÄ )
open import Relations.Discrete using (Op)



-- module Relations.Quotients where

open import Agda.Builtin.Equality                 using    (_‚â°_  ; refl      )
open import Data.Product                          using    ( _,_ ; Œ£
                                                           ; Œ£-syntax        )
                                                  renaming ( proj‚ÇÅ to fst
                                                           ; proj‚ÇÇ to snd    )
open import Agda.Primitive                        using    ( _‚äî_             )
                                                  renaming ( Set   to Type
                                                           ; Setœâ  to Typeœâ  )
open import Level                                 renaming ( suc   to lsuc
                                                           ; zero  to ‚Ñì‚ÇÄ     )
open import Relation.Binary                       using    ( IsEquivalence   )
                                                  renaming ( Rel   to BinRel )
open import Relation.Binary.PropositionalEquality using    ( sym  ; trans    )
open import Relation.Unary                        using    ( Pred ; _‚äÜ_      )
open import Relations.Discrete                    using    ( ker             )





-- module Relations.Truncation where

open import Agda.Builtin.Equality                 using    ( _‚â°_      ;   refl     )
open import Data.Product                          using    ( _,_      ;   Œ£
                                                           ; Œ£-syntax ;   _√ó_      )
                                                  renaming ( proj‚ÇÅ    to  fst
                                                           ; proj‚ÇÇ    to  snd      )
open import Agda.Primitive                        using    ( _‚äî_                   )
                                                  renaming ( Set      to  Type     )
open import Level                                 renaming ( suc      to  lsuc     )
open import Function.Base                         using    ( _‚àò_      ;   id       )
open import Relation.Binary                       using    ( IsEquivalence         )
                                                  renaming ( Rel      to  BinRel   )
open import Relation.Binary.PropositionalEquality using    ( sym      ;   trans    )
open import Relation.Unary                        using    ( Pred     ;   _‚äÜ_      )
open import Relation.Binary.PropositionalEquality using    ( trans    ;   cong-app
                                                           ; module ‚â°-Reasoning    )


-- module Relations.Extensionality where

open import Axiom.Extensionality.Propositional    using    ()
                                                  renaming (Extensionality to funext)

open import Agda.Builtin.Equality                 using    (_‚â°_    ;  refl    )
open import Agda.Primitive                        using    ( _‚äî_              )
                                                  renaming ( Set   to Type    )
open import Data.Product                          using    ( _,_ ; Œ£-syntax ; Œ£ )
                                                  renaming ( proj‚ÇÅ to fst
                                                           ; proj‚ÇÇ to snd     )
open import Function.Base                         using    ( _‚àò_   ;  id      )
open import Level                                 renaming ( suc   to lsuc    )
open import Relation.Binary                       using    ( IsEquivalence    )
                                                  renaming ( Rel   to BinRel  )
open import Relation.Binary.PropositionalEquality using    ( sym   ;  cong-app
                                                           ; trans            )
open import Relation.Unary                        using    ( Pred  ; _‚äÜ_      )

open import Overture.Preliminaries using ( ùëñùëë ; _‚Åª¬π ; _‚àô_ ; transport )
open import Overture.Inverses      using ( IsSurjective ; SurjInv
                                         ; InvIsInv ; Image_‚àã_ ; eq  )
open import Relations.Discrete     using ( Op                        )
open import Relations.Quotients    using ( [_] ; /-subset
                                         ; /-supset ; IsBlock ; ‚ü™_‚ü´  )
open import Relations.Truncation   using ( blk-uip ; to-Œ£-‚â°          )



-- module Algebras.Basic where

open import Agda.Builtin.Bool
open import Agda.Builtin.Equality                 using    (_‚â°_    ;   refl     )
open import Agda.Primitive                        using    ( _‚äî_                )
                                                  renaming ( Set   to  Type     )
open import Data.Empty                            using    ( ‚ä•                  )
open import Data.Product                          using    ( _,_ ; Œ£-syntax ; Œ£ )
open import Level                                 renaming ( suc   to  lsuc
                                                           ; zero  to  lzero    )
open import Relation.Binary                       using    ( IsEquivalence      )
                                                  renaming ( Rel   to  BinRel   )


-- module Algebras.Products {ùìû ùì• : Level} (ùëÜ : Signature ùìû ùì•) where

open import Agda.Primitive                        using    ( _‚äî_              )
                                                  renaming ( Set   to Type    )
open import Data.Product                          using    ( _,_ ; Œ£ ; Œ£-syntax )
open import Relation.Unary                        using    ( Pred  ; _‚äÜ_ ; _‚àà_  )

open import Overture.Preliminaries using (_‚Åª¬π; ùëñùëë; ‚à£_‚à£; ‚à•_‚à•)



-- module Algebras.Congruences {ùìû ùì• : Level} (ùëÜ : Signature ùìû ùì•) where

open import Axiom.Extensionality.Propositional    renaming (Extensionality to funext)
open import Agda.Builtin.Equality                 using    ( _‚â°_      ; refl    )
open import Agda.Primitive                        using    ( _‚äî_                )
                                                  renaming ( Set      to  Type  )

open import Relation.Binary                       using    ( IsEquivalence      )
                                                  renaming ( Rel      to BinRel )

open import Data.Product                          using    ( _,_      ;   Œ£
                                                           ; Œ£-syntax ;   _√ó_   )
open import Relation.Binary.PropositionalEquality using    ( sym ; trans ; cong )




-- module Homomorphisms.Basic {ùìû ùì• : Level} (ùëÜ : Signature ùìû ùì•) where

open import Axiom.Extensionality.Propositional    using    ()
                                                  renaming (Extensionality to funext)

open import Agda.Builtin.Equality                 using    ( _‚â°_      ;   refl  )
open import Agda.Primitive                        using    ( _‚äî_      ;   lsuc  )
                                                  renaming ( Set      to  Type  )
open import Data.Product                          using    ( _,_      ;   Œ£
                                                           ; Œ£-syntax ;   _√ó_   )
                                                  renaming ( proj‚ÇÅ    to  fst
                                                           ; proj‚ÇÇ    to  snd   )
open import Function.Base                         using    ( _‚àò_      ;   id    )
open import Relation.Binary.PropositionalEquality using    ( trans    ;   cong
                                                           ; cong-app
                                                           ; module ‚â°-Reasoning )


-- module Homomorphisms.Noether {ùìû ùì• : Level} (ùëÜ : Signature ùìû ùì•) where

open import Axiom.Extensionality.Propositional    using    ()
                                                  renaming (Extensionality to funext)
open import Agda.Primitive                        using    ( _‚äî_      ;   lsuc  )
                                                  renaming ( Set      to  Type  )
open import Agda.Builtin.Equality                 using    ( _‚â°_      ;   refl  )
open import Data.Product                          using    ( _,_      ;   Œ£
                                                           ; Œ£-syntax ;   _√ó_   )
                                                  renaming ( proj‚ÇÅ    to  fst
                                                           ; proj‚ÇÇ    to  snd   )
open import Function.Base                         using    ( _‚àò_      ;   id    )
open import Relation.Binary                       using    ( IsEquivalence   )
open import Relation.Binary.PropositionalEquality using    ( trans    ;   cong
                                                           ; cong-app
                                                           ; module ‚â°-Reasoning )
open import Relation.Unary                        using    ( _‚äÜ_ )



-- module Homomorphisms.Isomorphisms {ùìû ùì• : Level} (ùëÜ : Signature ùìû ùì•)  where

open import Axiom.Extensionality.Propositional    renaming (Extensionality to funext )
open import Agda.Primitive                        using    ( _‚äî_    ;   lsuc      )
                                                  renaming ( Set    to  Type      )
open import Agda.Builtin.Equality                 using    ( _‚â°_    ;   refl      )
open import Data.Product                          using    ( _,_    ;   Œ£-syntax
                                                           ;  Œ£     ;   _√ó_       )
                                                  renaming ( proj‚ÇÅ  to  fst
                                                           ; proj‚ÇÇ  to  snd       )
open import Function.Base                         using    ( _‚àò_                  )
open import Relation.Binary.PropositionalEquality using    ( cong   ;   cong-app  )



-- module Homomorphisms.HomomorphicImages {ùìû ùì• : Level} (ùëÜ : Signature ùìû ùì•) where

open import Agda.Primitive        using    ( _‚äî_ ; lsuc )
                                  renaming ( Set to Type )
open import Agda.Builtin.Equality using    ( _‚â°_ ; refl )
open import Data.Product          using    ( _,_ ; Œ£-syntax ; Œ£ ; _√ó_ )
                                  renaming ( proj‚ÇÅ to fst
                                           ; proj‚ÇÇ to snd )
open import Relation.Binary.PropositionalEquality.Core
                                  using    ( cong ; cong-app ; module ‚â°-Reasoning )
open import Relation.Unary        using    ( Pred ; _‚àà_ )


-- module Terms.Basic {ùìû ùì• : Level} (ùëÜ : Signature ùìû ùì•) where

open import Axiom.Extensionality.Propositional renaming (Extensionality to funext)
open import Relation.Binary.PropositionalEquality using ( cong ; module ‚â°-Reasoning )

open import Agda.Primitive          using    ( _‚äî_ ;  lsuc )
                                    renaming ( Set to Type )
open import Agda.Builtin.Equality   using    ( _‚â°_ ;  refl )
open import Data.Product            using    ( _,_ ;  Œ£
                                             ; Œ£-syntax    )
open import Function.Base           using    ( _‚àò_         )


-- module Terms.Operations {ùìû ùì• : Level} (ùëÜ : Signature ùìû ùì•) where

open import Axiom.Extensionality.Propositional renaming (Extensionality to funext)
open import Relation.Binary.PropositionalEquality using ( cong ; module ‚â°-Reasoning )
open import Function.Base  using (_‚àò_)

open import Agda.Primitive          using    ( _‚äî_ ;  lsuc )
                                    renaming ( Set to Type )
open import Agda.Builtin.Equality   using    ( _‚â°_ ; refl )
open import Data.Product            using    ( _,_ ; Œ£-syntax ; Œ£ )


-- module Subalgebras.Subuniverses {ùìû ùì• : Level} {ùëÜ : Signature ùìû ùì•} where

open import Relation.Binary.PropositionalEquality using ( cong ; module ‚â°-Reasoning )
open import Axiom.Extensionality.Propositional renaming (Extensionality to funext)
open import Agda.Primitive          renaming ( Set to Type )
                                    using    ( _‚äî_ ; lsuc )
open import Agda.Builtin.Equality   using    ( _‚â°_ ; refl )
open import Function.Base           using    ( _‚àò_ )
open import Relation.Unary          using    ( Pred ; _‚àà_ ; _‚äÜ_ ; ‚ãÇ )


-- module Subalgebras.Subalgebras {ùìû ùì• : Level} (ùëÜ : Signature ùìû ùì•) where

open import Agda.Builtin.Equality      using    ( _‚â°_ ;  refl )
open import Agda.Primitive             using    ( _‚äî_ ;  lsuc )
                                       renaming ( Set to Type )
open import Data.Product               using    ( _,_ ; Œ£-syntax ; Œ£ ; _√ó_ )
                                       renaming ( proj‚ÇÅ to fst
                                                ; proj‚ÇÇ to snd )
open import Function.Base              using    ( _‚àò_ )
open import Function.Bundles           using    ( Injection )
open import
 Relation.Binary.PropositionalEquality using    ( cong ; module ‚â°-Reasoning )
open import Relation.Unary             using    ( _‚àà_ ; Pred ; _‚äÜ_ )


-- module Varieties.Basic {ùìû ùì• : Level} (ùëÜ : Signature ùìû ùì•) where

open import Agda.Builtin.Equality   using    ( _‚â°_ ;  refl )
open import Agda.Primitive          renaming ( Set to Type )
                                    using    ( _‚äî_ ;  lsuc )
open import Axiom.Extensionality.Propositional
                                    renaming ( Extensionality to funext )
open import Data.Product            using    ( _,_ ; Œ£-syntax ; Œ£ ; _√ó_ )
                                    renaming ( proj‚ÇÅ to fst
                                             ; proj‚ÇÇ to snd )
open import Function.Base           using    ( _‚àò_ )
open import Relation.Binary.PropositionalEquality
                                    using    ( cong ; cong-app
                                             ; module ‚â°-Reasoning)
open import Relation.Unary          using    ( Pred ; _‚àà_ ; _‚äÜ_ ; ‚ãÇ )



-- module Varieties.EquationalLogic {ùìû ùì• : Level} (ùëÜ : Signature ùìû ùì•) where

open import Axiom.Extensionality.Propositional renaming (Extensionality to funext)
open import Agda.Primitive          renaming ( Set to Type )
                                    using    ( _‚äî_ )
open import Agda.Builtin.Equality   using    ( _‚â°_ ; refl )
open import Data.Product            using    ( _,_ ; Œ£-syntax ; Œ£ ; _√ó_ )
                                    renaming ( proj‚ÇÅ to fst
                                             ; proj‚ÇÇ to snd )
open import Relation.Binary.PropositionalEquality
                                    using    ( cong ; cong-app ; module ‚â°-Reasoning )
open import Relation.Unary          using    ( _‚àà_ ; Pred ; _‚äÜ_ )


-- module Varieties.Preservation {Œ± ùìû ùì• : Level} (ùëÜ : Signature ùìû ùì•) where

open import Axiom.Extensionality.Propositional renaming (Extensionality to funext)
open import Agda.Builtin.Equality   using    ( _‚â°_ ; refl )
open import Agda.Primitive          renaming ( Set to Type )
                                    using    ( _‚äî_ )
open import Data.Product            using    ( _,_ ; Œ£-syntax ; Œ£ ; _√ó_ )
                                    renaming ( proj‚ÇÅ to fst
                                             ; proj‚ÇÇ to snd )
open import Data.Sum.Base           using    ( _‚äé_ )
open import Function.Base           using    ( _‚àò_ )
open import Relation.Binary.PropositionalEquality
                                    using    ( cong ; cong-app ; module ‚â°-Reasoning )
open import Relation.Unary          using    ( Pred ; _‚àà_ ; _‚äÜ_ ; ÔΩõ_ÔΩù ; _‚à™_ )


-- module Varieties.FreeAlgebras {Œ± ùìû ùì• : Level} (ùëÜ : Signature ùìû ùì•) where

open import Axiom.Extensionality.Propositional renaming (Extensionality to funext)
open import Agda.Builtin.Equality   using    ( _‚â°_ ; refl )
open import Agda.Primitive          renaming ( Set to Type )
                                    using    ( _‚äî_ )
open import Data.Product            using    ( _,_ ; Œ£-syntax ; Œ£ ; _√ó_ )
                                    renaming ( proj‚ÇÅ to fst
                                             ; proj‚ÇÇ to snd )
open import Function.Base           using    ( _‚àò_ )
open import Relation.Binary         using    ( IsEquivalence )
                                    renaming ( Rel to BinRel )
open import Relation.Binary.PropositionalEquality
                                    using    ( cong ; cong-app ; module ‚â°-Reasoning )
open import Relation.Unary          using    ( Pred ; _‚àà_ ; _‚äÜ_ ; ÔΩõ_ÔΩù ; _‚à™_ )


-- module Varieties.Closure.H {ùìû ùì• : Level} (ùëÜ : Signature ùìû ùì•) where

open import Agda.Primitive                    using ( _‚äî_ )
open import Data.Product                      using ( _,_ )
open import Relation.Unary                    using ( Pred ; _‚àà_ ; _‚äÜ_ )



-- module Varieties.Closure.S {ùìû ùì• : Level} (ùëÜ : Signature ùìû ùì•) where

open import Data.Product   using    ( _,_ )
                           renaming ( proj‚ÇÅ to fst
                                    ; proj‚ÇÇ to snd )
open import Relation.Unary using    ( Pred ; _‚àà_ ; _‚äÜ_ )



-- module Varieties.Closure.P {ùìû ùì• : Level} (ùëÜ : Signature ùìû ùì•) where

open import Agda.Primitive               using    ( _‚äî_ ;  lsuc )
                                         renaming ( Set to Type )
open import Data.Product                 using    ( _,_ )
open import Relation.Unary               using    ( Pred ; _‚àà_ ; _‚äÜ_ )


-- module Varieties.Closure.V {ùìû ùì• : Level} (ùëÜ : Signature ùìû ùì•) where

open import Axiom.Extensionality.Propositional renaming ( Extensionality to funext )
open import Agda.Primitive   using    ( _‚äî_ ;  lsuc )
                             renaming ( Set to Type )
open import Data.Product     using    ( _,_ ; Œ£-syntax )
open import Relation.Unary   using    ( Pred ; _‚àà_ ; _‚äÜ_)




\end{code}
