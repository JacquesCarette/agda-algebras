.. include:: _static/math_macros.rst

.. _inductively-defined-things:

=====================
Inductive Definitions
=====================

One of the primary motivations for the `lean-ualib`_ project was our observation that, on the one hand, many important constructs in universal algebra can be defined inductively, and on the other hand, type theory in general, and Lean in particular, offers excellent support for defining inductive types and powerful tactics for proving their properties.

These two facts suggest that there is much to be gained from implementing universal algebra in an expressive type system that offers powerful tools for proving theorems about inductively defined types. Examples demonstrating how this vision manifests in our Lean library are presented in :numref:`subalgebras-in-lean`, :numref:`terms-in-lean`, and :numref:`clones-in-lean`.

.. In particular, our Lean_ implementation of the notion of :term:`subuniverse` illustrates one of these underlying themes motivating our work.

To exhibit the efficiency and ease with which we can formalize and work with basic but important mathematical objects in Lean_, we will present some fundamental theorems about subalgebras, terms and clones---first in this chapter using the informal language of universal algebra, and then in the next chapter using the formal language of Lean.

The idea is to demonstrate the power and utility of implementing in a formal language **inductively defined types**, which are essential for expressing and working with infinite objects in a constructive and computable way, and for proving (by induction) properties of these objects.

.. index:: ! subuniverse, ! subalgebra

Subalgebras
-----------

The following is an inductive definition of the subuniverse generated by a set (cf. Theorem 1.14 of :cite:`Bergman:2012`).

.. _thm-1-14:

.. proof:theorem:: Subuniverse generation

   Let :math:`𝔸 = ⟨A, F^{𝔸}⟩`  be  an  algebra in the signature :math:`σ = (F, ρ)` and let :math:`X ⊆ A`.

   Define, by recursion on :math:`n`, the sets :math:`X_n` as follows:

   .. math:: X_0  &=  X \\
          X_{n+1} &=  X_n ∪ \{ f a  ∣ f ∈ F, \ a ∈ X_n^{ρf}\}.
      :label: subalgebra-inductive

   Then  :math:`\mathrm{Sg}^{𝔸}(X) = ⋃ X_n`.

   .. container:: toggle
 
      .. container:: header
 
         *Proof*.
      
      Let :math:`Y = ⋃_{n < ω} X_n`. Clearly :math:`X_n ⊆ Y ⊆ A`, for every :math:`n < ω`. In particular :math:`X = X_0 ⊆ Y`.

      Let us show that :math:`Y` is a subuniverse of 𝔸.
   
      Let :math:`f` be a basic :math:`k`-ary operation and :math:`a ∈ Y^k`.
    
      From the construction of :math:`Y`, there is an :math:`n < ω` such that :math:`∀ i,\ a,\ i ∈ X_n`.
    
      From its definition, :math:`f a ∈ X_{n+1} ⊆ Y`.
    
      Thus :math:`Y` is a subuniverse of 𝔸 containing :math:`X`.
    
      By :eq:`SgDef`, :math:`\mathrm{Sg}^{𝔸}(X) ⊆ Y`.
    
      For the opposite inclusion, it is enough to check, by induction on :math:`n`, that :math:`X_n ⊆ \mathrm{Sg}^{𝔸}(X)`.
    
      By definition, :math:`X_0 = X ⊆ \mathrm{Sg}^{𝔸}(X)`.
      
      Assume :math:`X_n ⊆ \mathrm{Sg}^𝔸(X)`.  We show :math:`X_{n+1} ⊆ \mathrm{Sg}^𝔸(X)`.
      
      If :math:`b ∈ X_{n+1} - X_n`, then :math:`b = f a` for a basic :math:`k`-ary operation :math:`f` and some :math:`a ∈ X_n^k`.
      
      But :math:`∀ i, \ a i ∈ \mathrm{Sg}^𝔸(X)` and since this latter object is a subuniverse, :math:`b ∈ \mathrm{Sg}^𝔸(X)` as well.
    
      Therefore, :math:`X_{n+1} ⊆ \mathrm{Sg}^𝔸(X)`, as desired.

The argument in the proof of :numref:`Theorem %s <thm-1-14>` is of a type that one encounters frequently throughout algebra. It has two parts.

  #. Some set :math:`Y` is shown to be a subuniverse of 𝔸 that contains :math:`X`.

  #. Every subuniverse containing :math:`X` is shown to contain :math:`Y` as well.

  #. One concludes that :math:`Y = \mathrm{Sg}^𝔸 (X)`.

-----------------------------------------------

.. index:: ! Taylor term, ! term

.. _terms:

Terms
-----

Fix a signature :math:`σ = (F, ρ)`, let :math:`X` be a set of **variables** and assume :math:`X ∩ F = ∅`.

For every :math:`n < ω`, let :math:`F_n = ρ^{-1} \{n\}` be the set of :math:`𝗇`-ary operation symbols.

By a **word** on :math:`X ∪ F` we mean a nonempty, finite sequence of members of :math:`X ∪ T`.

We denote the concatenation of sequences by simple juxtaposition. We define, by induction on :math:`n`, the sets :math:`T_n` of words on :math:`X ∪ F` by

.. math::      T_0 &= X ∪ F_0;\\
           T_{n+1} &= T_n ∪ \{ f s ∣ f ∈  F, \ s : ρf → T_n \}. 

Define the collection of **terms in the signature** σ **over** :math:`X` by :math:`T_σ(X) = ⋃_{n < ω}T_n`.

The definition of :math:`T_σ (X)` is recursive, indicating that *the set of terms in a signature can be implemented (e.g., in Lean) using an inductive type*.

We will confirm this in :numref:`inductively-defined-types`, but before doing so we impose an algebraic structure on :math:`T_σ (X)`, and then state and prove some basic but important facts about this algebra. These will be formalized in the next section, giving us another chance to compare informal language proofs to their formal Lean counterparts and to show off inductively defined types in Lean.

If :math:`w` is a term, let :math:`|w|` be the least :math:`n` such that :math:`w ∈ T_n`, called the *height* of :math:`w`. [4]_ The height is a useful index for recursion and induction.

Notice that :math:`T_σ (X)` is nonempty iff either :math:`X` or :math:`F_0` is nonempty. As long as :math:`T_σ (X)` is nonempty, we can impose upon it an algebraic structure, as follows:

For every basic operation symbol :math:`f ∈ F` let :math:`f^{𝕋_σ (X)}` be the operation on :math:`T_σ (X)` that maps each tuple :math:`a : ρ f → T_σ (X)` to the formal term :math:`f a`.

We define :math:`𝕋_σ (X)` to be the algebra with universe :math:`T_σ (X)` and with basic operations :math:`\{f^{𝕋_σ (X)} | f ∈ F\}`. [5]_

.. todo:: complete this section (include material on free algebras)

-----------------------------------------------

.. index:: ! clone
.. index:: ! clone of projections
.. index:: ! clone of polynomial operations
.. index:: ! clone of term operations

.. _clones:

Clones
------

An **operational clone** (or just **clone**) on a nonempty set :math:`A` is a set of operations on :math:`A` that contains the projection operations and is closed under general composition.

Let :math:`𝖢 A` denote the collection of all clones on :math:`A`.

The smallest clone on :math:`A` is the **clone of projections**, which we denote and define as follows:

.. math:: \operatorname{Proj} A = ⋃_{i < n < ω}  \{π^n_i : ∀ a ∈ A^n,\ π^n_i(a) = a(i)\}.

The **clone of term operations** of a σ-algebra 𝔸 is the smallest clone on :math:`A` containing the basic operations of 𝔸; this is
denoted and defined by

.. math:: \operatorname{Clo} 𝔸 = ⋂ \{ U ∈ 𝖢 A ∣ F^{𝔸} ⊆ U\}.

The set of :math:`n`-ary members of :math:`\operatorname{Clo} 𝔸` is sometimes denoted by :math:`\operatorname{Clo}_n 𝔸` (despite the fact that the latter is clearly not a clone).

The **clone of polynomial operations** (or **polynomial clone**) of a σ-algebra 𝔸 is denoted by :math:`\operatorname{Pol} 𝔸` and is defined to be the clone generated by the collection consisting of the basic operations of 𝔸 along with the **constants** on :math:`A`. [2]_

The set of :math:`n`-ary members of :math:`\operatorname{Pol} 𝔸` is sometimes denoted by :math:`\operatorname{Pol}_n 𝔸`. 

.. .. [9] Lean's built-in sigma type is defined as follows: :math:`structure sigma {α : Type u} (β : α → Type v) := mk :: (fst : α) (snd : β fst)`

We now state a theorem that shows how the clone of term operations of a signature can be defined inductively.

.. _thm-4-3:

.. proof:theorem::

   Let :math:`X` be a set and :math:`σ = (F, ρ)` a signature. Define

   .. math:: F_0 &= X;\\
         F_{n+1} &= F_n ∪ \{ f g ∣ f ∈ F, g : ρf → (F_n ∩ (ρ g → X)) \}, \quad n < ω.

   Then :math:`\mathrm{Clo}^X(F) = ⋃_n F_n`.

Thus *the clone of terms operations can be implemented (e.g., in Lean) as an inductive type*. The following theorem makes this precise (cf. Theorem 4.32 of :cite:`Bergman:2012`). 

.. _thm-4-32:

.. proof:theorem::

   Let 𝔸 and 𝔹 be algebras of signature :math:`σ`.

   #. If :math:`t ∈ T (X_ω)` and :math:`g : 𝔸 → 𝔹` is a homomorphism, then
      
      .. math:: g\, t^{𝔸}(a) = t^{𝔹}(g ∘ a), \quad  ∀ a : ρ t → A

   #. If :math:`t ∈ T (X_ω)`, :math:`θ ∈ \operatorname{Con}(𝔸)`, :math:`a : ρ t → A` and :math:`b : ρ t → A`, then
   
      .. math:: a \mathrel{θ} b \implies t^𝔸(a) \mathrel{θ} t^𝔸(b).

   #. If :math:`Y ⊆ A`, then

      .. math:: \operatorname{Sg}^𝔸(Y) = \{ t^𝔸 (a) : t ∈ T(X_n), a : ρ t → Y, i ≤ n < ω\}.

   .. container:: toggle
 
      .. container:: header
 
         *Proof*.
      
      The first statement is an easy induction on :math:`|t|`.

      The second statement follows from the first by taking :math:`𝔹 = 𝔸/θ` and 𝗀 the canonical homomorphism.
  
      For the third statement, again by induction on the height of :math:`t`, every subalgebra must be closed under the action of :math:`t^{𝔸}`. 
  
      Thus the right-hand side is contained in the left. On the other hand, the right-hand side is clearly a subalgebra containing the elements of :math:`Y` (take :math:`t = x_1`) from which the reverse inclusion follows.

.. For a nonempty set :math:`A`, we let :math:`𝖮_A` denote the set of all finitary operations on :math:`A`. That is, :math:`𝖮_A = ⋃_{n∈ ℕ} A^{A^n}` on :math:`A` is a subset of :math:`𝖮_A` that contains all projection operations and is closed under the (partial) operation of :ref:`general composition <general-composition>`.

.. If :math:`𝔸 = ⟨ A, F^𝔸 ⟩` denotes the algebra with universe :math:`A` and set of basic operations :math:`F`, then :math:`\operatorname{Clo} (𝔸)` denotes the clone generated by :math:`F`, which is also known as the **clone of term operations** of :math:`𝔸`.

.. proof:example::

   We will discuss varieties in more detail later, but for now a variety is a collection of algebras of the same signature that is defined by a certain set of identities. [3]_ 
   
   In 1977, Walter Taylor showed in :cite:`Taylor:1977` that a variety :math:`𝕍` satisfies some nontrivial idempotent Malcev condition if and only if it satisfies one of the following form: for some :math:`n`, 𝕍 has an idempotent :math:`n`-ary term  :math:`t` such that for each :math:`i < n` there is an identity of the form 

   .. math:: t(∗, \cdots, ∗, x, ∗, \cdots, ∗) ≈ t(∗, \cdots, ∗, y, ∗, \cdots, ∗)

   true in 𝕍 where distinct variables :math:`x` and :math:`y` appear in the :math:`i`-th position on each side of the identity. Such a term :math:`t` now goes by the name **Taylor term**.

-----------------------------------------------

.. _basic-facts:

Basic Facts
-----------

Throughout this section,

+ :math:`𝔸 = ⟨A, F^𝔸⟩, \ 𝔹 = ⟨B, F^𝔹⟩, \ ℂ = ⟨C, F^ℂ⟩\ ` are algebras of the same signature :math:`σ = (F, ρ)`, and

+ :math:`g, h : \hom(𝔸, 𝔹)` are homomorphism from 𝔸 to 𝔹;

.. index:: ! equalizer

The **equalizer** of :math:`g` and :math:`h` is the set

.. math:: 𝖤(g,h) = \{ a : A ∣ g(a) = h(a) \}.

Here is a list of basic observations that we will need later. We will reference the first observation in the list as :ref:`Obs 1 <obs-one>`, etc. [6]_

.. _obs-one:

.. proof:observation::

   :math:`𝖤(g,h)` is a subuniverse of 𝔸.

   .. container:: toggle
 
      .. container:: header
 
         *Proof.*

      Fix arbitrary :math:`f ∈ F` and :math:`a : ρf → 𝖤(g,h)`.

      We show that :math:`g (f^𝔸 ∘ a) = h (f^𝔸 ∘ a)`, as this shows that :math:`𝖤(g, h)` is closed under the operation :math:`f^𝔸` of :math:`𝔸`.

      But this is trivial since, by definition of homomorphism, we have

      .. math:: (g ∘ f^𝔸)(ι_i a) = (f^𝔹 ∘ F g)(ι_i a) = (f^𝔹 ∘ F h)(ι_i a) = (h ∘ f^𝔸)(ι_i a).

.. _obs-two:

.. proof:observation::

   If the set :math:`X ⊆ A` generates 𝔸 and :math:`g|_X = h|_X`, then :math:`g = h`.

   .. container:: toggle
    
      .. container:: header
  
         *Proof*.

      Suppose the subset :math:`X ⊆ A` generates :math:`⟨A, f^𝔸⟩` and suppose :math:`g|_X = h|_X`.
 
      Fix an arbitrary :math:`a : A`. We show :math:`g(a) = h(a)`.
 
      Since :math:`X` generates 𝔸, there exists a term :math:`t` and a tuple :math:`x : ρt → X` of generators such that :math:`a = t^𝔸 x`.
 
      Therefore, since :math:`F g = F h` on :math:`X`, we have
    
      .. math:: g(a) = g(tᴬ x) = (tᴮ ∘ F g)(x) = (tᴮ ∘ F h)(x) = h(tᴬ x) = h(a).

.. _obs-three:

.. proof:observation::

   If :math:`A, B` are finite and :math:`X` generates 𝔸, then :math:`|\hom(𝔸, 𝔹)| ≤ |B|^{|X|}`.

   .. container:: toggle
    
      .. container:: header
    
         *Proof*.

      By :ref:`Obs 2 <obs-two>`, a homomorphism is uniquely determined by its restriction to a generating set.

      If :math:`X` generates 𝔸, then since there are exactly :math:`|B|^{|X|}` functions from :math:`X` to :math:`B` we have :math:`|\hom(𝔸, 𝔹)| ≤ |B|^{|X|}`.
    
.. _obs-four:

.. proof:observation::

   If :math:`g : \epi (𝔸, 𝔹)` and :math:`h : \hom (𝔸, ℂ)` satisfy :math:`\ker g ⊆ \ker h`, then

   .. math:: ∃ k ∈ \hom(𝔹, ℂ)\ . \ h = k ∘ g.
    
   .. container:: toggle
    
      .. container:: header
    
         *Proof*.

      We define :math:`k ∈ \hom(𝔹, ℂ)` constructively, as follows:

      Fix :math:`b : B`.

      Since :math:`g` is surjective, the set :math:`g^{-1}\{b\} ⊆ A` is nonempty, and since :math:`\ker g ⊆ \ker h`, we see that every element of :math:`g^{-1}\{b\}` is mapped by :math:`h` to a single element of :math:`C`.

      Label this element :math:`c_b`. That is, :math:`h(a) = c_b`, for all :math:`a : g^{-1}\{b\}`.
   
      We define :math:`k(b) = c_b`. Since :math:`b` was arbitrary, :math:`k` is defined on all of :math:`B` in this way.
   
      Now it's easy to see that :math:`k g = h` by construction.
   
      Indeed, for each :math:`a ∈ A`, we have :math:`a ∈ g^{-1}\{g(a)\}`, so :math:`k(g(a)) = h(a)` by definition.
   
      To see that :math:`k` is a homomorphism, let there be :math:`m` operation symbols and let :math:`0≤ i< m` be arbitrary.
   
      Fix :math:`b : \underline{k_i} → B`.
   
      Since :math:`g` is surjective, for each :math:`i : \underline{k_i}`, the subset :math:`g^{-1}\{b(i)\}⊆ A` is nonempty and is mapped by :math:`h` to a single point of :math:`C` (since :math:`\ker g ⊆ \ker h`.
   
      Label this point :math:`c_i` and define :math:`c : \underline{k_i} → C` by :math:`c(i) = c_i`.
   
      We want to show :math:`(f^C ∘ F k) (b) = (k ∘ f^B)(b).`
   
      The left hand side is :math:`f^C c`, which is equal to :math:`(h ∘ fᴬ)(a)` for some :math:`a : \underline{k_i} → A`, since :math:`h` is a homomorphism.
   
      Therefore,
   
      .. math:: (f^C ∘ F k) (b) = (h ∘ f^A) (a) = (k ∘ g ∘ f^A)(a) = (k ∘ f^B ∘ F g)(a) = (k ∘ f^B)(b).

.. _obs-five:

.. proof:observation::

   Let :math:`σ = (F, ρ)` be a signature each :math:`f ∈ F` an :math:`ρf`-ary operation symbol.
 
   Define :math:`F_0 := \operatorname{Proj}(A)` and for all :math:`n > 0` in :math:`ω` let
 
   .. math:: F_{n+1} := F_n ∪ \{ f g ∣ f ∈ F, g : ρf → (F_n ∩ (ρg → A)) \}.
 
   Then :math:`\mathrm{Clo}^{𝔸}(F) = ⋃_n F_n`.
 
.. _obs-six:

.. proof:observation::

   Let :math:`f` be a similarity type.
 
   (a) :math:`𝕋_ρ (X)` is generated by :math:`X`.
 
   (b) For every algebra :math:`𝔸 = ⟨A, F⟩` of type :math:`ρ` and every function :math:`h : X → A` there is a unique homomorphism :math:`g : 𝕋_ρ (X) → ⟨A, fᴬ⟩` such that :math:`g|_X = h`.
 
   .. container:: toggle
    
      .. container:: header
     
         *Proof*.
     
      The definition of :math:`𝕋_ρ (X)` exactly parallels the construction in :numref:`Theorem %s <thm-1-14>`. That accounts for the first item.
     
      For b, define :math:`g(t)` by induction on :math:`|t|`.
     
      Suppose :math:`|t| = 0`.  Then :math:`t ∈ X ∪ \mathcal F_0`.
     
      If :math:`t ∈ X` then define :math:`g(t) = h(t)`. For :math:`t ∈ \mathcal F_0`, :math:`g(t) = t^{𝔸}`.
     
      Note that since :math:`𝔸 = ⟨A, fᴬ⟩` is an algebra of type :math:`f` and :math:`t` is a nullary operation symbol, :math:`t^{𝔸}` is defined.
     
      For the inductive step, let :math:`|t| = n + 1`. Then :math:`t = f(s_1, \dots, s_k)` for some :math:`f ∈ \mathcal F_k` and :math:`s_1, \dots, s_k` each of height at most :math:`n`. We define :math:`g(t) = f^{𝔸}(g(s_1), \dots, g(s_k))`.
     
      By its very definition, :math:`g` is a homomorphism. Finally, the uniqueness of :math:`g` follows from :numref:`Obs %s <obs-two>`.
 
.. _obs-seven:

.. proof:observation::

   Let :math:`𝔸 = ⟨A, f^{𝔸}⟩` and :math:`𝔹 = ⟨B, f^{𝔹}⟩` be algebras of type :math:`ρ`.
 
    (a) For every :math:`n`-ary term :math:`t` and homomorphism :math:`g : 𝔸 → 𝔹`, :math:`g(t^{𝔸}(a_1,\dots, a_n)) = t^{𝔹}(g(a_1),\dots, g(a_n))`.

    (b) For every term :math:`t ∈ T_ρ(X_ω)` and every :math:`θ ∈ \mathrm{Con}⟨A, fᴬ⟩`, :math:`𝔸 ≡_θ 𝔹` implies :math:`t^{𝔸}(𝔸) ≡_θ t^{𝔸}(𝔹)`.

    (c) For every subset :math:`Y` of :math:`A`,

        .. math:: \Sg^{𝔸}(Y) = \{ t^{𝔸}(a_1, \dots, a_n) : t ∈ Tᵨ (X_n), a_i ∈ Y, i ≤ n < ω\}.

   .. container:: toggle
    
      .. container:: header
    
        *Proof*.
    
      The first statement is an easy induction on :math:`|t|`.
    
      The second statement follows from the first by taking :math:`⟨B, f^{𝔹}⟩ = ⟨A, f^{𝔸}⟩/θ` and :math:`g` the canonical homomorphism.
    
      For the third statement, again by induction on the height of :math:`t`, every subalgebra must be closed under the action of :math:`t^{𝔸}`.
    
      Thus the right-hand side is contained in the left. On the other hand, the right-hand side is clearly a subalgebra containing the elements of :math:`Y` (take :math:`t = x_1`) from which the reverse inclusion follows.



------------------------

.. rubric:: Footnotes

.. [2]
   By "the constants on :math:`A`" we mean the **constant operations**; i.e., functions :math:`f: A → A` such that :math:`∀ a ∈ A, f(a) = c`, for some :math:`c ∈ A`.

.. [3]
   We will also have much to say about Malcev conditions, but for now we ask the reader to trust us when we say that such conditions play an important role in many deep results in universal algebra.

.. [4]
   The **height** of a type is simply type's *level* (see Section ???) and the syntax ``Type*`` indicates that we do not wish to commit in advance to a specific height.

.. [5]
   The construction of :math:`𝕋_ρ (X)` may seem to be making something out of nothing, but it plays a crucial role in the theory.

.. [6]
   To see the proofs, click the black triangles.

.. _Agda: https://wiki.portal.chalmers.se/agda/pmwiki.php

.. _Coq: http://coq.inria.fr

.. _NuPRL: http://www.nuprl.org/

.. _Lean: https://leanprover.github.io/

.. _Logic and Proof: https://leanprover.github.io/logic_and_proof/

.. _lean-ualib: https://github.com/UniversalAlgebra/lean-ualib/

.. _mathlib: https://github.com/leanprover-community/mathlib/

.. _Lean Standard Library: https://github.com/leanprover/lean

.. _lattice.lean: https://github.com/leanprover-community/mathlib/blob/master/src/data/set/lattice.lean

.. _basic.lean: https://github.com/leanprover-community/mathlib/blob/master/src/data/set/basic.lean

.. _set.lean: https://github.com/leanprover/lean/blob/master/library/init/data/set.lean

.. _2015 post by Floris van Doorn: https://homotopytypetheory.org/2015/12/02/the-proof-assistant-lean/

