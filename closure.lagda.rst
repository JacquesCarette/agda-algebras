.. FILE: closure.lagda.rst
.. AUTHOR: William DeMeo and Siva Somayyajula
.. DATE: 2 Jul 2020

===========================
Equational Logic in Agda
===========================

Closure operators
-----------------

Fix a signature 𝑆.

Let 𝒦 be a class of 𝑆-algebras. Define

  * H(𝒦) = homomorphic images of members of 𝒦;
  * S(𝒦) = algebras isomorphic to a subalgebra of a member of 𝒦;
  * P(𝒦) = algebras isomorphic to a direct product of members of 𝒦.

As a straight-forward verification confirms, H, S, and P are closure operators. A class 𝒦 of 𝑆-algebras is said to be *closed under the formation of homomorphic images* if H(𝒦) ⊆ 𝒦. Similarly, 𝒦 is *closed under the formation of subalgebras* (resp., *products*) provided S(𝒦) ⊆ 𝒦 (resp., P(𝒦) ⊆ 𝒦).

An algebra is a homomorphic image (resp., subalgebra; resp., product) of every algebra to which it is isomorphic. Thus, the class H(𝒦) (resp., S(𝒦); resp., P(𝒦)) is closed under isomorphism.

The operators H, S, and P can be composed with one another repeatedly, forming yet more closure operators. If C₁ and C₂ are closure operators on classes of structures, let us say that C₁ ≤ C₂ if for every class 𝒦 we have C₁(𝒦) ⊆ C₂(𝒦).

.. _lem 3.41:

.. proof:lemma:: Lem. 3.41 of :cite:`Bergman:2012`

   SH ≤ HS, PS ≤ SP.

   .. container:: toggle

      .. container:: header

         *Proof*.

      Let C ∈ SH(𝒦). Then C ≤ B for some B ∈ H(A), where A ∈ 𝒦.  Let θ be such that B ≅ A/θ.  Then C is isomorphic to a subalgebra, say, T, of A/θ.  By the correspondence theorem, there is a subalgebra S ≤ A such that S/θ = T.  Thus, C ∈ HS(A) ⊆ HS(𝒦), as desired.

      Let C ∈ PS(𝒦). Then C = Π Bᵢ for some Bᵢ ≤ Aᵢ ∈ 𝒦. Clearly, C = Π Bᵢ ≤ Π Aᵢ, so C ∈ SP(𝒦), as desired. ∎

---------------------------------------------

Varieties
-------------

A class 𝒦 of 𝑆-algebras is called a **variety** if it is closed under each of the closure operators H, S, and P introduced above; the corresponding closure operator is often denoted 𝕍. Thus, if 𝒦 is a class of similar algebras, then the **variety generated by** 𝒦 is denoted by 𝕍(𝒦) and defined to be the smallest class that contains 𝒦 and is closed under H, S, and P.

.. The class of all varieties of 𝑆-algebras is ordered by inclusion, and closed under arbitrary intersection; thus, the class of varieties is a complete lattice.

We would like to know how to construct 𝕍(𝒦) directly from 𝒦, but it's not immediately obvious how many times we would have to apply the operators H, S, P before the result stabilizes to form a variety---the **variety generated by** 𝒦.  Fortunately, Garrett Birkhoff proved that if we apply the operators in the correct order, then it suffices to apply each one only once.

.. proof:theorem:: Thm 3.43 of :cite:`Bergman:2012`

   𝕍 = HSP.

   .. container:: toggle

      .. container:: header

         *Proof*.

      Let 𝒦 be a class of algebras. To see that HSP(𝒦) is a variety, we use :numref:`Lemma %s <lem 3.41>` to compute H(HSP) = HSP, S(HSP) ≤ HS²P = HSP, P(HSP) ≤ HSP² = HSP. Thus HSP ≥ 𝕍.

      On the other hand, HSP(𝒦) ⊆ HSP(𝕍(𝒦)) = 𝕍(𝒦) so HSP ≤ 𝕍.

---------------------------------------------------

Equational classes
---------------------

In his treatment of Birhoff's HSP theorem, Cliff Bergman (at the start of Section 4.4 of his universal algebra textbook :cite:`Bergman:2012`) proclaims, "Now, finally, we can formalize the idea we have been using since the first page of this text."  He then proceeds to define **identities of terms** as follows (paraphrasing for notational consistency):

Let 𝑆 be a signature.  An **identity** or **equation** in 𝑆 is an ordered pair of terms, written 𝑝 ≈ 𝑞, from the term algebra 𝔉. If A is an 𝑆-algebra we say that A **satisfies** 𝑝 ≈ 𝑞 if 𝑝 ̇ A ≡ 𝑞 ̇ A.  In this  situation,  we  write A ⊧ 𝑝 ≈ 𝑞.

If 𝒦 is a class of 𝑆-algebras, we write 𝒦 ⊧ 𝑝 ≋ 𝑞 if, for every A ∈ 𝒦, A ⊧ 𝑝 ≈ 𝑞. Finally, if 𝓔 is a set of equations, we write 𝒦 ⊧ 𝓔 if every member of 𝒦 satisfies every member of 𝓔.

We formalize these notions in Agda in the ``closure`` module, which begins as follows.

::

  {-# OPTIONS --without-K --exact-split --safe #-}

  open import prelude

  open import basic using (Signature; Algebra; Π'; Op; _̂_)

  open import subuniverses using (Subuniverses; Subalgebra)

  open import homomorphisms using (hom; is-homomorphism; HomImagesOf)

  open import terms using (Term; generator; node; _̇_; interp-prod2;
   interp-prod; comm-hom-term)

  module closure
   {S : Signature 𝓞 𝓥}
   {𝓤 : Universe}
   {ua : Univalence}
   {X : 𝓤 ̇ }
   {gfe : global-dfunext}
   {dfe : dfunext 𝓤 𝓤} where

  _⊧_≈_ : Algebra 𝓤 S
    →      Term{X = X} → Term → 𝓤 ̇

  𝑨 ⊧ p ≈ q = (p ̇ 𝑨) ≡ (q ̇ 𝑨)

  _⊧_≋_ : Pred (Algebra 𝓤 S) 𝓦
   →      Term{X = X} → Term → 𝓞 ⊔ 𝓥 ⊔ 𝓦 ⊔ 𝓤 ⁺ ̇

  _⊧_≋_ 𝒦 p q = {𝑨 : Algebra _ S} → 𝒦 𝑨 → 𝑨 ⊧ p ≈ q

--------------------------------

Closure data types
-------------------------

::

  data PClo (𝒦 : Pred (Algebra 𝓤 S)(𝓤 ⁺)) : Pred (Algebra 𝓤 S) (𝓞 ⊔ 𝓥 ⊔ 𝓤 ⁺ ⁺ ) where
   pbase : {𝑨 : Algebra 𝓤 S} → 𝑨 ∈ 𝒦 → 𝑨 ∈ PClo 𝒦
   prod : {I : 𝓤 ̇ }{𝒜 : I → Algebra _ S}
    →     (∀ i → 𝒜 i ∈ PClo 𝒦)
    →     Π' 𝒜 ∈ PClo 𝒦

  -- Subalgebra Closure
  data SClo (𝒦 : Pred (Algebra 𝓤 S) (𝓤 ⁺)) : Pred (Algebra 𝓤 S) (𝓞 ⊔ 𝓥 ⊔ 𝓤 ⁺ ⁺ ) where
   sbase : {𝑨 :  Algebra _ S} → 𝑨 ∈ 𝒦 → 𝑨 ∈ SClo 𝒦
   sub : {𝑨 : Algebra _ S} → 𝑨 ∈ SClo 𝒦 → (sa : Subalgebra {𝑨 = 𝑨} ua) → ∣ sa ∣ ∈ SClo 𝒦

  -- Homomorphic Image Closure
  data HClo (𝒦 : Pred (Algebra 𝓤 S)(𝓤 ⁺)) : Pred (Algebra 𝓤 S) (𝓞 ⊔ 𝓥 ⊔ 𝓤 ⁺ ⁺ ) where
   hbase : {𝑨 : Algebra 𝓤 S} → 𝑨 ∈ 𝒦 → 𝑨 ∈ HClo 𝒦
   hhom : {𝑨 : Algebra 𝓤 S} → 𝑨 ∈ HClo 𝒦 → ((𝑩 , _ ) : HomImagesOf 𝑨) → 𝑩 ∈ HClo 𝒦

  -- Variety Closure
  data VClo (𝒦 : Pred (Algebra 𝓤 S) (𝓤 ⁺)) : Pred (Algebra 𝓤 S)(𝓞 ⊔ 𝓥 ⊔ 𝓤 ⁺ ⁺ ) where
   vbase : {𝑨 : Algebra 𝓤 S} → 𝑨 ∈ 𝒦 → 𝑨 ∈ VClo 𝒦
   vprod : {I : 𝓤 ̇ }{𝒜 : I → Algebra _ S} → (∀ i → 𝒜 i ∈ VClo 𝒦) → Π' 𝒜 ∈ VClo 𝒦
   vsub : {𝑨 : Algebra 𝓤 S} → 𝑨 ∈ VClo 𝒦 → (sa : Subalgebra {𝑨 = 𝑨} ua) → ∣ sa ∣ ∈ VClo 𝒦
   vhom : {𝑨 : Algebra 𝓤 S} → 𝑨 ∈ VClo 𝒦 → ((𝑩 , _ , _) : HomImagesOf 𝑨) → 𝑩 ∈ VClo 𝒦

---------------------------------------------

Identity preservation
----------------------

Identities are compatible with the formation of subalgebras, homomorphic images and products. More precisely,
for every class 𝒦 of structures, each of the classes S(𝒦), H(𝒦), P(𝒦), 𝕍(𝒦) satisfies the same set of identities as does 𝒦.

We formalize the notion of closure under the taking of homomorphic images in the `morphisms` module.  Here we will formalize closure under the taking of products and subuniverses, and prove that these closures preserve identities.


.. _obs 13 in agda:

Identities in products
~~~~~~~~~~~~~~~~~~~~~~~~

Let P(𝒦) denote the class of algebras isomorphic to a direct product of members of 𝒦.

::

  P-closed : (𝓛𝒦 : (𝓤 : Universe) → Pred (Algebra 𝓤 S) (𝓤 ⁺ ))
   →      (𝓘 : Universe) (I : 𝓘 ̇ ) (𝒜 : I → Algebra 𝓘 S)
   →      (( i : I ) → 𝒜 i ∈ 𝓛𝒦 𝓘 ) → 𝓘 ⁺ ̇
  P-closed 𝓛𝒦 = λ 𝓘 I 𝒜 𝒜i∈𝓛𝒦 →  Π' 𝒜  ∈ (𝓛𝒦 𝓘)

  products-preserve-identities :
        (p q : Term{X = X})
        (I : 𝓤 ̇ ) (𝒜 : I → Algebra 𝓤 S)
   →    ((i : I) → (𝒜 i) ⊧ p ≈ q)
       -----------------------------------
   →     Π' 𝒜 ⊧ p ≈ q

  products-preserve-identities p q I 𝒜 𝒜⊧p≈q = γ
   where
     γ : (p ̇ Π' 𝒜) ≡ (q ̇ Π' 𝒜)
     γ = gfe λ a →
      (p ̇ Π' 𝒜) a
        ≡⟨ interp-prod gfe p 𝒜 a ⟩
      (λ i → ((p ̇ (𝒜 i)) (λ x → (a x) i)))
        ≡⟨ gfe (λ i → cong-app (𝒜⊧p≈q i) (λ x → (a x) i)) ⟩
      (λ i → ((q ̇ (𝒜 i)) (λ x → (a x) i)))
        ≡⟨ (interp-prod gfe q 𝒜 a)⁻¹ ⟩
      (q ̇ Π' 𝒜) a
        ∎

  products-in-class-preserve-identities :
       (𝒦 : Pred (Algebra 𝓤 S) ( 𝓤 ⁺ ))
       (p q : Term{X = X})
       (I : 𝓤 ̇ ) (𝒜 : I → Algebra 𝓤 S)
   →   𝒦 ⊧ p ≋ q  →  ((i : I) → 𝒜 i ∈ 𝒦)
       ------------------------------------
   →    Π' 𝒜 ⊧ p ≈ q

  products-in-class-preserve-identities 𝒦 p q I 𝒜 𝒦⊧p≋q all𝒜i∈𝒦 = γ
   where
     𝒜⊧p≈q : ∀ i → (𝒜 i) ⊧ p ≈ q
     𝒜⊧p≈q i = 𝒦⊧p≋q (all𝒜i∈𝒦 i)

     γ : (p ̇ Π' 𝒜) ≡ (q ̇ Π' 𝒜)
     γ = products-preserve-identities p q I 𝒜 𝒜⊧p≈q

----------------------------------------------------

Tools for the HSP Proof
------------------------

Here are some of the key identities we need to complete the proof of Birkhoff's HSP theorem.

::

  module _ (𝒦 : Pred (Algebra 𝓤 S) ( 𝓤 ⁺ )) where

Identities for product closure
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

::

   pclo-id1 : ∀ {p q} → (𝒦 ⊧ p ≋ q) → (PClo 𝒦 ⊧ p ≋ q)
   pclo-id1 {p} {q} α (pbase x) = α x
   pclo-id1 {p} {q} α (prod{I}{𝒜} 𝒜-P𝒦 ) = γ
    where
     IH : (i : I)  → (p ̇ 𝒜 i) ≡ (q ̇ 𝒜 i)
     IH = λ i → pclo-id1{p}{q} α  ( 𝒜-P𝒦  i )
     γ : p ̇ (Π' 𝒜)  ≡ q ̇ (Π' 𝒜)
     γ = products-preserve-identities p q I 𝒜 IH

   pclo-id2 : ∀{p q} → ((PClo 𝒦) ⊧ p ≋ q ) → (𝒦 ⊧ p ≋ q)
   pclo-id2 p A∈𝒦 = p (pbase A∈𝒦)

Identities for subalgebra closure
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

::

   sclo-id1 : ∀{p q} → (𝒦 ⊧ p ≋ q) → (SClo 𝒦 ⊧ p ≋ q)
   sclo-id1 {p} {q} 𝒦⊧p≋q (sbase A∈𝒦) = 𝒦⊧p≋q A∈𝒦
   sclo-id1 {p} {q} 𝒦⊧p≋q (sub {𝑨 = 𝑨} A∈SClo𝒦 sa) = γ
    where
     A⊧p≈q : 𝑨 ⊧ p ≈ q
     A⊧p≈q = sclo-id1{p}{q} 𝒦⊧p≋q A∈SClo𝒦

     B : Algebra 𝓤 S
     B = ∣ sa ∣

     h : ∣ B ∣ → ∣ 𝑨 ∣
     h = pr₁ ∥ sa ∥

     hem : is-embedding h
     hem = ∣ pr₂ ∥ sa ∥ ∣

     hhm : is-homomorphism B 𝑨 h
     hhm = ∥ pr₂ ∥ sa ∥ ∥

     ξ : (b : X → ∣ B ∣ ) → h ((p ̇ B) b) ≡ h ((q ̇ B) b)
     ξ b =
      h ((p ̇ B) b)  ≡⟨ comm-hom-term gfe B 𝑨 (h , hhm) p b ⟩
      (p ̇ 𝑨)(h ∘ b) ≡⟨ intensionality A⊧p≈q (h ∘ b) ⟩
      (q ̇ 𝑨)(h ∘ b) ≡⟨ (comm-hom-term gfe B 𝑨 (h , hhm) q b)⁻¹ ⟩
      h ((q ̇ B) b)  ∎

     hlc : {b b' : domain h} → h b ≡ h b' → b ≡ b'
     hlc hb≡hb' = (embeddings-are-lc h hem) hb≡hb'

     γ : p ̇ B ≡ q ̇ B
     γ = gfe λ b → hlc (ξ b)

   sclo-id2 : ∀ {p q} → (SClo 𝒦 ⊧ p ≋ q) → (𝒦 ⊧ p ≋ q)
   sclo-id2 p A∈𝒦 = p (sbase A∈𝒦)

Identities for hom image closure
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

::

   hclo-id1 : ∀{p q} → (𝒦 ⊧ p ≋ q) → (HClo 𝒦 ⊧ p ≋ q)
   hclo-id1 {p}{q} 𝒦⊧p≋q (hbase A∈𝒦) = 𝒦⊧p≋q A∈𝒦
   hclo-id1 {p}{q} 𝒦⊧p≋q (hhom{𝑨} A∈HClo𝒦 𝑩ϕhE) = γ
    where
     A⊧p≈q : 𝑨 ⊧ p ≈ q
     A⊧p≈q = (hclo-id1{p}{q} 𝒦⊧p≋q ) A∈HClo𝒦

     𝑩 : Algebra 𝓤 S
     𝑩 = ∣ 𝑩ϕhE ∣

     ϕ : ∣ 𝑨 ∣ → ∣ 𝑩 ∣
     ϕ = ∣ ∥ 𝑩ϕhE ∥ ∣

     ϕhom : is-homomorphism 𝑨 𝑩 ϕ
     ϕhom = ∣ pr₂ ∥ 𝑩ϕhE ∥ ∣

     ϕsur : (𝒃 : X → ∣ 𝑩 ∣ )(x : X) → Image ϕ ∋ (𝒃 x)
     ϕsur 𝒃 x = ∥ pr₂ ∥ 𝑩ϕhE ∥ ∥ (𝒃 x)

     preim : (𝒃 : X → ∣ 𝑩 ∣)(x : X) → ∣ 𝑨 ∣
     preim 𝒃 x = (Inv ϕ (𝒃 x) (ϕsur 𝒃 x))

     ζ : (𝒃 : X → ∣ 𝑩 ∣) → ϕ ∘ (preim 𝒃) ≡ 𝒃
     ζ 𝒃 = gfe λ x → InvIsInv ϕ (𝒃 x) (ϕsur 𝒃 x)

     γ : (p ̇ 𝑩) ≡ (q ̇ 𝑩)
     γ = gfe λ 𝒃 →
      (p ̇ 𝑩) 𝒃               ≡⟨ (ap (p ̇ 𝑩) (ζ 𝒃))⁻¹ ⟩
      (p ̇ 𝑩) (ϕ ∘ (preim 𝒃)) ≡⟨ (comm-hom-term gfe 𝑨 𝑩 (ϕ , ϕhom) p (preim 𝒃))⁻¹ ⟩
      ϕ((p ̇ 𝑨)(preim 𝒃))     ≡⟨ ap ϕ (intensionality A⊧p≈q (preim 𝒃)) ⟩
      ϕ((q ̇ 𝑨)(preim 𝒃))     ≡⟨ comm-hom-term gfe 𝑨 𝑩 (ϕ , ϕhom) q (preim 𝒃) ⟩
      (q ̇ 𝑩)(ϕ ∘ (preim 𝒃))  ≡⟨ ap (q ̇ 𝑩) (ζ 𝒃) ⟩
      (q ̇ 𝑩) 𝒃 ∎

   hclo-id2 : ∀ {p q} → (HClo 𝒦 ⊧ p ≋ q) → (𝒦 ⊧ p ≋ q)
   hclo-id2 p A∈𝒦 = p (hbase A∈𝒦)

Identities for varietal closure
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

::

   vclo-id1 : ∀ {p q} → (𝒦 ⊧ p ≋ q) → (VClo 𝒦 ⊧ p ≋ q)
   vclo-id1 {p} {q} α (vbase A∈𝒦) = α A∈𝒦
   vclo-id1 {p} {q} α (vprod{I = I}{𝒜 = 𝒜} 𝒜∈VClo𝒦) = γ
    where
     IH : (i : I) → 𝒜 i ⊧ p ≈ q
     IH i = vclo-id1{p}{q} α (𝒜∈VClo𝒦 i)

     γ : p ̇ (Π' 𝒜)  ≡ q ̇ (Π' 𝒜)
     γ = products-preserve-identities p q I 𝒜 IH

   vclo-id1 {p} {q} α ( vsub {𝑨 = 𝑨} A∈VClo𝒦 sa ) = γ
    where
     A⊧p≈q : 𝑨 ⊧ p ≈ q
     A⊧p≈q = vclo-id1{p}{q} α A∈VClo𝒦

     𝑩 : Algebra 𝓤 S
     𝑩 = ∣ sa ∣

     h : ∣ 𝑩 ∣ → ∣ 𝑨 ∣
     h = pr₁ ∥ sa ∥

     hem : is-embedding h
     hem = ∣ pr₂ ∥ sa ∥ ∣

     hhm : is-homomorphism 𝑩 𝑨 h
     hhm = ∥ pr₂ ∥ sa ∥ ∥

     ξ : (b : X → ∣ 𝑩 ∣ ) → h ((p ̇ 𝑩) b) ≡ h ((q ̇ 𝑩) b)
     ξ b =
      h ((p ̇ 𝑩) b)  ≡⟨ comm-hom-term gfe 𝑩 𝑨 (h , hhm) p b ⟩
      (p ̇ 𝑨)(h ∘ b) ≡⟨ intensionality A⊧p≈q (h ∘ b) ⟩
      (q ̇ 𝑨)(h ∘ b) ≡⟨ (comm-hom-term gfe 𝑩 𝑨 (h , hhm) q b)⁻¹ ⟩
      h ((q ̇ 𝑩) b)  ∎

     hlc : {b b' : domain h} → h b ≡ h b' → b ≡ b'
     hlc hb≡hb' = (embeddings-are-lc h hem) hb≡hb'

     γ : p ̇ 𝑩 ≡ q ̇ 𝑩
     γ = gfe λ b → hlc (ξ b)

   vclo-id1 {p}{q} α (vhom{𝑨 = 𝑨} A∈VClo𝒦 𝑩ϕhE) = γ
    where
     A⊧p≈q : 𝑨 ⊧ p ≈ q
     A⊧p≈q = vclo-id1{p}{q} α A∈VClo𝒦

     𝑩 : Algebra 𝓤 S
     𝑩 = ∣ 𝑩ϕhE ∣

     ϕ : ∣ 𝑨 ∣ → ∣ 𝑩 ∣
     ϕ = ∣ ∥ 𝑩ϕhE ∥ ∣

     ϕh : is-homomorphism 𝑨 𝑩 ϕ
     ϕh = ∣ pr₂ ∥ 𝑩ϕhE ∥ ∣

     ϕE : (𝒃 : X → ∣ 𝑩 ∣ )(x : X) → Image ϕ ∋ (𝒃 x)
     ϕE 𝒃 x = ∥ pr₂ ∥ 𝑩ϕhE ∥ ∥ (𝒃 x)

     preim : (𝒃 : X → ∣ 𝑩 ∣)(x : X) → ∣ 𝑨 ∣
     preim 𝒃 x = (Inv ϕ (𝒃 x) (ϕE 𝒃 x))

     ζ : (𝒃 : X → ∣ 𝑩 ∣) → ϕ ∘ (preim 𝒃) ≡ 𝒃
     ζ 𝒃 = gfe λ x → InvIsInv ϕ (𝒃 x) (ϕE 𝒃 x)

     γ : (p ̇ 𝑩) ≡ (q ̇ 𝑩)
     γ = gfe λ 𝒃 →
      (p ̇ 𝑩) 𝒃               ≡⟨ (ap (p ̇ 𝑩) (ζ 𝒃))⁻¹ ⟩
      (p ̇ 𝑩) (ϕ ∘ (preim 𝒃)) ≡⟨ (comm-hom-term gfe 𝑨 𝑩 (ϕ , ϕh) p (preim 𝒃))⁻¹ ⟩
      ϕ((p ̇ 𝑨)(preim 𝒃))     ≡⟨ ap ϕ (intensionality A⊧p≈q (preim 𝒃)) ⟩
      ϕ((q ̇ 𝑨)(preim 𝒃))     ≡⟨ comm-hom-term gfe 𝑨 𝑩 (ϕ , ϕh) q (preim 𝒃) ⟩
      (q ̇ 𝑩)(ϕ ∘ (preim 𝒃))  ≡⟨ ap (q ̇ 𝑩) (ζ 𝒃) ⟩
      (q ̇ 𝑩) 𝒃 ∎

   vclo-id2 : ∀ {p q} → (VClo 𝒦 ⊧ p ≋ q) → (𝒦 ⊧ p ≋ q)
   vclo-id2 p A∈𝒦 = p (vbase A∈𝒦)

-------------------------

.. include:: hyperlink_references.rst

