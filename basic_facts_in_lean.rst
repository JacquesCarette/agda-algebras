.. highlight:: lean

.. include:: _static/math_macros.rst

.. _basic-facts-in-lean:

Basic Facts in Lean
--------------------

In this section we show how to state and prove in Lean the basic facts that we first encountered in :numref:`Chapter %s <basic-facts>`.

.. index:: ! equalizer

Recall, the **equalizer** of the functions :math:`g` and :math:`h` is the set

.. math:: ùñ§(g,h) = \{ a : A ‚à£ g(a) = h(a) \}.

We begin by defining in Lean

#. the equalizer of two functions, ``E``,

#. a homomorphism, ``hom``, and 

#. the equalizer of two homomorphisms, ``E_hom``.

.. include:: _static/subuniverse.lean.1.rst

.. _composition-of-homomorphisms:

Composition of homomorphisms
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Recall the simple fact that composing two homomorphisms results in a homomorphism.

.. include:: _static/homs.lean.1.rst

(As with the other numbered results appearing in this section, we include the statement and proof of the above fact inside the ``basic_facts`` section.)

.. _equalizer-as-subuniverse:

Equalizer as subuniverse
~~~~~~~~~~~~~~~~~~~~~~~~

Next we formally prove that the equalizer ``ùñ§ g h`` of two homomorphisms ``g`` and ``h`` is a subuniverse of ùî∏ (cf. :numref:`Obs %s <obs-one>`).

.. include:: _static/homs.lean.2.rst

.. _homomorphisms-that-agree-on-a-generating-set:

Homomorphisms that agree on a generating set
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Recall (:numref:`Obs %s <obs-two>`) if two homomorphisms agree on a generating set, then they are equal.

More precisely, if a subset ``X`` is contained in the equalizer of two homomorphisms, then ``Sg X`` is also contained in the equalizer; thus, homomorphisms that agree on ``X`` also agree on ``Sg X``. Let us now state and prove this in Lean.

.. include:: _static/homs.lean.3.rst

Alternatively, we could have proved the last fact using the inductive nature of the definition of subalgebra generated by a set.

Indeed, recall the definition of ``Y`` above and the proof that ``Y X`` is equal to ``Sg X``; thus, properties of the subuniverse generated by the set ``X`` can be proved using the recursor of ``Y``.

.. include:: _static/homs.lean.4.rst

.. _factoring-homomorphisms:

Factoring homomorphisms
~~~~~~~~~~~~~~~~~~~~~~~

Before implementing in Lean the result on factoring homomorphisms (:numref:`Obs %s <obs-four>`), we reiterate that we cannot do so constructively.  Here is a related passage from `Theorem Proving in Lean`_ that explains why.

  "The standard library also defines a choice principle that is entirely antithetical to a computational interpretation, since it magically produces 'data' from a proposition asserting its existence. Its use is essential to some classical constructions, and users can import it when needed. But expressions that use this construction to produce data do not have computational content, and in Lean we are required to mark such definitions ``noncomputable`` to flag that fact... To summarize, then, on top of the underlying framework of universes, dependent function types, and inductive types, the standard library adds three additional components:

  #. the axiom of propositional extensionality
  #. a quotient construction, which implies function extensionality
  #. a choice principle, which produces data from an existential proposition.

  The first two of these block normalization within Lean, but are compatible with :term:`byte-code` evaluation, whereas the third is not amenable to computational interpretation."
   
The upshot is that we cannot always use Lean's ``exists.elim`` to produce data.

Nonetheless, we can use Lean's ``classical`` library and the ``noncomputable`` keyword to formalize proofs of nonconstructive results, like :numref:`Obs %s <obs-four>` on factoring homomorphisms.

.. index:: pair: epic; surjective
.. index:: pair: monic; injective
.. index:: bijective

First we define what it means for a function to be **epic** (or **surjective**), **monic** (or **injective**), and **bijective** (i.e., both epic and monic).

.. include:: _static/homs.lean.5.rst

.. index:: inverse, right inverse

Next, we define the (``noncomputable``) **inverse** and **right inverse** and then prove that an epic function has a right inverse.

(The following is also placed inside the ``basic_facts`` section, inside the ``ualib`` namespace.)

.. include:: _static/homs.lean.6.rst

Finally, we are ready to prove the homomorphism factorization lemma of :numref:`Obs %s <obs-four>`.

(Again, this belongs inside the ``basic_facts`` section.)

.. include:: _static/homs.lean.7.rst

.. include:: hyperlink_references.rst

