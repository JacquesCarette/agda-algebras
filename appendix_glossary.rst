.. File: appendix_glossary.rst
.. Author: William DeMeo <williamdemeo@gmail.com>
.. Date: 11 Oct 2019
.. Updated: 27 Oct 2019
.. Copyright (c) 2019 William DeMeo (see the LICENSE file)

.. include:: _static/math_macros.rst

.. role:: code

.. highlight:: lean

.. _appendix-glossary:

Glossary
--------

.. _acronyms:

Acronyms
~~~~~~~~~

.. glossary::

    ATP
      | *n.* automated theorem prover
      | *v.* automated theorem proving

    CiC
      :term:`Calculus of Inductive Constructions`

    cod
      codomain

    dcpo
      :term:`directed-cocomplete poset`

    dom
      domain
    
    ETT
      :term:`extensional` :term:`intuitionistic type theory <TT>`.

    em
      :term:`law of the excluded middle`

    ER
      equality reflection

    ITP
      | *n.* interactive theorem prover (or proof assistant), e.g., :term:`Agda`, :term:`Coq`, :term:`Lean`, and :term:`NuPrl`
      | *v.* interactive theorem proving

    ITT
      :term:`intensional` :term:`intuitionistic type theory <TT>`.

    LSTL
      `Lean Standard Library`_
      
    ω-cpo
      :term:`ω-chain cocomplete poset`

    ran
      range

    TPIL
      the `Theorem Proving in Lean`_ tutorial

    TT
      (intuitionistic) :term:`type theory`

    UIP
      `Uniqueness of Identity Proofs <https://ncatlab.org/nlab/show/axiom+UIP>`_


.. _definitions:

Definitions
~~~~~~~~~~~~

.. glossary::

    abelian group
      A :term:`group` is called **abelian** just in case its binary operation is commutative; in that case we usually let :math:`0` (instead of :math:`e`) denote the *additive identity*, we let :math:`-` (instead of :math:`^{-1}`) denote the *additive inverse*, and we let :math:`+` (instead of :math:`⋅`) denote *binary addition*. Thus, an **abelian group** is a group :math:`⟨A, 0, -, +⟩` such that :math:`a+b = b+a` for all :math:`a, b ∈ A`.

    abstract category
      An **abstract category** is one whose objects are not sets or whose morphisms are not functions defined on sets. Our next example is somewhere in between. The objects are sets, but the morphisms are not necessarily *total* functions; that is, they may be defined on only a part of the source object.

    Agda
      An :term:`intensional`, :term:`predicative` :term:`ITP` supporting :term:`dependent types <dependent type>` and based on Martin Lof type theory; url: https://wiki.portal.chalmers.se/agda/pmwiki.php

    algebraic lattice
      a :term:`lattice` generated by its :term:`compact elements <compact element>`. 

    algebra
      See :term:`algebraic structure`.

    algebraic structure
      An **algebraic structure** in the :term:`signature` :math:`σ = (F, ρ)` (or, :math:`σ`-**algebra**) is denoted by :math:`𝔸 = ⟨A, F^𝔸⟩` and consists of 

      #. :math:`A` := a set, called the *carrier* (or *universe*) of the algebra,
      #. :math:`F^𝔸 = \{ f^𝔸 ∣ f ∈ F, \ f^𝔸: (ρ f → A) → A \}` := a set of operations on :math:`A`, and
      #. a collection of identities satisfied by elements of :math:`A` and operations in :math:`F^𝔸`.

    antichain
      A subset :math:`A` of the preordered set :math:`X` is called an **antichain** if for all :math:`x, y ∈ A` we have :math:`x ≤ y` implies :math:`y ≤ x`.

    antisymmetric
      A binary relation :math:`R` on a set :math:`X` is called **antisymmetric** provided :math:`∀  x, y ∈ X \ (x \mathrel{R} y ∧ y\mathrel{R} x \ → \ x=y)`.

    arity
      Given a :term:`signature` :math:`σ = (F, ρ)`, each operation symbol :math:`f ∈ F` is assigned a value :math:`ρ f`, called the **arity** of :math:`f`. (Intuitively, the arity can be thought of as the "number of arguments" that :math:`f` takes as "input".)

    bilinear algebra
      Let :math:`𝔽= ⟨ F, 0, 1, -\, , +, ⋅⟩` be a field. An algebra :math:`𝔸 = ⟨ A, 0, -\, , +, ⋅, f_r⟩_{r∈ F}` is a **bilinear algebra over** :math:`𝔽` provided :math:`⟨A, 0, -, +, ⋅, f_r⟩_{r ∈ F}` is a vector space over :math:`𝔽` and for all :math:`a, b, c ∈ A` and all :math:`r ∈ F`, we have

      .. math::   (a + b) ⋅ c &= (a ⋅ c) + (b ⋅ c)\\
                  c ⋅ (a + b) &= (c⋅ a) + (c⋅ b)\\
                   a⋅  f_r(b) &= f_r(a⋅ b) = f_r(a)⋅ b.

      If, in addition, :math:`(a ⋅ b) ⋅ c = a ⋅ (b ⋅ c)` for all :math:`a, b, c ∈ A`, then :math:`𝔸` is called an **associative algebra over** :math:`𝔽`. Thus an associative algebra over a field has both a vector space reduct and a ring reduct. An example of an associative algebra is the space of linear transformations (endomorphisms) of any vector space into itself.

    binar
      See :term:`magma`.

    binary operation
      An operation :math:`f` on a set :math:`A` is called **binary** if the arity of :math:`f` is 2.  That is, :math:`f: A × A → A` (or, in curried form, :math:`f: A → A → A`).

    Boolean algebra
      .. todo:: fill in definition    

    Boolean algebra homomorphism
      a :term:`lattice homomorphism` that also preserves complementation (but every lattice homomorphism between Boolean lattices automatically preserves complementation, so we may characterize the morphisms of this category more simply as the lattice homomorphisms).

    byte-code
      .. todo:: fill in definition    

    Calculus of Inductive Constructions
      See https://en.wikipedia.org/wiki/Calculus_of_constructions.

    Cartesian product
      See :term:`product`.

    canonical normal form
      See the `ncatlab page on normal forms <https://ncatlab.org/nlab/show/normal+form>`_.

    category of categories
      has categories as objects and functors as morphisms.

    category of small categories
      See :term:`Cat`.

    Choice
      is short for the `Axiom of Choice <https://en.wikipedia.org/wiki/Axiom_of_choice>`_.

    chain
      Let :math:`⟨ X, ≤ ⟩` be a preordered set and :math:`C ⊆ X`. We call :math:`C` a **chain** of :math:`⟨ X, ≤ ⟩` if for all :math:`x, y ∈ C` either :math:`x ≤ y` or :math:`y ≤ x` holds.

    clone
      An **operational clone** (or just **clone**) on a nonempty set :math:`A` is a set of operations on :math:`A` that contains all :term:`projection operations <projection operation>` and is closed under :term:`general composition`.

    closed
      If :math:`𝖢` is a :term:`closure operator` on :math:`X`, then a subset :math:`A ⊆ X` is called **closed** with respect to :math:`𝖢` (or :math:`𝖢`-**closed**) provided :math:`𝖢(A) ⊆ A` (equivalently, :math:`𝖢(A) = A`).

      Here's an important example. Let :math:`σ = (F, ρ)` be a :term:`signature` and :math:`X` a set. Define for each :math:`A ⊆ X` the set :math:`𝖢(A) = \{f\, b ∣ f ∈ F, \, b: ρ f → A\}`.  Then :math:`𝖢` is a closure operator on :math:`X` and a subset :math:`A ⊆ X` is said to be "closed under the operations in :math:`F`" provided :math:`A` is :math:`𝖢`-closed.

    closure operator
      Let :math:`X` be a set and let :math:`𝒫(X)` denote the collection of all subsets of :math:`X`. A **closure operator** on :math:`X` is a set function :math:`𝖢: 𝒫 (X) → 𝒫 (X)` satisfying the following conditions, for all :math:`A, B ∈ 𝒫 (X)`, 

      #. :math:`A ⊆ 𝖢(A)`,
      #. :math:`𝖢 ∘ 𝖢 = 𝖢`,
      #. :math:`A ⊆ B ⟹ 𝖢(A) ⊆ 𝖢(B)`.

    cocomplete
      A poset in which all joins exist is called **cocomplete**.

    code extraction
      .. todo:: insert def

    codomain
      If :math:`f : A → B` is a function or relation from :math:`A` to :math:`B`, then :math:`B` is called the **codomain** of :math:`f`, denoted by 
      :math:`\cod f`.

    commutative diagram
      A **commutative diagram** is a diagram with the following property: for all objects :math:`C` and :math:`D`, all paths from :math:`C` to :math:`D` yield the same morphism.

    commutative group
      See :term:`abelian group`.

    compact element
      an element :math:`x` of a lattice :math:`L` is called **compact** provided for all :math:`Y ⊆ L`, if :math:`x ≤ ⋁ Y`, then there exists a finite subset :math:`F ⊆ Y` such that :math:`x ≤ ⋁ F`.

    complete
      A poset in which all meets exist is called **complete**.

    complete lattice
      a :term:`poset` whose universe is closed under *arbitrary* meets and joins.

    complete lattice homomorphism
      a function :math:`f: X → Y` preserving complete meets and joins.

    component
      If :math:`α : F ⇒ G` is a natural transformation, then the **component** of α at :math:`A` is the morphism :math:`α_A : FA → GA`.

    composition of operations
      If :math:`f: (n → A) → A` is an :math:`n`-ary operation on the set :math:`A`, and if :math:`g: ∏_{(i:n)} ((k_i → A) → A)` is an :math:`n`-tuple of operations, then we define the **composition of** :math:`f` **with** :math:`g`, using the :term:`eval` and :term:`fork` operations, as follows:
   
      .. math:: f [g] := f\, (\mathbf{eval} \, \mathbf{fork}\, g): ∏_{(i:n)}(k_i → A) → A.
   
      Indeed, 
      
      .. math:: \mathbf{eval} \, \mathbf{fork} \, g: ∏_{(i:n)}(k_i → A) → (n → A)
      
      is the function that maps each :math:`a: ∏_{(i:n)}(k_i → A)` to :math:`∏_{(i:n)}\mathbf{eval} \,(g \, i, a\, i) = g ∘ a`, where for each :math:`(i:n)` :math:`(g ∘ a)(i) = (g i)(a i): A`.
      
      Thus, if :math:`a: ∏_{(i:n)}(k_i → A)`, then :math:`(\mathbf{eval} \, \mathbf{fork} \, g) (a)` has type :math:`n → A`, which is the domain type of :math:`f`.  Therefore, :math:`f \, (\mathbf{eval} \, \mathbf{fork}\, g)\, (a)` has type :math:`A`.

      For a slightly more general description of composition, see :numref:`greater-generality`.

    computable
      See https://pdfs.semanticscholar.org/1364/d8e8763891b84a9383b722d82294ae0a736b.pdf.

    concrete category
      A **concrete category** is one whose objects are sets and whose morphisms are functions defined on these sets (possibly satisfying some other special properties).

    consecutive functions
      If :math:`f : A → B` and :math:`g : B → C`, then :math:`\cod f = \dom g` and we say that :math:`f` and :math:`g` are **consecutive functions**.

    constructive
      See https://plato.stanford.edu/entries/mathematics-constructive/ and https://en.wikipedia.org/wiki/Constructivism_(philosophy_of_mathematics) and https://en.wikipedia.org/wiki/Constructive_proof.

    contravariant powerset functor
      The **contravariant powerset functor** is a functor :math:`P : \mathbf{Set} → \mathbf{Set}` such that for each :math:`g : B → A` the morphism :math:`g^← : PA → PB` is given by :math:`g^← (S) = \{b ∈ B : g(b) ∈ S\}` for each :math:`S ⊆ A`.

    coproduct
      Given two objects :math:`A` and :math:`B` a **coproduct** (or **sum**) of :math:`A` and :math:`B` is denoted by :math:`A+B` and defined to be an object with morphisms :math:`ι_1 : A → A + B` and :math:`ι_2 : B → A + B` such that for every object :math:`X` and all morphisms :math:`u : A → Y` and :math:`v : B → Y` there exists a unique morphism :math:`[u,v] : A+B → Y` such that :math:`[u,v] ∘ ι_1 = u` and :math:`[u,v] ∘ ι_2 = v`.

    Coq
      An :term:`intensional`, :term:`impredicative` :term:`ITP` supporting :term:`dependent types <dependent type>` and based on :term:`CiC`; url: http://coq.inria.fr
      
    covariant powerset functor
      The **(covariant) powerset functor** is a functor :math:`P : \mathbf{Set} → \mathbf{Set}` such that for each :math:`f : A → B` the morphism :math:`Pf : PA → PB` is given by :math:`Pf(S) = \{f(x) : x ∈ S\}` for each :math:`S \subseteq A`.

    Curry-Howard correspondence
      the correspondence between propositions and types, and proofs and programs; a proposition is identified with the type of its proofs, and a proof is a program of that type. See also https://en.wikipedia.org/wiki/Curry%E2%80%93Howard_correspondence.

    currying
      See https://en.wikipedia.org/wiki/Currying.

    data-relevant
      .. todo:: insert definition

    dependent function type
      See :term:`Pi type`.

    dependent pair type
      See :term:`Sigma type`.

    dependent product type
      See :term:`Sigma type`.

    dependent type
      A **dependent type** is actually a family of types indexed by some parameter. That is, a dependent type provides a *type schema*, which is a collection of types indexed by a set of values. For example, the type ``Fin n`` of finite sets of size ``n`` is a type that *depends* on the value ``n``.  More examples are in :numref:`dependent-types`_.  See also the `Dependent Types`_ section in the `TPL`_ tutorial.

    directed set
      A subset :math:`D` of a :term:`preorder` is called **directed** if every finite subset of :math:`D` has an upper bound in :math:`D`. That is, if :math:`F ⊆ D` and :math:`F` is finite, then there exists :math:`d ∈ D` such that :math:`f ≤ d` for all :math:`f ∈ F`.

    directed-cocomplete preorder
      a :term:`preorder` for which the joins of all :term:`directed <directed set>` subsets exist. 
      
    directed-cocomplete poset
      an :term:`antisymmetric` :term:`directed-cocomplete preorder`.

    directed graph
      A **directed graph** is a :term:`relational structure` consisting of a vertex set :math:`V` (whose elements are called vertices) and an edge set :math:`E ⊆ V^2` (whose elements are called edges).

    division ring
      A ring in which every non-zero element is a unit is called a **division ring**.

    domain
      If :math:`f : A → B` is a function or relation from :math:`A` to :math:`B`, then :math:`A` is called the **domain** of :math:`f`, denoted by :math:`\dom f`.

    endofunctor
      A functor that maps a category to itself is called an **endofunctor**.

    endomorphism
      A morphism :math:`f : A → A` (i.e., :math:`\src f = \tar f`) is called an **endomorphism**.

    epimorphism
      A morphism :math:`f: A → B` is called an **epimorphism** if for every object :math:`Y` and pair :math:`y_1, y_2: B → Y` of morphisms, :math:`y_1 ∘ f = y_2 ∘ f` implies :math:`y_1 = y_2`. When :math:`f: A → B` is an **epimorphism** we often say ":math:`f` is epi" and write :math:`f: ↠ B`.

    equivalence class
      If :math:`R` is an :term:`equivalence relation` on :math:`A`, then for each :math:`a ∈ A`, there is an **equivalence class** containing :math:`a`, which is denoted and defined by :math:`a/R = \{b ∈ A ∣ a \mathrel R b\}`.

    equivalence relation
      An **equivalence relation** is a :term:`symmetric` :term:`preorder`. The collection of all equivalence relations on :math:`X` is denoted by :math:`\mathrm{Eq}(X)`.

    equivalent categories
      Two categories :math:`\mathcal C` and :math:`\mathcal D` are called **equivalent categories** if there are functors :math:`F : \mathcal C →  \mathcal D` and :math:`G : \mathcal D → \mathcal C` together with natural isomorphisms :math:`ε : FG ≅ \mathrm{id}_{\mathcal D}`, and :math:`η : \mathrm{id}_{\mathcal C} ≅ GF`. We say that :math:`F` is an equivalence with an inverse equivalence :math:`G` and denote the equivalence by :math:`F : \mathcal C ≃ \mathcal D : G`.

    essentially surjective on objects
      A functor :math:`F : C → D` is called **essentially surjective on objects** if for every object :math:`D ∈ \mathcal D`, there is some :math:`A ∈ \mathcal C` such that :math:`F A` is isomorphic to :math:`D`.

    existential image functor
      the functor :math:`∃ f : P(A) → P(B)` defined by :math:`∃ f(X) = \{f(x) : x ∈  X\},` for :math:`X ∈ P(A)`.

    eval
      If :math:`A` and :math:`B` are types, then the **eval** (or **function application**) function on :math:`A` and :math:`B` is denoted by :math:`\mathbf{eval}: ((A → B) × A) → B` and defined by :math:`\mathbf{eval} (f, a) = f\, a`, for all :math:`f: A → B` and :math:`a: A`.

    evaluation functor
      The **evaluation functor** is the functor :math:`Ev : \mathcal C × \mathbf{Set}^{\mathcal C} → \mathbf{Set}`, which takes each pair :math:`(A, F) ∈ \mathcal C_{\mathrm{obj}} × \mathbf{Set}^{{\mathcal C}_{\mathrm{obj}}}` of objects to the set :math:`Ev(A, F) = FA`, and takes each pair :math:`(g, μ) ∈ \mathcal C_{\mathrm{obj}} × \mathbf{Set}^{\mathcal C_{\mathrm{mor}}}` of morphisms to a function on sets, namely, :math:`Ev(g, μ) = μ_{A'} ∘ F g = F' g ∘ μ_A`, where :math:`g ∈ \mathcal C(A, A')` and :math:`μ : F ⇒ F'`.

    evaluation natural transformation
      The **evaluation natural transformation** is denoted by :math:`eval^A : F_A →  \mathrm{id}_{\mathbf{Set}}` and defined by... (**Todo** complete definition)

    extensional
      An *extensional* definition of a term lists everything that qualifies as something to which that term refers. See also :term:`function extensionality`.

    faithful functor
      A functor :math:`F : \mathcal C → \mathcal D` is called **faithful** if for all objects :math:`A`, :math:`B` in :math:`\mathcal C_{\mathrm{obj}}`, the map :math:`\mathcal C(A, B) → \mathcal D(F A, F B)` is injective.
      
      (Note: A faithful functor need not be injective on morphisms.)

    field
      A field is a commutative :term:`division ring`.
      
    finite ordinals
      The category :math:`\mathrm{Ord}_{\mathrm{fin}}` of **finite ordinals** (also called the **simplex category** :math:`\Delta`) has :math:`\underline n = \{0, 1, \dots, n-1\}` for objects (for each :math:`n ∈ ℕ`) and :math:`f : \underline n → \underline m` :term:`monotone functions <monotone function>` for morphisms.

    fork
      Let :math:`A` and :math:`D` be types and for each :math:`a: A`, let :math:`C_a` be a type. Then the (dependent) **fork function**, denoted
   
      .. math:: \mathbf{fork}: ∏_{a:A}(C_a → D) → ∏_{a:A} C_a → ∏_{a:A} (C_a → D) × C_a,
      
      is defined as follows: for all :math:`h: ∏_{a:A}(C_a → D)` and :math:`k: ∏_{a:A} C_a`,
      
      .. math:: \mathbf{fork}\, (h)(k): ∏_{a:A}((C_a → D) × C_a),

      and for each :math:`a:A`,

      .. math:: \mathbf{fork}\, (h)(k)(a) = (h\,a, k\,a): (C_a → D) × C_a.

      Thus, :math:`\mathbf{eval} \, \mathbf{fork}\, (h)(k)(a) = (h\, a)(k\, a)` is of type :math:`D`. See also :numref:`general-composition`.

    free algebra
      Let :math:`\mathcal V` be a variety of algebras of a certain :term:`signature`. Let :math:`X` be a set.  The **free algebra generated by** :math:`X` is denoted by :math:`\mathbb F(X)` and is defined as follows: for every algebra :math:`\mathbf A = ⟨A, \dots⟩ ∈ \mathcal V` and every function :math:`f : X → A`, there exists a unique homomorphism :math:`h:\mathbb F(X) → \mathbf A` such that :math:`\forall x ∈ X, h(x) = f(x)`.  We say that :math:`\mathbb F (X)` is *universal for* :math:`\mathcal V`.

    free monoid
      .. todo:: fill in definition

    full embedding
      a :term:`fully faithful functor` that is injective on objects.

    full functor
      A functor :math:`F : \mathcal C → \mathcal D` is called **full** if for all objects :math:`A`, :math:`B` in :math:`\mathcal C`, the map :math:`\mathcal C(A, B) → \mathcal D(F A, F B)` is surjective.
      
      (N.B. A full functor need not be surjective on morphisms.)

    full subcategory
      If there exists a :term:`full embedding` :math:`F : \mathcal C → \mathcal D`, then :math:`\mathcal C` is called a **full subcategory** of :math:`\mathcal D`.

    fully faithful functor
      a functor that is both :term:`full <full functor>` and :term:`faithfull <faithful functor>`.

    function extensionality
      the principle that takes two functions :math:`f : X → Y` and :math:`g : X → Y` to be equal just in case :math:`f(x) = g(x)` holds for all :math:`x : X`; such functions are sometimes called :term:`Leibniz equal`.

      In Lean, one defines function extensionality for functions of (dependent) type :math:`Π(x:α), β x` as follows:

      .. code-block:: lean

         def equiv (f₁ f₂: Π x:α, β x): Prop := ∀ x, f₁ x = f₂ x

    function application
      See :term:`eval`.

    functional programming
      See https://en.wikipedia.org/wiki/Functional_programming.

    functor
      A **functor** :math:`F : \mathcal C → \mathcal D` consists of a function :math:`F_0` that maps objects of :math:`\mathcal C` to objects of :math:`\mathcal D` and a function :math:`F_1` that maps morphisms of :math:`\mathcal C` to morphisms of :math:`\mathcal D` such that :math:`F` preserves (co)domains of morphisms, identities, and compositions.

    functor category
      The **functor category** from :math:`\mathcal C` to :math:`\mathcal D` has functors :math:`F : \mathcal C → \mathcal D` as objects and natural transformations :math:`α : F ⇒ G` as morphisms.

    Galois connection
      See https://en.wikipedia.org/wiki/Galois_connection.

    Galois pair
      See https://en.wikipedia.org/wiki/Galois_connection.

    generalized element
      A morphism :math:`h: X → A` is sometimes called a **generalized element** of :math:`A`. A morphism :math:`f` is mono when it is injective on the generalized elements of its domain.

    general composition
      See :term:`composition of operations`.

    global element
      See :term:`point`.

    graph morphism
      Let :math:`𝐆_1 =(V_1, E_1)` and :math:`𝐆_2 = (V_2, E_2)` be graphs. We say that a pair of functions :math:`f=(f_v,f_e)` is a **graph morphism** from :math:`𝐆_1` to :math:`𝐆_2` provided :math:`f_v : V_1 → V_2`, :math:`f_e : E_1 → E_2`, and for any edge :math:`e = (v_1,v_2) ∈ E_1` we have that we have :math:`f_e(e) = (f_v(v_1), f_v(v_2))`.

    group
      A **group** is a :term:`monoid` expanded with a unary operation :math:`^{-1}`, called *multiplicative inverse*, which satisfies :math:`∀ a ∈ A`, :math:`a ⋅ a^{-1} =  a^{-1} ⋅ a = e`.

    groupoid
      See :term:`magma`.

    height
      If :math:`w` is a term, then the **height** of :math:`w` is denoted by :math:`|w|` and defined to be the least :math:`n` such that :math:`w ∈ T_n`. See :numref:`terms` for the definition of :math:`T_n`.

      If :math:`α` is a type, then we sometimes refer to the **height** of :math:`α`, by which we mean the *universe level* of :math:`α` See the :ref:`appendix section on Lean's type hierarchy <leans-type-hierarchy>`.
       
    Heyting algebra
      A **Heyting algebra** :math:`⟨L, ∧, ∨, ⊥, ⊤, →⟩` is a bounded :term:`lattice` with least and greatest elements ⊥ and ⊤, and a binary "implication" → that satisfies :math:`∀ a, b, c ∈ L, \ (c ∧ a ≤ b \ ⟺ \ c ≤ a → b)`.  Logically, this says a → b is the weakest proposition for which the modus ponens rule, :math:`\{a → b, a\} ⊢ b`, is sound. The class of Heyting algebras forms a variety that is finitely axiomatizable.
   
    Heyting algebra homomorphism
      a :term:`lattice homomorphism` that also preserves Heyting implications; that is, if :math:`x, x' ∈ X`, then :math:`f(x → x') = f(x) → f(x')`.

    hom set
      Some authors require that :math:`\mathcal C(A,B)` always be a set and call :math:`\mathcal C(A,B)` the **hom set** from :math:`A` to :math:`B`.

    idempotent
      An operation :math:`f: A^n → A` is called **idempotent** provided :math:`f(a, a, \dots, a) = a` for all :math:`a ∈ A`. That is, :math:`f` maps constant tuples to their constant image value.
      
      In other terms :math:`f: (ρ f → A) → A` is idempotent iff for each constant tuple :math:`a: ρ f → A`, say, :math:`∀ i<ρ f, \; a\, i = c`, we have :math:`f\, a = f(c, c, \dots, c) = c`.

    implication elimination
      See the `section on implication <https://leanprover.github.io/logic_and_proof/propositional_logic.html#implication>`_ in the `Logic and Proof`_ book.

    implicit arguments
      See sections `Implicit arguments`_ and `More on implicit arguments`_ of `TPL`_.

    impredicative
      A self-referencing definition is called **impredicative**. A definition is said to be impredicative if it invokes (mentions or quantifies over) the set being defined, or (more commonly) another set which contains the thing being defined.

    inductive set
      A subset :math:`I` of a :term:`preorder` :math:`X` is called **inductive** if :math:`⋁_X D ∈ I` for every directed subset :math:`D ⊆ X` contained in :math:`I`. That is, if :math:`D ⊆ I`, and if every finite subset of :math:`D` has an upper bound in :math:`D`, then :math:`D` as a least upper bound in :math:`I`.

    inductive type
      A type is called **inductive** or **inductively defined** if...
      
      See also: :numref:`inductively-defined-types` and the :term:`definition of the recursor <recursor>`.
      
    initial object
      An object :math:`\mathbf{0}` in a category is called an **initial**  (or a **free**) **object** if for every object :math:`A` in the same category there exists a unique morphism :math:`!_A:\mathbf{0}\to A`.
     
    intensional
      An **intensional** definition of a term specifies necessary and sufficient conditions that the term satisfies. In the case of nouns, this is equivalent to specifying all the properties that an object must have in order to be something to which the term refers.

    isomorphism
      A morphism :math:`f: A → B` is called an **isomorphism** if there exists a morphism :math:`g: A → B` such that :math:`g ∘ f= \mathrm{id}_A` and :math:`f ∘ g = \mathrm{id}_B`. We write :math:`f^{-1}` to denote :math:`g` when it exists.

    kernel
      By the kernel of a function :math:`f: A → B` we mean the binary relation on :math:`A` denoted and defined by :math:`\mathrm{ker} f := \{(a₁, a₂) : f a₁  = f a₂\}`.   

    Kleene closure
      See :term:`free monoid`.

    lambda calculus
      See https://en.wikipedia.org/wiki/Lambda_calculus.

    lattice
      a :term:`poset` whose universe is closed under all *finite* meets and joins is called a lattice.
     
    lattice homomorphism
      a function :math:`f: X → Y` preserving finite meets and joins.

    law of the excluded middle
      This is an axiom of classical logic asserting that for all propositions P either ¬ P or P holds. See also the `LEM Section <https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html?highlight=reduction%20rule#the-law-of-the-excluded-middle>`_ of the :term:`TPIL`.

    lift (n)
      See :term:`lifts (v)`

    lifts (v)
      For :math:`ρ ⊆ α × α`, and :math:`f: α → β`, we say that :math:`f` **lifts** to a function on the quotient :math:`α/ρ` provided the following implication holds for all :math:`x y: α`: if :math:`ρ x y` then :math:`f x = f y`.  The function to which :math:`f` lifts is called the **lift** of :math:`f`.

    Lean
      An :term:`extensional`, :term:`impredicative` :term:`ITP` supporting :term:`dependent types <dependent type>` and based on :term:`CiC`; url: https://leanprover.github.io/.

    left module
      See :term:`module`.

    Leibniz equal
      See :term:`function extensionality`.

    locally small category
      A category :math:`\mathcal C` is **locally small** if for every pair :math:`A`, :math:`B` of objects in :math:`\mathcal C` the collection of morphisms from :math:`A` to :math:`B` is a set.

    logically equivalent
      Propositions :math:`P` and :math:`Q` are **logically equivalent** provided :math:`P` implies :math:`Q` and :math:`Q` implies :math:`P`.

    magma
      An algebra with a single binary operation is called a **magma** (or **groupoid** or **binar**). The operation is usually denoted by :math:`+` or :math:`⋅`, and we write :math:`a+b` or :math:`a ⋅ b` (or just :math:`ab`) for the image of :math:`(a, b)` under this operation, which we call the *sum* or *product* of :math:`a` and :math:`b`, respectively.

    module
      Let :math:`R` be a :term:`ring` with unit. A **left unitary** :math:`R`-**module** (or simply :math:`R`-**module**) is an algebra :math:`⟨M, \{0, -, +\} ∪ \{f_r : r∈ R\}⟩` with an :term:`abelian group` :term:`reduct` :math:`⟨M, \{0, -, +\}⟩` and unary operations :math:`\{f_r : r ∈ R\}` that satisfy the following: :math:`∀ r, s ∈ R`, :math:`∀ x, y ∈ M`,

      #. :math:`f_r(x + y)  = f_r(x) + f_r(y)`
      #. :math:`f_{r+s}(x) = f_r(x) + f_s(x)`
      #. :math:`f_r(f_s(x)) = f_{rs}(x)`
      #. :math:`f_1(x) = x`.

    metaprogram
      a program whose purpose is to modify the behavior of other programs; :term:`proof tactics <proof tactic>` form an important class of metaprograms.

    modus ponens
      See :term:`implication elimination`.

    monoid
      If :math:`⟨M, ⋅⟩` is a semigroup and if there exists :math:`e ∈ M` that is a *multiplicative identity* (i.e., :math:`∀ m ∈ M`, :math:`e ⋅ m = m = m ⋅ e`), then :math:`⟨M, \{e, ⋅\}⟩` is called a **monoid**.

    monoid homomorphism
      Given monoids :math:`𝐌_1 = (M_1, e_1, ⋆)` and :math:`𝐌_2 = (M_2, e_2, ∗)` we say that a function :math:`f : M_1 → M_2` is a **monoid homomorphism** from :math:`𝐌_1` to :math:`𝐌_2` provided :math:`f` preserves the :term:`nullary <nullary operation>` (identity) and :term:`binary operations <binary operation>`; that is, :math:`f(e_1) = e_2` and :math:`f (x ⋆ y) = f(x) ∗ f(y)` for all :math:`x, y ∈ M_1`.

    monomorphism
      A morphism :math:`f: A → B` is called a **monomorphism** if for every object :math:`X` and every pair :math:`h, h' : X → A` of morphisms, :math:`f ∘ h = f ∘ h'` implies :math:`h = h'`. When :math:`f` is a monomorphism we often say :math:`f` is "mono" and write :math:`f: A ↣ B`.

    monotone function
      Given posets :math:`⟨A, ≤ᴬ⟩` and :math:`(B, ≤ᴮ)` we say that a function :math:`f: A → B` is **monotone** from :math:`⟨A, ≤ᴬ⟩` to :math:`⟨B, ≤ᴮ ⟩` when for any :math:`x, y ∈ A` we have that :math:`x ≤ᴬ y` implies that :math:`f(x) ≤ᴮ f(y)`.

    middle linear map
      If :math:`B_r` and :math:`_rC` are modules over a ring :math:`R`, and :math:`A` is an abelian group, then a **middle linear** map from :math:`B × C` to :math:`A` is a function :math:`f: B × C → A` such that for all :math:`b, b_1, b_2 ∈ B` and :math:`c, c_1, c_2 ∈ C` and :math:`r ∈ R`:

      .. math:: f(b_1 + b_2, c) &= f(b_1,c) + f(b_2,c)\\
                f(b, c_1 + c_2) &= f(b,c_1) + f(b,c_2)\\
                       f(br, c) &= f(b,rc)

    module
      A **module** :math:`M` over a :term:`ring` :math:`R` is...

    multiplicative inverse
      Let :math:`𝔸 = ⟨ A, e, ∘, \dots ⟩` be an algebra in a signature with a nullary "identity" operation :math:`e: () → A` and a binary "multiplication" operation :math:`∘: A × A → A`. Then the element :math:`b ∈ A` is a **multiplicative inverse** of :math:`a ∈ A` provided :math:`a ∘ b = e = b ∘ a`.

    natural isomorphism
      An isomorphism in a functor category is referred to as a **natural isomorphism**.
      
    natural transformation
      Given functors :math:`F, G : \mathcal C → \mathcal D`, a **natural transformation** :math:`α : F ⇒ G` is a family :math:`\{α_A : A ∈ \mathcal C_{\mathrm{obj}}\}` of morphisms in :math:`\mathcal D` indexed by the objects of :math:`\mathcal C` such that, for each :math:`A ∈ \mathcal C_{\mathrm{obj}}`, the map :math:`\alpha_A` is a morphism from :math:`FA` to :math:`GA` satisfying the *naturality condition*, :math:`Gf ∘ α_A = α_B ∘ Ff`, for each :math:`f : A → B` in :math:`\mathcal C_{\mathrm{mor}}`. We shall write :math:`α : F ⇒ G : \mathcal C → \mathcal D` to indicate that α is a natural transformation from :math:`F` to :math:`G`, where :math:`F, G : \mathcal C → \mathcal D`.

    naturally isomorphic
      If there is a natural isomorphism between the functors :math:`F` and :math:`G`, then we call :math:`F` and :math:`G` **naturally isomorphic**.

    nullary operation
      An operation :math:`f` on a set :math:`A` is called **nullary** if the arity of :math:`f` is 0; that is, :math:`f: () → A`; equialently, :math:`f` takes no arguments, so is simply a (constant) element of :math:`A`.

    NuPRL
      An :term:`extensional`, :term:`predicative` :term:`ITP` supporting :term:`dependent types <dependent type>` and based on Martin Lof type theory; url: http://www.nuprl.org/

    ω-chain
      Let :math:`⟨ X, ≤ ⟩` be a preordered set. An ω-**chain** is an enumerable :term:`chain`.  That is, a chain the elements of which can be indexed by the natural numbers.

    ω-chain cocomplete
      A :term:`preorder` in which joins of all ω-chains exist is called ω-**chain cocomplete**.

    ω-chain cocomplete poset
      an :term:`antisymmetric` :term:`ω-chain cocomplete` :term:`preorder`.

    opposite category
      Given a category :math:`\mathcal C` the **opposite** (or **dual**) **category** :math:`\mathcal C^{\mathrm{op}}` has the same objects as :math:`\mathcal C` and whenever :math:`f: A → B` is a morphism in :math:`\mathcal C` we define :math:`f : B → A` to be a morphism in :math:`\mathcal C^{\mathrm{op}}`.

    parallel morphisms
      Morphisms :math:`f,g : A → B` are called **parallel morphisms** just in case :math:`\mathrm{src} f = \mathrm{src} g` and :math:`\mathrm{tar} f = \mathrm{tar} g`.
 
    partial function
      A **partial function** from :math:`A` to :math:`B` is a total function on some (potentially proper) subset :math:`\dom_f` of :math:`A`.

    partial order
      See :term:`partial order`.

    partial ordering
      A **partial ordering** (or "partial order") is an :term:`antisymmetric` :term:`preorder`.
      
    partially ordered set
      A **partially ordered set** (or "poset") :math:`⟨X, R⟩` is a set :math:`X` along with a :term:`partial ordering` :math:`R` defined on :math:`X`.

    Pi type
      The **Pi type** :math:`Π(x:A),B x`, also known as a **dependent function type**, is a dependent type that generalizes the type :math:`A → B`; it is a :term:`dependent type` because the codomain :math:`B x` depends on the value :math:`x`. See also the `Dependent Types`_ section of the `TPL`_ tutorial.

    point
      Given a category with an initial object :math:`\mathbf{1}` and another object :math:`A`, the morphisms with domain :math:`\mathbf{1}` and codomain :math:`A` are called the **points** or **global elements** of :math:`A`.

    polymorphic function
      a function that operates in the "same way" independently of the object parameter.

    polymorphic type
      (to do: fill in definition)

    poset
      A **poset** :math:`⟨X, ⊑⟩` consists of a set :math:`X` and an :term:`antisymmetric` :term:`preorder` :math:`⊑` on :math:`X`.

    power set operator
      The **powerset operator** :math:`𝒫` maps a class :math:`X` to the class :math:`𝒫 (X)` of all subsets of :math:`X`.
 
    predicative
      The opposite of :term:`impredicative`, *predicative* refers to building stratified (or ramified) theories where quantification over lower levels results in variables of some new type, distinguished from the lower types that the variable ranges over.

    preorder
      A **preorder** on a set :math:`X` is a :term:`reflexive` and :term:`transitive` subset of :math:`X × X`.

    preserves
      See :term:`respects`.

    product
      Given two objects :math:`A` and :math:`B` a **product** of :math:`A` and :math:`B` is defined to be an object, :math:`A × B`, along with morphisms :math:`p_1: A × B → A` and :math:`p_2: A × B → B` such that for every object :math:`X` and all morphisms :math:`x_1: X → A` and :math:`x_2: X → B` there exists a unique morphism :math:`h: X → A × B` such that :math:`p_1 ∘ h = x_1` and :math:`p_2 ∘ h = x_2`.  We usually use :math:`π_1: A × B → A` and :math:`π_2: A × B → B` to denote the projections and :math:`⟨x_1, x_2⟩` for the unique map :math:`h: X → A × B`.

    projection operation
      The :math:`i`**-th** :math:`k`**-ary projection operation on** :math:`A` is denoted by :math:`π^k_i: (k → A) → A` and defined for each :math:`k`-tuple :math:`a: k → A` by :math:`π^k_i \, a  = a\, i`.  

    projection operator
      If :math:`σ: k → n` is a :math:`k`-tuple of numbers in the set :math:`n = \{0, 1, \dots, n-1\}`, then we can compose an :math:`n`-tuple :math:`a ∈ ∏_{0≤i<n} A_i` with :math:`σ` yielding :math:`a ∘ σ ∈ ∏_{0≤i<k} A_{σ\, i}`.

      The result is a :math:`k`-tuple whose :math:`i`-th component is :math:`(a ∘ σ)(i) = a(σ(i))`.

      If :math:`σ` happens to be one-to-one, then we call the following a **projection operator**:

      .. math:: \Proj\, σ: ∏_{0≤i< n} A_i → ∏_{0≤i<k} A_{σ\, i};  \ \ a ↦ a ∘ σ.

      That is, for :math:`a ∈ ∏_{0≤i<n} A_i` we define :math:`\Proj\,σ\, a = a ∘ σ`.

    proof assistant
      See :term:`ITP`.

    proof-irrelevant
      .. todo:: insert definition

    proofs-as-programs
      In :term:`type theory`, constructing a proof of a proposition ``P`` is equivalent to constructing an inhabitant of the type to which ``P`` corresponds (under the :term:`propositions-as-types` correspondence). The construction of such a proof ``p: P`` is viewed as a program that computes ``p`` as output.  See also https://ncatlab.org/nlab/show/proofs+as+programs and :term:`Curry-Howard correspondence` and :term:`propositions-as-types`.

    proof tactic    
      an automated procedure for constructing and manipulating proof terms.

    propositions-as-types
      In :term:`type theory`, the propositions-as-types correspondence says that propositions and types are essentially the same. A proposition, when viewed as a type, is identified with the collection (or type) of all its proofs, and a type is identified with the proposition that there exists something of that type.  See also https://ncatlab.org/nlab/show/propositions+as+types and :term:`Curry-Howard correspondence` and :term:`proofs-as-programs`.

    proposition extensionality
      This axiom asserts that when two propositions imply one another, they are actually equal. This is consistent with set-theoretic interpretations in which any element ``a:Prop`` is either empty or the singleton set ``{*}``, for some distinguished element ``*``. The axiom has the effect that equivalent propositions can be substituted for one another in any context. See also the `Proposition Extensionality <https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html#propositional-extensionality>`_ section of the :term:`TPIL`.

    quotient
      If :math:`R` is an :term:`equivalence relation` on :math:`A`, then the **quotient** of :math:`A` modulo :math:`R` is denoted by :math:`A/R` and is defined to be the collection :math:`\{ a/R ∣ a ∈ A \}` of :term:`equivalence classes <equivalence class>` of :math:`R`.

    record
      See :term:`structure`.

    recursor
      Each :term:`inductively defined type <inductive type>` ``T`` is accompanied by an elimination principle known as a **recursor** (denoted by ``T.rec`` in Lean). It is what makes the type "inductive" by allowing us to define a function on ``T`` by assigning values for each of ``T``'s constructors. See also :numref:`inductively-defined-types`.

    reduct
      Given two algebras :math:`𝔸` and :math:`𝔹`, we say that :math:`𝔹` is a **reduct** of :math:`𝔸` if both algebras have the same universe and :math:`𝔹` can be obtained from :math:`𝔸` by removing  operations.

    reflexive
      A binary relation :math:`R` on a set :math:`X` is called **reflexive** provided :math:`∀ x ∈ X, \ x \mathrel{R} x`.

    relation
      Given sets :math:`A` and :math:`B`, a **relation** from :math:`A` to :math:`B` is a subset of :math:`A × B`.

    relational product
      Given relations :math:`R : A → B` and :math:`S : B → C` we denote and define the **relational product** (or **composition**) of :math:`S` and :math:`R` to be :math:`S ∘ R = \{(a,c) : (∃ b ∈ B) a \mathrel{R} b ∧ b \mathrel{S} c \}`.

    relational structure
      A relational structure :math:`𝔸 = ⟨A, ℛ⟩` is a set :math:`A` together with a collection :math:`ℛ` of relations on :math:`A`.

    respects
      Given a function :math:`f: α → α`, we say that :math:`f` **respects** (or **preserves**) the binary relation :math:`R ⊆ α × α`, and we write :math:`f ⊧ R`, just in case :math:`∀ x, y :α \ (x \mathrel R y \ → \ f x \mathrel R f y)`.
        
      (The symbol ⊧ is produced by typing ``\models``.)

      If :math:`f: (β → α) → α` is a :math:`β`-ary operation on :math:`α`, we can extend the definition of ":math:`f` respects :math:`R`" in the obvious way.
      
      First, for every pair :math:`u : β → α` and :math:`v : β → α` (:math:`β`-tuples of :math:`α`), we say that :math:`(u, v)` "belongs to" :math:`R ⊆ α × α` provided
      
      .. math:: ∀ i: β \ ui \mathrel R vi
      
      Then we say :math:`f:  (β → α) → α` **respects** (or **preserves**) the binary relation :math:`R ⊆ α × α`, and we write :math:`f ⊧ R`, just in case :math:`∀ u, v, \ [(∀ i: β, \ u i \mathrel R v i) \ → \ f u \mathrel R f v]`.
        
    retraction
      todo: insert definition

    retract
      todo: insert definition

    right module
      A **right module** :math:`M` over a :term:`ring` :math:`R` is...

    ring
      An algebra :math:`⟨R, \{0, -, +, ⋅\}⟩` is called a **ring** just in case the following conditions hold:

      #. the reduct :math:`⟨R, \{0, -,+\}⟩` is an abelian group,
      #. the reduct :math:`⟨R, ⋅ ⟩` is a semigroup, and
      #. "multiplication" :math:`⋅` distributes over "addition" :math:`+`; that is, :math:`∀ a, b, c ∈ R`, :math:`a ⋅ (b+c) = a ⋅ b + a ⋅ c` and :math:`(a+b)⋅ c = a ⋅ c + b ⋅ c`.

    ring with unity
      A **ring with unity** (or **unital ring**) is an algebra :math:`⟨R, \{0, 1, -, +, ⋅\}⟩` with a ring :term:`reduct` :math:`⟨R, \{0, -, +, ⋅\}⟩` and a *multiplicative identity* :math:`1 ∈ R`; that is :math:`∀ r ∈ R`, :math:`r ⋅ 1 = r = 1 ⋅ r`.

    self-dual
      A category :math:`\mathcal C` is called **self-dual** if :math:`\mathcal C^{\mathrm{op}} = \mathcal C`.

    semigroup
      A :term:`magma` whose binary operation is associative is called a **semigroup**.  That is, a semigroup is a magma :math:`⟨A, ⋅⟩` whose binary operation satisfies :math:`∀ a, b, c ∈ A`, :math:`(a ⋅ b) ⋅ c = a ⋅ (b ⋅ c)`.

    σ-algebra
      See :term:`algebraic structure`.

    Sigma type
      The **Sigma type** :math:`Σ(x:A),B x`, also known as the **dependent pair type**, generalizes the Cartesian product :math:`A × B` by allowing the type :math:`B x` of the second argument of the ordered pair to depend on the value :math:`x` of the first.  See also the `Dependent Types`_ section of the `TPL`_ tutorial.

    signature
      a pair :math:`σ = (F, ρ)` consisting of a collection :math:`F` of operation symbols and an :term:`arity` function :math:`ρ : F → β` that maps each operation symbol to its :term:`arity`; here, :math:`β` denotes the arity type.

    simplex category
      See :term:`finite ordinals`.

    small category
      A category is called **small** if both its objects and morphisms form sets.

    source vertex
      Given a directed graph :math:`\mathbf G = (V,E)` and an edge :math:`e=(v_1,v_2) ∈ E`, we refer to :math:`v_1` as the **source vertex** of :math:`e`.

    structure
      In Lean, a non-recursive inductive type that contains only one constructor is called a **structure**. In mathematics, a structure may refer to an :term:`algebraic structure` or a :term:`relational structure`.

    subalgebra
      Suppose :math:`𝔸 = ⟨A, F^𝔸⟩` is an algebra. If :math:`B ≠ ∅` is a :term:`subuniverse` of 𝔸, and if we let :math:`F^𝔹 = \{ f ↾ B : f ∈ F^𝔸 \}`, then :math:`𝔹 = ⟨ B, F^𝔹 ⟩` is an algebra, called a **subalgebra** of 𝔸.

    subdcpo
      If :math:`X` is a :term:`dcpo` then the subset :math:`A ⊆ X` is a **subdcpo** of :math:`X` if every directed subset :math:`D ⊆ A` satisfies :math:`⋁_X D ∈ A`.

    subuniverse
      Suppose :math:`𝔸 = ⟨A, F^𝔸⟩` is an algebra. If a subset :math:`B ⊆ A` is closed under :math:`F^𝔸`, then we call :math:`B` a **subuniverse** of :math:`𝔸`.

    symmetric
      A binary relation :math:`R` on a set :math:`X` is called **symmetric** provided :math:`∀ x, y ∈ X \ (x \mathrel{R} y \ → \ y \mathrel{R} x)`;

    target vertex
      Given a directed graph :math:`\mathbf G = (V,E)` and an edge :math:`e=(v_1,v_2)\in E`, we refer to :math:`v_2` as the **target vertex** of :math:`e`.

    terminal object
      An object :math:`\mathbf{1}` is called a **terminal** (or **bound**) **object** if for every object :math:`A` in the same category there exists a unique morphism :math:`⟨\ ⟩_A: A → \mathbf{1}`.

    ternary operation
      An operation :math:`f` on a set :math:`A` is called **ternary** if the arity of :math:`f` is 3; that is, :math:`f: A × A × A → A` (or, in curried form, :math:`f: A → A → A → A`).

    total function
      Given sets :math:`A` and :math:`B`, a **total function** :math:`f` from :math:`A` to :math:`B` is what we typically mean by a “function” from :math:`A` to :math:`B`.

    total order
      A **total order** relation :math:`R` on a set :math:`X` is a partial order on :math:`X` satisfying :math:`∀ x, y ∈ X \ (x ≤ y \ ⋁ \ y ≤ x)`.

    transitive
      A binary relation :math:`R` on a set :math:`X` is called **transitive** provided :math:`∀ x, y, z ∈ X \ (x \mathrel{R} y ∧ y \mathrel{R} z\ → \ x \mathrel{R} z)`.

    type class
      A **type class** is a family of types; each type in the family is called an :index:`instance` of the type class.  **N.B.** Lean will infer an implicit argument using the type class mechanism if we put the argument in square brackets (instead of curly braces) in the declaration.

    type theory
      Intuitionistic **type theory** extends the :term:`Curry-Howard correspondence` to predicate logic by introducing :term:`dependent types <dependent type>`. :term:`TT` internalizes the interpretation of intuitionistic logic proposed by Brouwer, Heyting, and Kolmogorov---the so-called BHK interpretation. The types in :term:`TT` play a similar role to that of sets in set theory but *functions definable in TT are always computable*. See also `ncatlab.org/type+theory <https://ncatlab.org/nlab/show/type+theory>`_.

    unary operation
      An operation :math:`f` on a set :math:`A` is called **unary** if the arity of :math:`f` is 1; that is, :math:`f: A → A`.

    underlying set functor
      The **underlying set functor** of :math:`𝐌` is denoted by :math:`U(𝐌)`, or by :math:`|𝐌|`; it returns the *universe* of the structure :math:`𝐌`, and for each morphism :math:`f`, :math:`Uf` (or :math:`|f|`) is :math:`f` viewed simply as a function on sets.

    unit
      If :math:`⟨R, \{0, 1, -, +, ⋅\}⟩` is a unital ring, an element :math:`r ∈ R` is called a **unit** if it has a multiplicative inverse, that is, there exists :math:`s ∈ R` with :math:`r ⋅ s = 1 = s ⋅ r`.  (We usually denote such an :math:`s` by :math:`r^{-1}`.)

    unital ring
      See :term:`ring with unity`.

    universal image functor
      the functor :math:`∀ f : P(A) → P(B)` defined by :math:`∀ f (X) = \{y ∈ B : f^{-1}(\{y\}) \subseteq  X\}`, for :math:`X ∈ P(A)`.

    universal mapping property
      Let :math:`η_A : A → |𝔸^*|` be the function that maps :math:`a ∈ A` to the "one-letter word" :math:`a ∈ A^*`. The functors :math:`K (= \ ^∗)` and :math:`U (= |\ |)` are related by the **universal mapping property** of monoids, which says that for every monoid :math:`𝐌` and every function :math:`f : A → U 𝐌` there exists a unique morphism :math:`f̂ : KA → 𝐌` such that :math:`f = f̂ ∘ η`.

    universal property
      The unique morphism property of :term:`initial object` is what we refer to as a **universal property,** and we say that the free object in a category :math:`\mathcal C` is *universal for* all other objects in :math:`\mathcal C`.

    universe
      In :term:`type theory`, everything has a type---even a type has a type.  If ``α`` is a type, then ``α``'s type is ``Type u`` for some **universe** ``u``.  More accurately, the ``u`` here is actually a variable and whatever (natural number) value it takes on will be the universe *level* of the type ``α``.

      In universal algebra, the universe of an algebra is the set over which the algebra is defined.  For example, the universe of the algebra :math:`𝔸 = ⟨A, F^𝔸⟩` is :math:`A`.  (**N.B.** we sometimes use the word **carrier** to mean universe in this sense, which can be helpful when we wish to avoid confusion with the universe levels of Lean's type hierarchy.)

    universe polymorphism
      We use an example to demonstrate this concept. Given a type ``α``, no matter to which type universe ``α`` belongs, we can form the type ``list α`` of lists of elements of type ``α``, and this type will have the same type universe as ``α``. In other terms, 
      
        ``α: Type u`` if and only if ``list α: Type u``.
        
      The Lean code for this example follows.

      :: 

        universes u v
        variables (α: Type u) (β: Type v)
        #check list      -- Type u_1 → Type u_1
        #check list α    -- Type u
        #check list β    -- Type v

      The variable ``u_1`` ranges over type levels.  As the output of the ``#check`` shows, ``list α`` has ``Type u`` because ``α`` has ``Type u``. Similarly for ``list β``. 

    vector space
      If :math:`R` is a :term:`field`, then an :math:`R`-:term:`module` is typically called a **vector space** over :math:`R`.

--------------------------

.. .. rubric:: Footnotes

.. .. [1]

.. include:: hyperlink_references.rst

.. computationally pure
..   An expression is called **computationally pure** if
..   .. todo:: complete definition

.. pure
..   see :term:`computationally pure`

.. universe
..   .. todo:: insert definition
.. universes
..   see :term:`universe`
