.. File: facts.lagda.rst
.. Author: William DeMeo <williamdemeo@gmail.com>
.. Date: 23 May 2019
.. Updated: 13 Feb 2020
.. Copyright (c) 2019 William DeMeo

.. .. include:: _static/math_macros.rst

.. .. highlight:: agda

.. role:: cat
.. role:: code

.. _basic facts in agda:

======================
Basic Facts in Agda
======================


In this chapter we show how to state and prove in Agda the basic facts that we first encountered in :numref:`basic facts`. As in that section, we begin with the simple observation that composing homomorphisms gives a homomorphism. (See :numref:`Obs %s <obs 0>`.)

.. _composing homomorphisms:

Composing Homomorphisms
----------------------------

.. code-block:: agda

   -- composing homomorphisms gives a homomorphism		

.. todo:: insert include directive pointing to source file _static/homs.agda.1.rst
	  
.. .. include:: _static/homs.agda.1.rst

.. index:: ! equalizer

.. _equalizers:

Equalizers
---------------

Recall, the **equalizer** of the functions :math:`g` and :math:`h` is the set

.. math:: ùñ§(g,h) = \{ a : A ‚à£ g(a) = h(a) \}.

We begin by defining in Agda

#. the equalizer of two functions, ``E``,

#. a homomorphism, ``hom``, and 

#. the equalizer of two homomorphisms, ``E_hom``.

.. todo:: insert include directive pointing to source file _static/subuniverse.agda.1.rst
	  
.. .. include:: _static/subuniverse.agda.1.rst

We now formally prove that the equalizer ``ùñ§ g h`` of two homomorphisms ``g`` and ``h`` is a subuniverse of ùî∏ (cf. :numref:`Obs %s <obs 1>`).

.. todo:: insert include directive pointing to source file _static/homs.agda.2.rst
	  
.. .. include:: _static/homs.agda.2.rst


.. _homomorphisms agreeing on a generating set:

Homomorphisms agreeing on a generating set
---------------------------------------------

Recall (:numref:`Obs %s <obs 2>`), if two homomorphisms agree on a generating set, then they are equal.

More precisely, if a subset ``X`` is contained in the equalizer of two homomorphisms, then ``Sg X`` is also contained in the equalizer; thus, homomorphisms that agree on ``X`` also agree on ``Sg X``. Let us now state and prove this in Agda.

.. todo:: insert include directive pointing to source file _static/homs.agda.3.rst

.. .. include:: _static/homs.agda.3.rst

Alternatively, we could have proved the last fact using the inductive nature of the definition of subalgebra generated by a set.

Indeed, recall the definition of ``Y`` above and the proof that ``Y X`` is equal to ``Sg X``; thus, properties of the subuniverse generated by the set ``X`` can be proved using the recursor of ``Y``.

.. todo:: insert include directive pointing to source file _static/homs.agda.4.rst

.. .. include:: _static/homs.agda.4.rst

.. _factoring homomorphisms:

Factoring homomorphisms
--------------------------

Before implementing in Agda the result on factoring homomorphisms (:numref:`Obs %s <obs 4>`), let us consider whether it is possible to do so constructively.  Here is a related passage from `Theorem Proving in Lean`_:

  "The standard library also defines a choice principle that is entirely antithetical to a computational interpretation, since it magically produces 'data' from a proposition asserting its existence. Its use is essential to some classical constructions, and users can import it when needed. But expressions that use this construction to produce data do not have computational content, and in Lean we are required to mark such definitions ``noncomputable`` to flag that fact... To summarize, then, on top of the underlying framework of universes, dependent function types, and inductive types, the standard library adds three additional components:

  #. the axiom of propositional extensionality
  #. a quotient construction, which implies function extensionality
  #. a choice principle, which produces data from an existential proposition.

  The first two of these block normalization within Agda, but are compatible with byte-code evaluation, whereas the third is not amenable to computational interpretation."
   
The upshot is that we cannot always use Agda's ``exists.elim`` to produce data.

Nonetheless, we can use Agda's ``classical`` library and the ``noncomputable`` keyword to formalize proofs of nonconstructive results, like :numref:`Obs %s <obs 4>` on factoring homomorphisms.

.. index:: pair: epic; surjective
.. index:: pair: monic; injective
.. index:: bijective

First we define what it means for a function to be **epic** (or **surjective**), **monic** (or **injective**), and **bijective** (i.e., both epic and monic).

.. todo:: insert include directive pointing to source file _static/homs.agda.5.rst

.. .. include:: _static/homs.agda.5.rst

.. index:: inverse, right inverse

Next, we define the (``noncomputable``) **inverse** and **right inverse** and then prove that an epic function has a right inverse.

(The following is also placed inside the ``basic_facts`` section, inside the ``ualib`` namespace.)

.. todo:: insert include directive pointing to source file _static/homs.agda.6.rst

.. .. include:: _static/homs.agda.6.rst

Finally, we are ready to prove the homomorphism factorization lemma of :numref:`Obs %s <obs 4>`.

(Again, this belongs inside the ``basic_facts`` section.)

.. todo:: insert include directive pointing to source file _static/homs.agda.7.rst

.. .. include:: _static/homs.agda.7.rst

-------------------

.. include:: hyperlink_references.rst
