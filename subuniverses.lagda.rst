.. FILE: subuniverses.agda
.. AUTHOR: William DeMeo and Siva Somayyajula
.. DATE: 20 Feb 2020
.. UPDATE: 17 Jun 2020

.. _types for subalgebras:

=====================
Types for Subalgebras
=====================

Preliminaries
------------------

We define subuniverses and subalgebras and prove some basic facts about them in a module called ``subuniverses`` which resides in the ``subuniverses.lagda.rst`` file of the ``agda-ualib`` library.

The file starts, as usual, with a list of imports.

::

   {-# OPTIONS --without-K --exact-split --safe #-}

   open import prelude
   open import basic using (Signature; Algebra; Op)
   open import relations using (transitive)
   open import homomorphisms using (HOM; Hom; hom; is-homomorphism)

   open import terms
    using (Term; _̇_; _̂_; generator; node; comm-hom-term; comm-hom-term')

   open import Relation.Unary using (⋂)


.. _subuniverses in agda:

Subuniverses in Agda
------------------------

We begin the ``subuniverses`` module with a straightforward definition of the collection of subuniverses of an algebra A.  Since a subuniverse is a subset of the domain of A, it is defined as a predicate on ∣ A ∣.  Thus, the collection of subuniverses is a predicate on predicates on ∣ A ∣.

::

   module subuniverses {S : Signature 𝓞 𝓥} where

   Subuniverses : (A : Algebra 𝓤 S)
    →             Pred (Pred ∣ A ∣ 𝓣) (𝓞 ⊔ 𝓥 ⊔ 𝓤 ⊔ 𝓣)

   Subuniverses (A , FA) B =
    (f : ∣ S ∣)(a : ∥ S ∥ f → A) → Im a ⊆ B → FA f a ∈ B

Next we define a data type that represents the property of being a subuniverse. Note that, in order to keep ``A`` at same universe level as ``Σ B , F``, we force ``B`` to live in the same universe.  We need to do this so that both ``A`` and ``Σ B , F`` can be classified by the same predicate ``SClo``.

::

   data _is-supalgebra-of_
    (A : Algebra 𝓤 S) : Pred (Algebra 𝓤 S) (𝓞 ⊔ 𝓥 ⊔ 𝓤 ⁺) where
     mem : (B : Pred ∣ A ∣ 𝓤) (F : (f : ∣ S ∣)
      →    Op (∥ S ∥ f) (Σ B)) → ((f : ∣ S ∣)(a : ∥ S ∥ f → Σ B)
      →    ∣ F f a ∣ ≡ ∥ A ∥ f (λ i → ∣ a i ∣))
      →    A is-supalgebra-of (Σ B , F)

   _is-subalgebra-of_ : Algebra 𝓤 S → Algebra 𝓤 S → 𝓞 ⊔ 𝓥 ⊔ 𝓤 ⁺ ̇
   B is-subalgebra-of A = A is-supalgebra-of B

   _is-subalgebra-of-class_ : {𝓤 : Universe}(B : Algebra 𝓤 S)
    →            Pred (Algebra 𝓤 S)(𝓤 ⁺) → 𝓞 ⊔ 𝓥 ⊔ 𝓤 ⁺ ̇
   B is-subalgebra-of-class 𝒦 =
    Σ A ꞉ (Algebra _ S) , (A ∈ 𝒦) × (B is-subalgebra-of A)

   module _
    {A : Algebra 𝓤 S} {B : Pred ∣ A ∣ 𝓤}
    {F : (f : ∣ S ∣) → Op (∥ S ∥ f) (Σ B)}
    (B∈SubA : B ∈ Subuniverses A) where

    SubunivAlg : Algebra 𝓤 S
    SubunivAlg =
     Σ B , λ f x → ∥ A ∥ f (∣_∣ ∘ x) , B∈SubA f (∣_∣ ∘ x)(∥_∥ ∘ x)

    subuniv-to-subalg : SubunivAlg is-subalgebra-of A
    subuniv-to-subalg = mem B ∥ SubunivAlg ∥ λ f a → (refl _)

.. _obs 7 in agda:

Subuniverse generation in Agda
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Next we formalize the important theorem about subuniverse generation that we presented above in :numref:`Obs %s <obs 7>`.  Recall, if :math:`A = ⟨𝐴, …⟩` is an 𝑆-algebra, if :math:`∅ ≠ 𝐴₀ ⊆ 𝐴`, and if we define by recursion the sets :math:`A_{n+1} = Aₙ ∪ \{ f a : f ∈ F, a : ρ f → Aₙ \}`, then the subuniverse of A generated by 𝐴₀ is :math:`\mathrm{Sg}^A(A₀) = ⋃ₙ Aₙ`.

::

   record Subuniverse {A : Algebra 𝓤 S} : 𝓞 ⊔ 𝓥 ⊔ 𝓤 ⁺ ̇ where
    constructor mksub
    field
      sset  : Pred ∣ A ∣ 𝓤
      isSub : sset ∈ Subuniverses A

   module _ {A : Algebra 𝓤 S} where

    data Sg (X : Pred ∣ A ∣ 𝓣) : Pred ∣ A ∣ (𝓞 ⊔ 𝓥 ⊔ 𝓤 ⊔ 𝓣) where
     var : ∀ {v} → v ∈ X → v ∈ Sg X
     app :  ( f : ∣ S ∣ ) { a : ∥ S ∥ f → ∣ A ∣ }
      →       Im a ⊆ Sg X
             -----------------
      →       ∥ A ∥ f a ∈ Sg X

    sgIsSub : (X : Pred ∣ A ∣ 𝓤) → Sg X ∈ Subuniverses A
    sgIsSub _ f a α = app f α

    sgIsSmallest : {X : Pred ∣ A ∣ 𝓡} {Y : Pred ∣ A ∣ 𝓢}
     →             Y ∈ Subuniverses A
     →             X ⊆ Y
                  -----------------
     →              Sg X ⊆ Y

    -- By induction on x ∈ Sg X, show x ∈ Y
    sgIsSmallest _ X⊆Y (var v∈X) = X⊆Y v∈X

    sgIsSmallest {Y = Y} YIsSub X⊆Y (app f {a} ima⊆SgX) = app∈Y
     where
      -- First, show the args are in Y
      ima⊆Y : Im a ⊆ Y
      ima⊆Y i = sgIsSmallest YIsSub X⊆Y (ima⊆SgX i)

      --Since Y is a subuniverse of A, it contains the application
      app∈Y : ∥ A ∥ f a ∈ Y          --           of f to said args.
      app∈Y = YIsSub f a ima⊆Y

.. _obs 6 in agda:

Intersections of subalgebras are subalgebras
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Recall from :numref:`Obs %s <obs 6>` that the intersection ⋂ᵢ 𝐴ᵢ of a collection {𝐴ᵢ ∣ 𝐴ᵢ ≤ A} of subuniverses of an algebra A is again a subuniverse of A.  We formalize the statement and proof of this easy fact in Agda as follows.

::

   module _
    {A : Algebra 𝓤 S} {I : 𝓘 ̇}
    {𝒜 : I → Pred ∣ A ∣ 𝓣} where

    sub-inter-is-sub : ((i : I) → 𝒜 i ∈ Subuniverses A)
     →                 ⋂ I 𝒜 ∈ Subuniverses A

    sub-inter-is-sub Ai-is-Sub f a ima⊆⋂A = α
     where
      α : ∥ A ∥ f a ∈ ⋂ I 𝒜
      α i = Ai-is-Sub i f a λ j → ima⊆⋂A j i


.. _obs 12 in agda:

Subuniverse generation with terms
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Recall :numref:`Obs %s <obs 12>` presenting subuniverse generation using the images of terms: If 𝑌 is a subset of 𝐴, then :math:`\mathrm{Sg}^A(Y) = \{t^A a : t ∈ T(X), a : X → Y\}`. To formalize this in Agda, we first prove that subuniverses are closed under the action of term operations.

::

   module _
    {X : 𝓞 ⊔ 𝓥 ⊔ 𝓤 ̇}
    {A B : Algebra 𝓤 S}
    {B : Pred ∣ A ∣ 𝓤}
    (Y : 𝓤 ̇) where

    sub-term-closed : B ∈ Subuniverses A
     →                (t : Term)(b : X → ∣ A ∣)
     →                (∀ i → b i ∈ B)
                    ---------------------------
     →                ((t ̇ A) b) ∈ B

    sub-term-closed B≤A (generator x) b b∈B = b∈B x

    sub-term-closed B≤A (node f t) b b∈B =
      B≤A f (λ z → (t z ̇ A) b)
            (λ x → sub-term-closed B≤A (t x) b b∈B)

This proves :math:`\mathrm{Sg}^A(Y) ⊇ \{ t^A a : t ∈ 𝑇(𝑋), a : 𝑋 → 𝑌 \}`.

Next we prove :math:`\mathrm{Sg}^{A}(Y) ⊆ \{ t^A a : t ∈ 𝑇(𝑋), a : 𝑋 → 𝑌 \}` by the following steps:

  #. The image of 𝑌 under all terms, which we call `TermImage 𝑌`, is a subuniverse of A; i.e.,
     TermImage 𝑌 = :math:`⋃ \{ t^A a : t ∈ 𝑇(𝑋), a : 𝑋 → 𝑌 \} ≤ A`.
  #. 𝑌 ⊆ TermImage 𝑌 (obvious)
  #. :math:`\mathrm{Sg}^A(Y)` is the smallest subuniverse containing 𝑌 (see `sgIsSmallest`) so :math:`\mathrm{Sg}^A(Y)` ⊆ TermImage 𝑌.

(The last item was already proved above; see ``sgIsSmallest``.)

::

    data TermImage (Y : Pred ∣ A ∣ 𝓤) : Pred ∣ A ∣ (𝓞 ⊔ 𝓥 ⊔ 𝓤) where
     var : ∀ {y : ∣ A ∣} → y ∈ Y → y ∈ TermImage Y
     app : (f : ∣ S ∣) (t : ∥ S ∥ f → ∣ A ∣)
      →    (∀ i  →  t i ∈ TermImage Y)
          -------------------------------
      →    (∥ A ∥ f t) ∈ TermImage Y

    --1. TermImage is a subuniverse
    TermImageIsSub : (Y : Pred ∣ A ∣ 𝓤)
     →               TermImage Y ∈ Subuniverses A

    TermImageIsSub Y = λ f a x → app f a x

    --2. Y ⊆ TermImageY
    Y⊆TermImageY : (Y : Pred ∣ A ∣ 𝓤)
     →             Y ⊆ TermImage Y

    Y⊆TermImageY Y {a} a∈Y = var a∈Y


Finally, we can prove the desired inclusion.

::

    SgY⊆TermImageY : (Y : Pred ∣ A ∣ 𝓤) → Sg Y ⊆ TermImage Y
    SgY⊆TermImageY Y = sgIsSmallest (TermImageIsSub Y)
                                    (Y⊆TermImageY Y)

**Exercise**. Prove the following by generalizing the relation ≃ to predicates:

.. code-block::

   SgY≃TermImageY : (Y : Pred ∣ A ∣ k) → (TermImage Y) ≃ (Sg Y)
   SgY≃TermImageY {x} Y = ?

-----------------------------------------------------------------------------------


Subalgebras in Agda
---------------------

The next submodule is a generalization of MHE's implementation of subgroups. We consider the subalgebras of a given arbitrary "overalgebra" A.

**Ref**. This module generalizes `MHE's ambient module <https://www.cs.bham.ac.uk/~mhe/HoTT-UF-in-Agda-Lecture-Notes/HoTT-UF-Agda.html#subgroups-sip>`_ . It does for subuniverses what MHE does for subgroups.

::

   module _ {A : Algebra 𝓤 S} (UV : Univalence) where

    gfe : global-dfunext
    gfe = univalence-gives-global-dfunext UV

    op-closed : (∣ A ∣ → 𝓦 ̇) → 𝓞 ⊔ 𝓥 ⊔ 𝓤 ⊔ 𝓦 ̇
    op-closed B = (f : ∣ S ∣)(a : ∥ S ∥ f → ∣ A ∣)
     → ((i : ∥ S ∥ f) → B (a i)) → B (∥ A ∥ f a)

    subuniverse : 𝓞 ⊔ 𝓥 ⊔ 𝓤 ⁺ ̇
    subuniverse = Σ B ꞉ (𝓟 ∣ A ∣) , op-closed ( _∈₀ B)

    being-op-closed-is-subsingleton : (B : 𝓟 ∣ A ∣)
     →           is-subsingleton (op-closed ( _∈₀ B ))
    being-op-closed-is-subsingleton B = Π-is-subsingleton gfe
     (λ f → Π-is-subsingleton gfe
      (λ a → Π-is-subsingleton gfe
       (λ _ → ∈-is-subsingleton B (∥ A ∥ f a))))

    pr₁-is-embedding : is-embedding ∣_∣
    pr₁-is-embedding = pr₁-embedding being-op-closed-is-subsingleton

    --so equality of subalgebras is equality of their underlying
    --subsets in the powerset:
    ap-pr₁ : (B C : subuniverse) → B ≡ C → ∣ B ∣ ≡ ∣ C ∣
    ap-pr₁ B C = ap ∣_∣

    ap-pr₁-is-equiv : (B C : subuniverse) → is-equiv (ap-pr₁ B C)
    ap-pr₁-is-equiv =
     embedding-gives-ap-is-equiv ∣_∣ pr₁-is-embedding

    subuniverse-is-a-set : is-set subuniverse
    subuniverse-is-a-set B C = equiv-to-subsingleton
                              (ap-pr₁ B C , ap-pr₁-is-equiv B C)
                              (powersets-are-sets' UV ∣ B ∣ ∣ C ∣)

For a subuniverse 𝐵 of A, we want to form a subalgebra B = ⟨𝐵, …⟩ of A such that the operations of B are those of A restricted to 𝐵.

Here are some useful lemmas extracted from MHE's proof of `subgroup-equality`. The first is called `f` in MHE's proof.

::

    subuniverse-equality-gives-membership-equiv : (B C : subuniverse)
     →                                  B ≡ C
                         -----------------------------------
     →                   ( x : ∣ A ∣ ) → (x ∈₀ ∣ B ∣) ⇔ (x ∈₀ ∣ C ∣)
    subuniverse-equality-gives-membership-equiv B C B≡C x =
     transport (λ - → x ∈₀ ∣ - ∣) B≡C ,
      transport (λ - → x ∈₀ ∣ - ∣ ) ( B≡C ⁻¹ )

The next is called `h` in MHE's proof.

::

    membership-equiv-gives-carrier-equality : (B C : subuniverse)
     →          ((x : ∣ A ∣) →  x ∈₀ ∣ B ∣  ⇔  x ∈₀ ∣ C ∣)
               -----------------------------------------
     →                       ∣ B ∣ ≡ ∣ C ∣
    membership-equiv-gives-carrier-equality B C φ =
     subset-extensionality' UV α β
      where
       α :  ∣ B ∣ ⊆₀ ∣ C ∣
       α x = lr-implication (φ x)

       β : ∣ C ∣ ⊆₀ ∣ B ∣
       β x = rl-implication (φ x)

The next is called lemma `g` in MHE's proof.

::

    membership-equiv-gives-subuniverse-equality : (B C : subuniverse)
     →            (( x : ∣ A ∣ ) → x ∈₀ ∣ B ∣ ⇔ x ∈₀ ∣ C ∣)
                  ---------------------------------------
     →                          B ≡ C
    membership-equiv-gives-subuniverse-equality B C =
     inverse (ap-pr₁ B C)
     (ap-pr₁-is-equiv B C)
        ∘ (membership-equiv-gives-carrier-equality B C)

    membership-equiv-is-subsingleton : (B C : subuniverse)
     →    is-subsingleton (( x : ∣ A ∣) → x ∈₀ ∣ B ∣ ⇔ x ∈₀ ∣ C ∣)
    membership-equiv-is-subsingleton B C =
     Π-is-subsingleton gfe
      (λ x → ×-is-subsingleton
       (Π-is-subsingleton gfe (λ _ → ∈-is-subsingleton ∣ C ∣ x ))
         (Π-is-subsingleton gfe (λ _ → ∈-is-subsingleton ∣ B ∣ x )))

So, two subuniverses are equal if and only if they have the same elements (cf. `subgroup-equality <https://www.cs.bham.ac.uk/~mhe/HoTT-UF-in-Agda-Lecture-Notes/HoTT-UF-Agda.html#371022>`_ ):

::

    subuniverse-equality : (B C : subuniverse)
     →    (B ≡ C)  ≃  ((x : ∣ A ∣)  → (x ∈₀ ∣ B ∣) ⇔ (x ∈₀ ∣ C ∣))

    subuniverse-equality B C =
     logically-equivalent-subsingletons-are-equivalent _ _
       (subuniverse-is-a-set B C)
        (membership-equiv-is-subsingleton B C)
         (subuniverse-equality-gives-membership-equiv B C ,
           membership-equiv-gives-subuniverse-equality B C)

The converse of `membership-equiv-gives-carrier-equality` is obvious.

::

    carrier-equality-gives-membership-equiv : (B C : subuniverse)
     →                            ∣ B ∣ ≡ ∣ C ∣
                   ----------------------------------------
     →              ( ( x : ∣ A ∣ ) → x ∈₀ ∣ B ∣ ⇔ x ∈₀ ∣ C ∣ )
    carrier-equality-gives-membership-equiv B C (refl _) x = id , id

    --so we have...
    carrier-equiv : (B C : subuniverse)
     →   ((x : ∣ A ∣) → x ∈₀ ∣ B ∣ ⇔ x ∈₀ ∣ C ∣) ≃ (∣ B ∣ ≡ ∣ C ∣)
    carrier-equiv B C =
     logically-equivalent-subsingletons-are-equivalent _ _
      (membership-equiv-is-subsingleton B C)
       (powersets-are-sets' UV ∣ B ∣ ∣ C ∣)
        (membership-equiv-gives-carrier-equality B C ,
          carrier-equality-gives-membership-equiv B C)

    -- ...which yields an alternative subuniverse equality lemma.
    subuniverse-equality' : (B C : subuniverse)
     →                      (B ≡ C) ≃ (∣ B ∣ ≡ ∣ C ∣)
    subuniverse-equality' B C =
     (subuniverse-equality B C) ● (carrier-equiv B C)

Following MHE's analogous development for groups and their subgroups (cf. `Subgroup' <https://www.cs.bham.ac.uk/~mhe/HoTT-UF-in-Agda-Lecture-Notes/HoTT-UF-Agda.html#372215>`_ ) we define the type of subalgebras as follows.

::

    Subalgebra : 𝓞 ⊔ 𝓥 ⊔ 𝓤 ⁺ ̇
    Subalgebra = Σ B ꞉ (Algebra 𝓤 S) ,
                    Σ h ꞉ (∣ B ∣ → ∣ A ∣) ,
                      is-embedding h × is-homomorphism B A h


Identities in subalgebras
-----------------------------

Let S(𝒦) denote the class of algebras isomorphic to a subalgebra of a member of 𝒦.With our new formal definition of Subalgebra, we will show that every term equation, ``p ≈ q``, that is satisfied by all ``A ∈ 𝒦`` is also satisfied by all ``B ∈ S(𝒦)``. In other words, the collection of identities modeled by a given class of algebras is also modeled by all of the subalgebras of that class.

We first set down some notation for the modeling of identities. The standard notation is ``A ⊧ p ≈ q``, which means that the identity ``p ≈ q`` is satisfied in A. In otherwords, for all assignments ``a : X → ∣ A ∣`` of values to variables, we have ``(p ̇ A) a ≡ (q ̇ A) a``.

If 𝒦 is a class of structures, it is standard to write ``𝒦 ⊧ p ≈ q`` just in case all structures in the class 𝒦 model the identity p ≈ q.  However, because a class of structures has a different type than a single structure, we will need different notation, so we have settled on writing ``𝒦 ⊧ p ≋ q`` to denote this concept.

**Unicode Hint**. In Agda type ``\models`` to produce ⊧, type ``\~~`` to produce ≈, and type ``\~~~`` to produce ≋.

::

   module _
    {𝓤 : Universe}
    {X : 𝓧 ̇ }
    {UV : Univalence} where

    _⊧_≈_ : {X : 𝓧 ̇ } → Algebra 𝓤 S
     →      Term{X = X} → Term → 𝓧 ⊔ 𝓤 ̇

    A ⊧ p ≈ q = (p ̇ A) ≡ (q ̇ A)

    _⊧_≋_ : Pred (Algebra 𝓤 S) 𝓦
     →      Term{X = X} → Term → 𝓞 ⊔ 𝓥 ⊔ 𝓦 ⊔ 𝓧 ⊔ 𝓤 ⁺ ̇

    _⊧_≋_ 𝒦 p q = {A : Algebra _ S} → 𝒦 A → A ⊧ p ≈ q

    gdfe : global-dfunext
    gdfe = univalence-gives-global-dfunext UV

    SubalgebrasOfClass : Pred (Algebra 𝓤 S)(𝓤 ⁺) → 𝓞 ⊔ 𝓥 ⊔ 𝓤 ⁺ ̇
    SubalgebrasOfClass 𝒦 =
     Σ A ꞉ (Algebra _ S) , (A ∈ 𝒦) × Subalgebra{A = A} UV

    data SClo (𝒦 : Pred (Algebra 𝓤 S) (𝓤 ⁺)) : Pred (Algebra 𝓤 S) (𝓞 ⊔ 𝓥 ⊔ 𝓤 ⁺ ⁺ ) where
     sbase : {A :  Algebra _ S} → A ∈ 𝒦 → A ∈ SClo 𝒦
     sub : (SAK : SubalgebrasOfClass 𝒦) → (pr₁ ∥ (pr₂ SAK) ∥) ∈ SClo 𝒦

    S-closed : (ℒ𝒦 : (𝓤 : Universe) → Pred (Algebra 𝓤 S) (𝓤 ⁺))
     →      (𝓤 : Universe) → (B : Algebra 𝓤 S) → 𝓞 ⊔ 𝓥 ⊔ 𝓤 ⁺ ̇
    S-closed ℒ𝒦 =
     λ 𝓤 B → (B is-subalgebra-of-class (ℒ𝒦 𝓤)) → (B ∈ ℒ𝒦 𝓤)

    subalgebras-preserve-identities : (𝒦 : Pred (Algebra 𝓤 S) ( 𝓤 ⁺ ))(p q : Term{X = X})
     →  (𝒦 ⊧ p ≋ q) → (SAK : SubalgebrasOfClass 𝒦)
     →  (pr₁ ∥ (pr₂ SAK) ∥) ⊧ p ≈ q
    subalgebras-preserve-identities 𝒦 p q 𝒦⊧p≋q SAK = γ
     where

     A : Algebra 𝓤 S
     A = ∣ SAK ∣

     A∈𝒦 : A ∈ 𝒦
     A∈𝒦 = ∣ pr₂ SAK ∣

     A⊧p≈q : A ⊧ p ≈ q
     A⊧p≈q = 𝒦⊧p≋q A∈𝒦

     subalg : Subalgebra{A = A} UV
     subalg = ∥ pr₂ SAK ∥

     B : Algebra 𝓤 S
     B = pr₁ subalg

     h : ∣ B ∣ → ∣ A ∣
     h = ∣ pr₂ subalg ∣

     hem : is-embedding h
     hem = pr₁ ∥ pr₂ subalg ∥

     hhm : is-homomorphism B A h
     hhm = pr₂ ∥ pr₂ subalg ∥

     ξ : (b : X → ∣ B ∣ ) → h ((p ̇ B) b) ≡ h ((q ̇ B) b)
     ξ b =
      h ((p ̇ B) b)  ≡⟨ comm-hom-term' gdfe B A (h , hhm) p b ⟩
      (p ̇ A)(h ∘ b) ≡⟨ intensionality A⊧p≈q (h ∘ b) ⟩
      (q ̇ A)(h ∘ b) ≡⟨ (comm-hom-term' gdfe B A (h , hhm) q b)⁻¹ ⟩
      h ((q ̇ B) b)  ∎

     hlc : {b b' : domain h} → h b ≡ h b' → b ≡ b'
     hlc hb≡hb' = (embeddings-are-lc h hem) hb≡hb'

     γ : B ⊧ p ≈ q
     γ = gdfe λ b → hlc (ξ b)

----------------------------------------------------------------------------

.. _hom images in agda:

.. _obs 7.1 in agda:

Homomorphic images in Agda
--------------------------

In this section we show that the image of an (extensional) homomorphism is a subuniverse.  (A version for intensional homs appears below, but the proof is essentially the same.)  We also construct the subalgebra whose universe is a homomorphic image.

::

   module _ {A B : Algebra 𝓤 S} (h : hom A B)  where

    HomImage : ∣ B ∣ → 𝓤 ̇
    HomImage = λ b → Image ∣ h ∣ ∋ b

    hom-image : 𝓤 ̇
    hom-image = Σ (Image_∋_ ∣ h ∣)

    fres : ∣ A ∣ → Σ (Image_∋_ ∣ h ∣)
    fres a = ∣ h ∣ a , im a

    hom-image-alg : Algebra 𝓤 S
    hom-image-alg = hom-image , ops-interp
     where
      a : {f : ∣ S ∣ }(x : ∥ S ∥ f → hom-image)(y : ∥ S ∥ f) → ∣ A ∣
      a x y = Inv ∣ h ∣  ∣ x y ∣ ∥ x y ∥

      ops-interp : (f : ∣ S ∣) → Op (∥ S ∥ f) hom-image
      ops-interp =
       λ f x → (∣ h ∣  (∥ A ∥ f (a x)) , im (∥ A ∥ f (a x)))

We are about ready to formalize the easy fact that a homomorphic image is a subuniverse, but before doing so, let us go through the steps of the proof informally.  Let 𝑓 be an operation symbol, let :math:`b : ρ f → ∣ B ∣` be a (ρ 𝑓)-tuple of elements of ∣ 𝑩 ∣, and assume ∀ 𝑖, 𝑏(𝑖) ∈ Image ℎ.  We must show :math:`f^𝑩 b ∈ Image h`.  The assumption ∀ 𝑖,  𝑏(𝑖) ∈ Image ℎ implies that there is a (ρ 𝑓)-tuple :math:`𝑎 : ρ f → ∣ 𝑨 ∣`  such that ℎ ∘ 𝑎 = 𝑏.  Since ℎ is a homomorphism, we have :math:`f^𝑩 𝑏  = f^𝑩 (ℎ ∘ 𝑎) = ℎ (f^𝑨 𝑎) ∈` Image ℎ.

We formalize the proof in Agda as follows.

::

    hom-image-is-sub : {funext 𝓥 𝓤} → HomImage ∈ Subuniverses B
    hom-image-is-sub {fe} f b b∈Imf =
     eq (∥ B ∥ f (λ x → b x)) ( ∥ A ∥ f ar) γ
      where
       ar : ∥ S ∥ f → ∣ A ∣
       ar = λ x → Inv ∣ h ∣ (b x) (b∈Imf x)

       ζ : (λ x → ∣ h ∣ (ar x)) ≡ (λ x → b x)
       ζ = fe (λ x → InvIsInv ∣ h ∣ (b x) (b∈Imf x))

       γ : ∥ B ∥ f (λ x → b x)
            ≡ ∣ h ∣ (∥ A ∥ f (λ x → Inv ∣ h ∣ (b x)(b∈Imf x)))
       γ = ∥ B ∥ f (λ x → b x)  ≡⟨ ap ( ∥ B ∥ f ) (ζ ⁻¹) ⟩
           (∥ B ∥ f)(∣ h ∣ ∘ ar) ≡⟨ ( ∥ h ∥ f ar ) ⁻¹ ⟩
           ∣ h ∣ (∥ A ∥ f ar)    ∎

The intensional-hom-image module
---------------------------------

The image of an intensional HOM is a subuniverse. (N.B. the proof still requires function extensionality. Question: Is it necessary?)

::

   -- HOM image is subuniverse
   module intensional-hom-image
    {A B : Algebra 𝓤 S} (h : HOM A B)  where

    HOMImage : ∣ B ∣ → 𝓤 ̇
    HOMImage = λ b → Image ∣ h ∣ ∋ b

    HOM-image : 𝓤 ̇
    HOM-image = Σ (Image_∋_ ∣ h ∣)

    fres' : ∣ A ∣ → Σ (Image_∋_ ∣ h ∣)
    fres' a = ∣ h ∣ a , im a

    HOM-image-alg : Algebra 𝓤 S
    HOM-image-alg = HOM-image , ops-interp
     where
      a : {f : ∣ S ∣} (x : ∥ S ∥ f → HOM-image) (y : ∥ S ∥ f)
       →  ∣ A ∣
      a x y = Inv ∣ h ∣  ∣ x y ∣ ∥ x y ∥

      ops-interp : ( f : ∣ S ∣ ) → Op (∥ S ∥ f) HOM-image
      ops-interp = λ f x →(∣ h ∣ (∥ A ∥ f (a x)) , im (∥ A ∥ f (a x)))

    HOM-image-is-sub : funext 𝓥 𝓤 → HOMImage ∈ Subuniverses B
    HOM-image-is-sub fe f b b∈Imh = eq (∥ B ∥ f b) (∥ A ∥ f ar) γ
     where
      ar : ∥ S ∥ f → ∣ A ∣
      ar = λ x → Inv ∣ h ∣ (b x) (b∈Imh x)

      ζ : (λ x → ∣ h ∣ (ar x)) ≡ (λ x → b x)
      ζ = fe (λ x → InvIsInv ∣ h ∣ (b x) (b∈Imh x) )

      γ : ∥ B ∥ f (λ x → b x)
           ≡ ∣ h ∣ (∥ A ∥ f (λ x → Inv ∣ h ∣ (b x) (b∈Imh x)))
      γ =   ∥ B ∥ f (λ x → b x)      ≡⟨ ap ( ∥ B ∥ f ) ζ ⁻¹ ⟩
            ( ∥ B ∥ f ) ( ∣ h ∣ ∘ ar ) ≡⟨ intensionality ξ ar ⟩
             ∣ h ∣ ( ∥ A ∥ f ar )      ∎
       where
        τ : (λ f ar → (∥ B ∥ f)(∣ h ∣ ∘ ar))
             ≡ (λ f ar → ∣ h ∣ (∥ A ∥ f ar ))
        τ = (∥ h ∥)⁻¹
        ξ : (λ (ar : ∥ S ∥ f → ∣ A ∣) → (∥ B ∥ f)(∣ h ∣ ∘ ar))
             ≡ (λ (ar : ∥ S ∥ f → ∣ A ∣) → ∣ h ∣ (∥ A ∥ f ar))
        ξ = dep-intensionality τ f

    finv' : {X : 𝓤 ̇ } (b : X → ∣ HOM-image-alg ∣) (x : X) → ∣ A ∣
    finv' = λ b x → Inv ∣ h ∣ ∣ b x ∣ ∥ b x ∥


-------------------------

.. include:: hyperlink_references.rst



